ARM GAS  C:\usertemp\ccH5B2qy.s 			page 1


   1              		.cpu cortex-m7
   2              		.arch armv7e-m
   3              		.fpu fpv5-d16
   4              		.eabi_attribute 28, 1
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.file	"stm32h7xx_it.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.file 1 "Core/Src/stm32h7xx_it.c"
  19              		.section	.text.NMI_Handler,"ax",%progbits
  20              		.align	1
  21              		.global	NMI_Handler
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	NMI_Handler:
  27              	.LFB333:
   1:Core/Src/stm32h7xx_it.c **** /* USER CODE BEGIN Header */
   2:Core/Src/stm32h7xx_it.c **** /**
   3:Core/Src/stm32h7xx_it.c ****   ******************************************************************************
   4:Core/Src/stm32h7xx_it.c ****   * @file    stm32h7xx_it.c
   5:Core/Src/stm32h7xx_it.c ****   * @brief   Interrupt Service Routines.
   6:Core/Src/stm32h7xx_it.c ****   ******************************************************************************
   7:Core/Src/stm32h7xx_it.c ****   * @attention
   8:Core/Src/stm32h7xx_it.c ****   *
   9:Core/Src/stm32h7xx_it.c ****   * <h2><center>&copy; Copyright (c) 2024 STMicroelectronics.
  10:Core/Src/stm32h7xx_it.c ****   * All rights reserved.</center></h2>
  11:Core/Src/stm32h7xx_it.c ****   *
  12:Core/Src/stm32h7xx_it.c ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Core/Src/stm32h7xx_it.c ****   * the "License"; You may not use this file except in compliance with the
  14:Core/Src/stm32h7xx_it.c ****   * License. You may obtain a copy of the License at:
  15:Core/Src/stm32h7xx_it.c ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Core/Src/stm32h7xx_it.c ****   *
  17:Core/Src/stm32h7xx_it.c ****   ******************************************************************************
  18:Core/Src/stm32h7xx_it.c ****   */
  19:Core/Src/stm32h7xx_it.c **** /* USER CODE END Header */
  20:Core/Src/stm32h7xx_it.c **** 
  21:Core/Src/stm32h7xx_it.c **** /* Includes ------------------------------------------------------------------*/
  22:Core/Src/stm32h7xx_it.c **** #include "main.h"
  23:Core/Src/stm32h7xx_it.c **** #include "stm32h7xx_it.h"
  24:Core/Src/stm32h7xx_it.c **** /* Private includes ----------------------------------------------------------*/
  25:Core/Src/stm32h7xx_it.c **** /* USER CODE BEGIN Includes */
  26:Core/Src/stm32h7xx_it.c **** #include "ad7606.h"
  27:Core/Src/stm32h7xx_it.c **** /* USER CODE END Includes */
  28:Core/Src/stm32h7xx_it.c **** 
  29:Core/Src/stm32h7xx_it.c **** /* Private typedef -----------------------------------------------------------*/
  30:Core/Src/stm32h7xx_it.c **** /* USER CODE BEGIN TD */
  31:Core/Src/stm32h7xx_it.c **** 
ARM GAS  C:\usertemp\ccH5B2qy.s 			page 2


  32:Core/Src/stm32h7xx_it.c **** /* USER CODE END TD */
  33:Core/Src/stm32h7xx_it.c **** 
  34:Core/Src/stm32h7xx_it.c **** /* Private define ------------------------------------------------------------*/
  35:Core/Src/stm32h7xx_it.c **** /* USER CODE BEGIN PD */
  36:Core/Src/stm32h7xx_it.c **** 
  37:Core/Src/stm32h7xx_it.c **** /* USER CODE END PD */
  38:Core/Src/stm32h7xx_it.c **** 
  39:Core/Src/stm32h7xx_it.c **** /* Private macro -------------------------------------------------------------*/
  40:Core/Src/stm32h7xx_it.c **** /* USER CODE BEGIN PM */
  41:Core/Src/stm32h7xx_it.c **** 
  42:Core/Src/stm32h7xx_it.c **** /* USER CODE END PM */
  43:Core/Src/stm32h7xx_it.c **** 
  44:Core/Src/stm32h7xx_it.c **** /* Private variables ---------------------------------------------------------*/
  45:Core/Src/stm32h7xx_it.c **** /* USER CODE BEGIN PV */
  46:Core/Src/stm32h7xx_it.c **** 
  47:Core/Src/stm32h7xx_it.c **** /* USER CODE END PV */
  48:Core/Src/stm32h7xx_it.c **** 
  49:Core/Src/stm32h7xx_it.c **** /* Private function prototypes -----------------------------------------------*/
  50:Core/Src/stm32h7xx_it.c **** /* USER CODE BEGIN PFP */
  51:Core/Src/stm32h7xx_it.c **** 
  52:Core/Src/stm32h7xx_it.c **** /* USER CODE END PFP */
  53:Core/Src/stm32h7xx_it.c **** 
  54:Core/Src/stm32h7xx_it.c **** /* Private user code ---------------------------------------------------------*/
  55:Core/Src/stm32h7xx_it.c **** /* USER CODE BEGIN 0 */
  56:Core/Src/stm32h7xx_it.c **** 
  57:Core/Src/stm32h7xx_it.c **** /* USER CODE END 0 */
  58:Core/Src/stm32h7xx_it.c **** 
  59:Core/Src/stm32h7xx_it.c **** /* External variables --------------------------------------------------------*/
  60:Core/Src/stm32h7xx_it.c **** extern ETH_HandleTypeDef heth;
  61:Core/Src/stm32h7xx_it.c **** extern TIM_HandleTypeDef htim4;
  62:Core/Src/stm32h7xx_it.c **** 
  63:Core/Src/stm32h7xx_it.c **** /* USER CODE BEGIN EV */
  64:Core/Src/stm32h7xx_it.c **** 
  65:Core/Src/stm32h7xx_it.c **** /* USER CODE END EV */
  66:Core/Src/stm32h7xx_it.c **** 
  67:Core/Src/stm32h7xx_it.c **** /******************************************************************************/
  68:Core/Src/stm32h7xx_it.c **** /*           Cortex Processor Interruption and Exception Handlers          */
  69:Core/Src/stm32h7xx_it.c **** /******************************************************************************/
  70:Core/Src/stm32h7xx_it.c **** /**
  71:Core/Src/stm32h7xx_it.c ****   * @brief This function handles Non maskable interrupt.
  72:Core/Src/stm32h7xx_it.c ****   */
  73:Core/Src/stm32h7xx_it.c **** void NMI_Handler(void)
  74:Core/Src/stm32h7xx_it.c **** {
  28              		.loc 1 74 1 view -0
  29              		.cfi_startproc
  30              		@ Volatile: function does not return.
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34              	.L2:
  75:Core/Src/stm32h7xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  76:Core/Src/stm32h7xx_it.c **** 
  77:Core/Src/stm32h7xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 0 */
  78:Core/Src/stm32h7xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  79:Core/Src/stm32h7xx_it.c ****   while (1)
  35              		.loc 1 79 3 view .LVU1
  80:Core/Src/stm32h7xx_it.c ****   {
ARM GAS  C:\usertemp\ccH5B2qy.s 			page 3


  81:Core/Src/stm32h7xx_it.c ****   }
  36              		.loc 1 81 3 view .LVU2
  79:Core/Src/stm32h7xx_it.c ****   {
  37              		.loc 1 79 9 view .LVU3
  38 0000 FEE7     		b	.L2
  39              		.cfi_endproc
  40              	.LFE333:
  42              		.section	.text.HardFault_Handler,"ax",%progbits
  43              		.align	1
  44              		.global	HardFault_Handler
  45              		.syntax unified
  46              		.thumb
  47              		.thumb_func
  49              	HardFault_Handler:
  50              	.LFB334:
  82:Core/Src/stm32h7xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 1 */
  83:Core/Src/stm32h7xx_it.c **** }
  84:Core/Src/stm32h7xx_it.c **** 
  85:Core/Src/stm32h7xx_it.c **** /**
  86:Core/Src/stm32h7xx_it.c ****   * @brief This function handles Hard fault interrupt.
  87:Core/Src/stm32h7xx_it.c ****   */
  88:Core/Src/stm32h7xx_it.c **** void HardFault_Handler(void)
  89:Core/Src/stm32h7xx_it.c **** {
  51              		.loc 1 89 1 view -0
  52              		.cfi_startproc
  53              		@ Volatile: function does not return.
  54              		@ args = 0, pretend = 0, frame = 0
  55              		@ frame_needed = 0, uses_anonymous_args = 0
  56              		@ link register save eliminated.
  57              	.L4:
  90:Core/Src/stm32h7xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 0 */
  91:Core/Src/stm32h7xx_it.c **** 
  92:Core/Src/stm32h7xx_it.c ****   /* USER CODE END HardFault_IRQn 0 */
  93:Core/Src/stm32h7xx_it.c ****   while (1)
  58              		.loc 1 93 3 view .LVU5
  94:Core/Src/stm32h7xx_it.c ****   {
  95:Core/Src/stm32h7xx_it.c ****     /* USER CODE BEGIN W1_HardFault_IRQn 0 */
  96:Core/Src/stm32h7xx_it.c ****     /* USER CODE END W1_HardFault_IRQn 0 */
  97:Core/Src/stm32h7xx_it.c ****   }
  59              		.loc 1 97 3 view .LVU6
  93:Core/Src/stm32h7xx_it.c ****   {
  60              		.loc 1 93 9 view .LVU7
  61 0000 FEE7     		b	.L4
  62              		.cfi_endproc
  63              	.LFE334:
  65              		.section	.text.MemManage_Handler,"ax",%progbits
  66              		.align	1
  67              		.global	MemManage_Handler
  68              		.syntax unified
  69              		.thumb
  70              		.thumb_func
  72              	MemManage_Handler:
  73              	.LFB335:
  98:Core/Src/stm32h7xx_it.c **** }
  99:Core/Src/stm32h7xx_it.c **** 
 100:Core/Src/stm32h7xx_it.c **** /**
 101:Core/Src/stm32h7xx_it.c ****   * @brief This function handles Memory management fault.
ARM GAS  C:\usertemp\ccH5B2qy.s 			page 4


 102:Core/Src/stm32h7xx_it.c ****   */
 103:Core/Src/stm32h7xx_it.c **** void MemManage_Handler(void)
 104:Core/Src/stm32h7xx_it.c **** {
  74              		.loc 1 104 1 view -0
  75              		.cfi_startproc
  76              		@ Volatile: function does not return.
  77              		@ args = 0, pretend = 0, frame = 0
  78              		@ frame_needed = 0, uses_anonymous_args = 0
  79              		@ link register save eliminated.
  80              	.L6:
 105:Core/Src/stm32h7xx_it.c ****   /* USER CODE BEGIN MemoryManagement_IRQn 0 */
 106:Core/Src/stm32h7xx_it.c **** 
 107:Core/Src/stm32h7xx_it.c ****   /* USER CODE END MemoryManagement_IRQn 0 */
 108:Core/Src/stm32h7xx_it.c ****   while (1)
  81              		.loc 1 108 3 view .LVU9
 109:Core/Src/stm32h7xx_it.c ****   {
 110:Core/Src/stm32h7xx_it.c ****     /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
 111:Core/Src/stm32h7xx_it.c ****     /* USER CODE END W1_MemoryManagement_IRQn 0 */
 112:Core/Src/stm32h7xx_it.c ****   }
  82              		.loc 1 112 3 view .LVU10
 108:Core/Src/stm32h7xx_it.c ****   {
  83              		.loc 1 108 9 view .LVU11
  84 0000 FEE7     		b	.L6
  85              		.cfi_endproc
  86              	.LFE335:
  88              		.section	.text.BusFault_Handler,"ax",%progbits
  89              		.align	1
  90              		.global	BusFault_Handler
  91              		.syntax unified
  92              		.thumb
  93              		.thumb_func
  95              	BusFault_Handler:
  96              	.LFB336:
 113:Core/Src/stm32h7xx_it.c **** }
 114:Core/Src/stm32h7xx_it.c **** 
 115:Core/Src/stm32h7xx_it.c **** /**
 116:Core/Src/stm32h7xx_it.c ****   * @brief This function handles Pre-fetch fault, memory access fault.
 117:Core/Src/stm32h7xx_it.c ****   */
 118:Core/Src/stm32h7xx_it.c **** void BusFault_Handler(void)
 119:Core/Src/stm32h7xx_it.c **** {
  97              		.loc 1 119 1 view -0
  98              		.cfi_startproc
  99              		@ Volatile: function does not return.
 100              		@ args = 0, pretend = 0, frame = 0
 101              		@ frame_needed = 0, uses_anonymous_args = 0
 102              		@ link register save eliminated.
 103              	.L8:
 120:Core/Src/stm32h7xx_it.c ****   /* USER CODE BEGIN BusFault_IRQn 0 */
 121:Core/Src/stm32h7xx_it.c **** 
 122:Core/Src/stm32h7xx_it.c ****   /* USER CODE END BusFault_IRQn 0 */
 123:Core/Src/stm32h7xx_it.c ****   while (1)
 104              		.loc 1 123 3 view .LVU13
 124:Core/Src/stm32h7xx_it.c ****   {
 125:Core/Src/stm32h7xx_it.c ****     /* USER CODE BEGIN W1_BusFault_IRQn 0 */
 126:Core/Src/stm32h7xx_it.c ****     /* USER CODE END W1_BusFault_IRQn 0 */
 127:Core/Src/stm32h7xx_it.c ****   }
 105              		.loc 1 127 3 view .LVU14
ARM GAS  C:\usertemp\ccH5B2qy.s 			page 5


 123:Core/Src/stm32h7xx_it.c ****   {
 106              		.loc 1 123 9 view .LVU15
 107 0000 FEE7     		b	.L8
 108              		.cfi_endproc
 109              	.LFE336:
 111              		.section	.text.UsageFault_Handler,"ax",%progbits
 112              		.align	1
 113              		.global	UsageFault_Handler
 114              		.syntax unified
 115              		.thumb
 116              		.thumb_func
 118              	UsageFault_Handler:
 119              	.LFB337:
 128:Core/Src/stm32h7xx_it.c **** }
 129:Core/Src/stm32h7xx_it.c **** 
 130:Core/Src/stm32h7xx_it.c **** /**
 131:Core/Src/stm32h7xx_it.c ****   * @brief This function handles Undefined instruction or illegal state.
 132:Core/Src/stm32h7xx_it.c ****   */
 133:Core/Src/stm32h7xx_it.c **** void UsageFault_Handler(void)
 134:Core/Src/stm32h7xx_it.c **** {
 120              		.loc 1 134 1 view -0
 121              		.cfi_startproc
 122              		@ Volatile: function does not return.
 123              		@ args = 0, pretend = 0, frame = 0
 124              		@ frame_needed = 0, uses_anonymous_args = 0
 125              		@ link register save eliminated.
 126              	.L10:
 135:Core/Src/stm32h7xx_it.c ****   /* USER CODE BEGIN UsageFault_IRQn 0 */
 136:Core/Src/stm32h7xx_it.c **** 
 137:Core/Src/stm32h7xx_it.c ****   /* USER CODE END UsageFault_IRQn 0 */
 138:Core/Src/stm32h7xx_it.c ****   while (1)
 127              		.loc 1 138 3 view .LVU17
 139:Core/Src/stm32h7xx_it.c ****   {
 140:Core/Src/stm32h7xx_it.c ****     /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
 141:Core/Src/stm32h7xx_it.c ****     /* USER CODE END W1_UsageFault_IRQn 0 */
 142:Core/Src/stm32h7xx_it.c ****   }
 128              		.loc 1 142 3 view .LVU18
 138:Core/Src/stm32h7xx_it.c ****   {
 129              		.loc 1 138 9 view .LVU19
 130 0000 FEE7     		b	.L10
 131              		.cfi_endproc
 132              	.LFE337:
 134              		.section	.text.DebugMon_Handler,"ax",%progbits
 135              		.align	1
 136              		.global	DebugMon_Handler
 137              		.syntax unified
 138              		.thumb
 139              		.thumb_func
 141              	DebugMon_Handler:
 142              	.LFB338:
 143:Core/Src/stm32h7xx_it.c **** }
 144:Core/Src/stm32h7xx_it.c **** 
 145:Core/Src/stm32h7xx_it.c **** /**
 146:Core/Src/stm32h7xx_it.c ****   * @brief This function handles Debug monitor.
 147:Core/Src/stm32h7xx_it.c ****   */
 148:Core/Src/stm32h7xx_it.c **** void DebugMon_Handler(void)
 149:Core/Src/stm32h7xx_it.c **** {
ARM GAS  C:\usertemp\ccH5B2qy.s 			page 6


 143              		.loc 1 149 1 view -0
 144              		.cfi_startproc
 145              		@ args = 0, pretend = 0, frame = 0
 146              		@ frame_needed = 0, uses_anonymous_args = 0
 147              		@ link register save eliminated.
 150:Core/Src/stm32h7xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 0 */
 151:Core/Src/stm32h7xx_it.c **** 
 152:Core/Src/stm32h7xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 0 */
 153:Core/Src/stm32h7xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 1 */
 154:Core/Src/stm32h7xx_it.c **** 
 155:Core/Src/stm32h7xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 1 */
 156:Core/Src/stm32h7xx_it.c **** }
 148              		.loc 1 156 1 view .LVU21
 149 0000 7047     		bx	lr
 150              		.cfi_endproc
 151              	.LFE338:
 153              		.section	.text.TIM4_IRQHandler,"ax",%progbits
 154              		.align	1
 155              		.global	TIM4_IRQHandler
 156              		.syntax unified
 157              		.thumb
 158              		.thumb_func
 160              	TIM4_IRQHandler:
 161              	.LFB339:
 157:Core/Src/stm32h7xx_it.c **** 
 158:Core/Src/stm32h7xx_it.c **** /******************************************************************************/
 159:Core/Src/stm32h7xx_it.c **** /* STM32H7xx Peripheral Interrupt Handlers                                    */
 160:Core/Src/stm32h7xx_it.c **** /* Add here the Interrupt Handlers for the used peripherals.                  */
 161:Core/Src/stm32h7xx_it.c **** /* For the available peripheral interrupt handler names,                      */
 162:Core/Src/stm32h7xx_it.c **** /* please refer to the startup file (startup_stm32h7xx.s).                    */
 163:Core/Src/stm32h7xx_it.c **** /******************************************************************************/
 164:Core/Src/stm32h7xx_it.c **** 
 165:Core/Src/stm32h7xx_it.c **** /**
 166:Core/Src/stm32h7xx_it.c ****   * @brief This function handles TIM4 global interrupt.
 167:Core/Src/stm32h7xx_it.c ****   */
 168:Core/Src/stm32h7xx_it.c **** void TIM4_IRQHandler(void)
 169:Core/Src/stm32h7xx_it.c **** {
 162              		.loc 1 169 1 view -0
 163              		.cfi_startproc
 164              		@ args = 0, pretend = 0, frame = 0
 165              		@ frame_needed = 0, uses_anonymous_args = 0
 166 0000 08B5     		push	{r3, lr}
 167              	.LCFI0:
 168              		.cfi_def_cfa_offset 8
 169              		.cfi_offset 3, -8
 170              		.cfi_offset 14, -4
 170:Core/Src/stm32h7xx_it.c ****   /* USER CODE BEGIN TIM4_IRQn 0 */
 171:Core/Src/stm32h7xx_it.c **** 
 172:Core/Src/stm32h7xx_it.c ****   /* USER CODE END TIM4_IRQn 0 */
 173:Core/Src/stm32h7xx_it.c ****   HAL_TIM_IRQHandler(&htim4);
 171              		.loc 1 173 3 view .LVU23
 172 0002 0248     		ldr	r0, .L14
 173 0004 FFF7FEFF 		bl	HAL_TIM_IRQHandler
 174              	.LVL0:
 174:Core/Src/stm32h7xx_it.c ****   /* USER CODE BEGIN TIM4_IRQn 1 */
 175:Core/Src/stm32h7xx_it.c **** 
 176:Core/Src/stm32h7xx_it.c ****   /* USER CODE END TIM4_IRQn 1 */
ARM GAS  C:\usertemp\ccH5B2qy.s 			page 7


 177:Core/Src/stm32h7xx_it.c **** }
 175              		.loc 1 177 1 is_stmt 0 view .LVU24
 176 0008 08BD     		pop	{r3, pc}
 177              	.L15:
 178 000a 00BF     		.align	2
 179              	.L14:
 180 000c 00000000 		.word	htim4
 181              		.cfi_endproc
 182              	.LFE339:
 184              		.section	.text.EXTI15_10_IRQHandler,"ax",%progbits
 185              		.align	1
 186              		.global	EXTI15_10_IRQHandler
 187              		.syntax unified
 188              		.thumb
 189              		.thumb_func
 191              	EXTI15_10_IRQHandler:
 192              	.LFB340:
 178:Core/Src/stm32h7xx_it.c **** 
 179:Core/Src/stm32h7xx_it.c **** /**
 180:Core/Src/stm32h7xx_it.c ****   * @brief This function handles EXTI line[15:10] interrupts.
 181:Core/Src/stm32h7xx_it.c ****   */
 182:Core/Src/stm32h7xx_it.c **** void EXTI15_10_IRQHandler(void)
 183:Core/Src/stm32h7xx_it.c **** {
 193              		.loc 1 183 1 is_stmt 1 view -0
 194              		.cfi_startproc
 195              		@ args = 0, pretend = 0, frame = 0
 196              		@ frame_needed = 0, uses_anonymous_args = 0
 197 0000 08B5     		push	{r3, lr}
 198              	.LCFI1:
 199              		.cfi_def_cfa_offset 8
 200              		.cfi_offset 3, -8
 201              		.cfi_offset 14, -4
 184:Core/Src/stm32h7xx_it.c ****   /* USER CODE BEGIN EXTI15_10_IRQn 0 */
 185:Core/Src/stm32h7xx_it.c **** 
 186:Core/Src/stm32h7xx_it.c ****   /* USER CODE END EXTI15_10_IRQn 0 */
 187:Core/Src/stm32h7xx_it.c ****   HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 202              		.loc 1 187 3 view .LVU26
 203 0002 4FF48050 		mov	r0, #4096
 204 0006 FFF7FEFF 		bl	HAL_GPIO_EXTI_IRQHandler
 205              	.LVL1:
 188:Core/Src/stm32h7xx_it.c ****   /* USER CODE BEGIN EXTI15_10_IRQn 1 */
 189:Core/Src/stm32h7xx_it.c ****   
 190:Core/Src/stm32h7xx_it.c ****   /* USER CODE END EXTI15_10_IRQn 1 */
 191:Core/Src/stm32h7xx_it.c **** }
 206              		.loc 1 191 1 is_stmt 0 view .LVU27
 207 000a 08BD     		pop	{r3, pc}
 208              		.cfi_endproc
 209              	.LFE340:
 211              		.section	.text.ETH_IRQHandler,"ax",%progbits
 212              		.align	1
 213              		.global	ETH_IRQHandler
 214              		.syntax unified
 215              		.thumb
 216              		.thumb_func
 218              	ETH_IRQHandler:
 219              	.LFB341:
 192:Core/Src/stm32h7xx_it.c **** 
ARM GAS  C:\usertemp\ccH5B2qy.s 			page 8


 193:Core/Src/stm32h7xx_it.c **** /**
 194:Core/Src/stm32h7xx_it.c ****   * @brief This function handles Ethernet global interrupt.
 195:Core/Src/stm32h7xx_it.c ****   */
 196:Core/Src/stm32h7xx_it.c **** void ETH_IRQHandler(void)
 197:Core/Src/stm32h7xx_it.c **** {
 220              		.loc 1 197 1 is_stmt 1 view -0
 221              		.cfi_startproc
 222              		@ args = 0, pretend = 0, frame = 0
 223              		@ frame_needed = 0, uses_anonymous_args = 0
 224 0000 08B5     		push	{r3, lr}
 225              	.LCFI2:
 226              		.cfi_def_cfa_offset 8
 227              		.cfi_offset 3, -8
 228              		.cfi_offset 14, -4
 198:Core/Src/stm32h7xx_it.c ****   /* USER CODE BEGIN ETH_IRQn 0 */
 199:Core/Src/stm32h7xx_it.c **** 
 200:Core/Src/stm32h7xx_it.c ****   /* USER CODE END ETH_IRQn 0 */
 201:Core/Src/stm32h7xx_it.c ****   HAL_ETH_IRQHandler(&heth);
 229              		.loc 1 201 3 view .LVU29
 230 0002 0248     		ldr	r0, .L20
 231 0004 FFF7FEFF 		bl	HAL_ETH_IRQHandler
 232              	.LVL2:
 202:Core/Src/stm32h7xx_it.c ****   /* USER CODE BEGIN ETH_IRQn 1 */
 203:Core/Src/stm32h7xx_it.c ****   
 204:Core/Src/stm32h7xx_it.c ****   /* USER CODE END ETH_IRQn 1 */
 205:Core/Src/stm32h7xx_it.c **** }
 233              		.loc 1 205 1 is_stmt 0 view .LVU30
 234 0008 08BD     		pop	{r3, pc}
 235              	.L21:
 236 000a 00BF     		.align	2
 237              	.L20:
 238 000c 00000000 		.word	heth
 239              		.cfi_endproc
 240              	.LFE341:
 242              		.text
 243              	.Letext0:
 244              		.file 2 "D:/armtoolchain/arm-gnu-toolchain-13.3.rel1-mingw-w64-i686-arm-none-eabi/arm-none-eabi/in
 245              		.file 3 "D:/armtoolchain/arm-gnu-toolchain-13.3.rel1-mingw-w64-i686-arm-none-eabi/arm-none-eabi/in
 246              		.file 4 "Drivers/CMSIS/Device/ST/STM32H7xx/Include/stm32h743xx.h"
 247              		.file 5 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_def.h"
 248              		.file 6 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_dma.h"
 249              		.file 7 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_eth.h"
 250              		.file 8 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_tim.h"
 251              		.file 9 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_gpio.h"
ARM GAS  C:\usertemp\ccH5B2qy.s 			page 9


DEFINED SYMBOLS
                            *ABS*:00000000 stm32h7xx_it.c
C:\usertemp\ccH5B2qy.s:20     .text.NMI_Handler:00000000 $t
C:\usertemp\ccH5B2qy.s:26     .text.NMI_Handler:00000000 NMI_Handler
C:\usertemp\ccH5B2qy.s:43     .text.HardFault_Handler:00000000 $t
C:\usertemp\ccH5B2qy.s:49     .text.HardFault_Handler:00000000 HardFault_Handler
C:\usertemp\ccH5B2qy.s:66     .text.MemManage_Handler:00000000 $t
C:\usertemp\ccH5B2qy.s:72     .text.MemManage_Handler:00000000 MemManage_Handler
C:\usertemp\ccH5B2qy.s:89     .text.BusFault_Handler:00000000 $t
C:\usertemp\ccH5B2qy.s:95     .text.BusFault_Handler:00000000 BusFault_Handler
C:\usertemp\ccH5B2qy.s:112    .text.UsageFault_Handler:00000000 $t
C:\usertemp\ccH5B2qy.s:118    .text.UsageFault_Handler:00000000 UsageFault_Handler
C:\usertemp\ccH5B2qy.s:135    .text.DebugMon_Handler:00000000 $t
C:\usertemp\ccH5B2qy.s:141    .text.DebugMon_Handler:00000000 DebugMon_Handler
C:\usertemp\ccH5B2qy.s:154    .text.TIM4_IRQHandler:00000000 $t
C:\usertemp\ccH5B2qy.s:160    .text.TIM4_IRQHandler:00000000 TIM4_IRQHandler
C:\usertemp\ccH5B2qy.s:180    .text.TIM4_IRQHandler:0000000c $d
C:\usertemp\ccH5B2qy.s:185    .text.EXTI15_10_IRQHandler:00000000 $t
C:\usertemp\ccH5B2qy.s:191    .text.EXTI15_10_IRQHandler:00000000 EXTI15_10_IRQHandler
C:\usertemp\ccH5B2qy.s:212    .text.ETH_IRQHandler:00000000 $t
C:\usertemp\ccH5B2qy.s:218    .text.ETH_IRQHandler:00000000 ETH_IRQHandler
C:\usertemp\ccH5B2qy.s:238    .text.ETH_IRQHandler:0000000c $d

UNDEFINED SYMBOLS
HAL_TIM_IRQHandler
htim4
HAL_GPIO_EXTI_IRQHandler
HAL_ETH_IRQHandler
heth
