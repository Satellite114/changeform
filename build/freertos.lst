ARM GAS  C:\usertemp\ccDpNPsw.s 			page 1


   1              		.cpu cortex-m7
   2              		.arch armv7e-m
   3              		.fpu fpv5-d16
   4              		.eabi_attribute 28, 1
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.file	"freertos.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.file 1 "Core/Src/freertos.c"
  19              		.section	.text.StartDefaultTask,"ax",%progbits
  20              		.align	1
  21              		.global	StartDefaultTask
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	StartDefaultTask:
  27              	.LVL0:
  28              	.LFB366:
   1:Core/Src/freertos.c **** /* USER CODE BEGIN Header */
   2:Core/Src/freertos.c **** /**
   3:Core/Src/freertos.c ****   ******************************************************************************
   4:Core/Src/freertos.c ****   * File Name          : freertos.c
   5:Core/Src/freertos.c ****   * Description        : Code for freertos applications
   6:Core/Src/freertos.c ****   ******************************************************************************
   7:Core/Src/freertos.c ****   * @attention
   8:Core/Src/freertos.c ****   *
   9:Core/Src/freertos.c ****   * <h2><center>&copy; Copyright (c) 2024 STMicroelectronics.
  10:Core/Src/freertos.c ****   * All rights reserved.</center></h2>
  11:Core/Src/freertos.c ****   *
  12:Core/Src/freertos.c ****   * This software component is licensed by ST under Ultimate Liberty license
  13:Core/Src/freertos.c ****   * SLA0044, the "License"; You may not use this file except in compliance with
  14:Core/Src/freertos.c ****   * the License. You may obtain a copy of the License at:
  15:Core/Src/freertos.c ****   *                             www.st.com/SLA0044
  16:Core/Src/freertos.c ****   *
  17:Core/Src/freertos.c ****   ******************************************************************************
  18:Core/Src/freertos.c ****   */
  19:Core/Src/freertos.c **** /* USER CODE END Header */
  20:Core/Src/freertos.c **** 
  21:Core/Src/freertos.c **** /* Includes ------------------------------------------------------------------*/
  22:Core/Src/freertos.c **** #include "FreeRTOS.h"
  23:Core/Src/freertos.c **** #include "task.h"
  24:Core/Src/freertos.c **** #include "main.h"
  25:Core/Src/freertos.c **** #include "cmsis_os.h"
  26:Core/Src/freertos.c **** 
  27:Core/Src/freertos.c **** /* Private includes ----------------------------------------------------------*/
  28:Core/Src/freertos.c **** /* USER CODE BEGIN Includes */
  29:Core/Src/freertos.c **** #include "lwip/apps/httpd.h"
  30:Core/Src/freertos.c **** #include "lcdTest.h"
ARM GAS  C:\usertemp\ccDpNPsw.s 			page 2


  31:Core/Src/freertos.c **** #include "ad7606.h"
  32:Core/Src/freertos.c **** /* USER CODE END Includes */
  33:Core/Src/freertos.c **** 
  34:Core/Src/freertos.c **** /* Private typedef -----------------------------------------------------------*/
  35:Core/Src/freertos.c **** /* USER CODE BEGIN PTD */
  36:Core/Src/freertos.c **** 
  37:Core/Src/freertos.c **** /* USER CODE END PTD */
  38:Core/Src/freertos.c **** 
  39:Core/Src/freertos.c **** /* Private define ------------------------------------------------------------*/
  40:Core/Src/freertos.c **** /* USER CODE BEGIN PD */
  41:Core/Src/freertos.c **** 
  42:Core/Src/freertos.c **** /* USER CODE END PD */
  43:Core/Src/freertos.c **** 
  44:Core/Src/freertos.c **** /* Private macro -------------------------------------------------------------*/
  45:Core/Src/freertos.c **** /* USER CODE BEGIN PM */
  46:Core/Src/freertos.c **** 
  47:Core/Src/freertos.c **** /* USER CODE END PM */
  48:Core/Src/freertos.c **** 
  49:Core/Src/freertos.c **** /* Private variables ---------------------------------------------------------*/
  50:Core/Src/freertos.c **** /* USER CODE BEGIN Variables */
  51:Core/Src/freertos.c **** 
  52:Core/Src/freertos.c **** /* USER CODE END Variables */
  53:Core/Src/freertos.c **** osThreadId defaultTaskHandle;
  54:Core/Src/freertos.c **** osThreadId taskLedHandle;
  55:Core/Src/freertos.c **** 
  56:Core/Src/freertos.c **** /* Private function prototypes -----------------------------------------------*/
  57:Core/Src/freertos.c **** /* USER CODE BEGIN FunctionPrototypes */
  58:Core/Src/freertos.c **** 
  59:Core/Src/freertos.c **** /* USER CODE END FunctionPrototypes */
  60:Core/Src/freertos.c **** 
  61:Core/Src/freertos.c **** void StartDefaultTask(void const * argument);
  62:Core/Src/freertos.c **** void StartTask02(void const * argument);
  63:Core/Src/freertos.c **** 
  64:Core/Src/freertos.c **** extern void MX_LWIP_Init(void);
  65:Core/Src/freertos.c **** void MX_FREERTOS_Init(void); /* (MISRA C 2004 rule 8.1) */
  66:Core/Src/freertos.c **** 
  67:Core/Src/freertos.c **** /* GetIdleTaskMemory prototype (linked to static allocation support) */
  68:Core/Src/freertos.c **** void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskS
  69:Core/Src/freertos.c **** 
  70:Core/Src/freertos.c **** /* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
  71:Core/Src/freertos.c **** static StaticTask_t xIdleTaskTCBBuffer;
  72:Core/Src/freertos.c **** static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  73:Core/Src/freertos.c **** 
  74:Core/Src/freertos.c **** void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskS
  75:Core/Src/freertos.c **** {
  76:Core/Src/freertos.c ****   *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
  77:Core/Src/freertos.c ****   *ppxIdleTaskStackBuffer = &xIdleStack[0];
  78:Core/Src/freertos.c ****   *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
  79:Core/Src/freertos.c ****   /* place for user code */
  80:Core/Src/freertos.c **** }
  81:Core/Src/freertos.c **** /* USER CODE END GET_IDLE_TASK_MEMORY */
  82:Core/Src/freertos.c **** 
  83:Core/Src/freertos.c **** /**
  84:Core/Src/freertos.c ****   * @brief  FreeRTOS initialization
  85:Core/Src/freertos.c ****   * @param  None
  86:Core/Src/freertos.c ****   * @retval None
  87:Core/Src/freertos.c ****   */
ARM GAS  C:\usertemp\ccDpNPsw.s 			page 3


  88:Core/Src/freertos.c **** void MX_FREERTOS_Init(void) {
  89:Core/Src/freertos.c ****   /* USER CODE BEGIN Init */
  90:Core/Src/freertos.c **** 
  91:Core/Src/freertos.c ****   /* USER CODE END Init */
  92:Core/Src/freertos.c **** 
  93:Core/Src/freertos.c ****   /* USER CODE BEGIN RTOS_MUTEX */
  94:Core/Src/freertos.c ****   /* add mutexes, ... */
  95:Core/Src/freertos.c ****   /* USER CODE END RTOS_MUTEX */
  96:Core/Src/freertos.c **** 
  97:Core/Src/freertos.c ****   /* USER CODE BEGIN RTOS_SEMAPHORES */
  98:Core/Src/freertos.c ****   /* add semaphores, ... */
  99:Core/Src/freertos.c ****   /* USER CODE END RTOS_SEMAPHORES */
 100:Core/Src/freertos.c **** 
 101:Core/Src/freertos.c ****   /* USER CODE BEGIN RTOS_TIMERS */
 102:Core/Src/freertos.c ****   /* start timers, add new ones, ... */
 103:Core/Src/freertos.c ****   /* USER CODE END RTOS_TIMERS */
 104:Core/Src/freertos.c **** 
 105:Core/Src/freertos.c ****   /* USER CODE BEGIN RTOS_QUEUES */
 106:Core/Src/freertos.c ****   /* add queues, ... */
 107:Core/Src/freertos.c ****   /* USER CODE END RTOS_QUEUES */
 108:Core/Src/freertos.c **** 
 109:Core/Src/freertos.c ****   /* Create the thread(s) */
 110:Core/Src/freertos.c ****   /* definition and creation of defaultTask */
 111:Core/Src/freertos.c ****   osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 2048);
 112:Core/Src/freertos.c ****   defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 113:Core/Src/freertos.c **** 
 114:Core/Src/freertos.c ****   /* definition and creation of taskLed */
 115:Core/Src/freertos.c ****   osThreadDef(taskLed, StartTask02, osPriorityIdle, 0, 128);
 116:Core/Src/freertos.c ****   taskLedHandle = osThreadCreate(osThread(taskLed), NULL);
 117:Core/Src/freertos.c **** 
 118:Core/Src/freertos.c ****   /* USER CODE BEGIN RTOS_THREADS */
 119:Core/Src/freertos.c ****   /* add threads, ... */
 120:Core/Src/freertos.c ****   /* USER CODE END RTOS_THREADS */
 121:Core/Src/freertos.c **** 
 122:Core/Src/freertos.c **** }
 123:Core/Src/freertos.c **** 
 124:Core/Src/freertos.c **** /* USER CODE BEGIN Header_StartDefaultTask */
 125:Core/Src/freertos.c **** /**
 126:Core/Src/freertos.c ****   * @brief  Function implementing the defaultTask thread.
 127:Core/Src/freertos.c ****   * @param  argument: Not used
 128:Core/Src/freertos.c ****   * @retval None
 129:Core/Src/freertos.c ****   */
 130:Core/Src/freertos.c **** /* USER CODE END Header_StartDefaultTask */
 131:Core/Src/freertos.c **** void StartDefaultTask(void const * argument)
 132:Core/Src/freertos.c **** {
  29              		.loc 1 132 1 view -0
  30              		.cfi_startproc
  31              		@ Volatile: function does not return.
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		.loc 1 132 1 is_stmt 0 view .LVU1
  35 0000 08B5     		push	{r3, lr}
  36              	.LCFI0:
  37              		.cfi_def_cfa_offset 8
  38              		.cfi_offset 3, -8
  39              		.cfi_offset 14, -4
 133:Core/Src/freertos.c ****   /* init code for LWIP */
ARM GAS  C:\usertemp\ccDpNPsw.s 			page 4


 134:Core/Src/freertos.c ****   MX_LWIP_Init();
  40              		.loc 1 134 3 is_stmt 1 view .LVU2
  41 0002 FFF7FEFF 		bl	MX_LWIP_Init
  42              	.LVL1:
 135:Core/Src/freertos.c ****   /* USER CODE BEGIN StartDefaultTask */
 136:Core/Src/freertos.c ****   httpd_init();
  43              		.loc 1 136 3 view .LVU3
  44 0006 FFF7FEFF 		bl	httpd_init
  45              	.LVL2:
  46              	.L2:
 137:Core/Src/freertos.c ****   // osThreadTerminate(defaultTaskHandle);
 138:Core/Src/freertos.c ****   /* Infinite loop */
 139:Core/Src/freertos.c ****   for(;;)
  47              		.loc 1 139 3 view .LVU4
 140:Core/Src/freertos.c ****   {
 141:Core/Src/freertos.c ****     osDelay(1);
  48              		.loc 1 141 5 view .LVU5
  49 000a 0120     		movs	r0, #1
  50 000c FFF7FEFF 		bl	osDelay
  51              	.LVL3:
 142:Core/Src/freertos.c ****     LCD_TEST();
  52              		.loc 1 142 5 discriminator 1 view .LVU6
  53 0010 FFF7FEFF 		bl	LCD_TEST
  54              	.LVL4:
 139:Core/Src/freertos.c ****   {
  55              		.loc 1 139 3 view .LVU7
  56 0014 F9E7     		b	.L2
  57              		.cfi_endproc
  58              	.LFE366:
  60              		.section	.text.StartTask02,"ax",%progbits
  61              		.align	1
  62              		.global	StartTask02
  63              		.syntax unified
  64              		.thumb
  65              		.thumb_func
  67              	StartTask02:
  68              	.LFB367:
 143:Core/Src/freertos.c ****   }
 144:Core/Src/freertos.c ****   /* USER CODE END StartDefaultTask */
 145:Core/Src/freertos.c **** }
 146:Core/Src/freertos.c **** 
 147:Core/Src/freertos.c **** /* USER CODE BEGIN Header_StartTask02 */
 148:Core/Src/freertos.c **** /**
 149:Core/Src/freertos.c **** * @brief Function implementing the taskLed thread.
 150:Core/Src/freertos.c **** * @param argument: Not used
 151:Core/Src/freertos.c **** * @retval None
 152:Core/Src/freertos.c **** */
 153:Core/Src/freertos.c **** /* USER CODE END Header_StartTask02 */
 154:Core/Src/freertos.c **** void StartTask02(void const * argument)
 155:Core/Src/freertos.c **** {
  69              		.loc 1 155 1 view -0
  70              		.cfi_startproc
  71              		@ Volatile: function does not return.
  72              		@ args = 0, pretend = 0, frame = 0
  73              		@ frame_needed = 0, uses_anonymous_args = 0
  74              	.LVL5:
  75              		.loc 1 155 1 is_stmt 0 view .LVU9
ARM GAS  C:\usertemp\ccDpNPsw.s 			page 5


  76 0000 08B5     		push	{r3, lr}
  77              	.LCFI1:
  78              		.cfi_def_cfa_offset 8
  79              		.cfi_offset 3, -8
  80              		.cfi_offset 14, -4
  81              	.LVL6:
  82              	.L5:
 156:Core/Src/freertos.c ****   /* USER CODE BEGIN StartTask02 */
 157:Core/Src/freertos.c ****   /* Infinite loop */
 158:Core/Src/freertos.c ****   for(;;)
  83              		.loc 1 158 3 is_stmt 1 view .LVU10
 159:Core/Src/freertos.c ****   {
 160:Core/Src/freertos.c ****     HAL_GPIO_TogglePin(PG14_GPIO_Port,PG14_Pin);
  84              		.loc 1 160 5 view .LVU11
  85 0002 4FF48041 		mov	r1, #16384
  86 0006 0448     		ldr	r0, .L7
  87 0008 FFF7FEFF 		bl	HAL_GPIO_TogglePin
  88              	.LVL7:
 161:Core/Src/freertos.c ****     osDelay(1000);
  89              		.loc 1 161 5 discriminator 1 view .LVU12
  90 000c 4FF47A70 		mov	r0, #1000
  91 0010 FFF7FEFF 		bl	osDelay
  92              	.LVL8:
 158:Core/Src/freertos.c ****   {
  93              		.loc 1 158 3 view .LVU13
  94 0014 F5E7     		b	.L5
  95              	.L8:
  96 0016 00BF     		.align	2
  97              	.L7:
  98 0018 00180258 		.word	1476532224
  99              		.cfi_endproc
 100              	.LFE367:
 102              		.section	.text.vApplicationGetIdleTaskMemory,"ax",%progbits
 103              		.align	1
 104              		.global	vApplicationGetIdleTaskMemory
 105              		.syntax unified
 106              		.thumb
 107              		.thumb_func
 109              	vApplicationGetIdleTaskMemory:
 110              	.LVL9:
 111              	.LFB364:
  75:Core/Src/freertos.c ****   *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 112              		.loc 1 75 1 view -0
 113              		.cfi_startproc
 114              		@ args = 0, pretend = 0, frame = 0
 115              		@ frame_needed = 0, uses_anonymous_args = 0
 116              		@ link register save eliminated.
  76:Core/Src/freertos.c ****   *ppxIdleTaskStackBuffer = &xIdleStack[0];
 117              		.loc 1 76 3 view .LVU15
  76:Core/Src/freertos.c ****   *ppxIdleTaskStackBuffer = &xIdleStack[0];
 118              		.loc 1 76 25 is_stmt 0 view .LVU16
 119 0000 034B     		ldr	r3, .L10
 120 0002 0360     		str	r3, [r0]
  77:Core/Src/freertos.c ****   *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 121              		.loc 1 77 3 is_stmt 1 view .LVU17
  77:Core/Src/freertos.c ****   *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 122              		.loc 1 77 27 is_stmt 0 view .LVU18
ARM GAS  C:\usertemp\ccDpNPsw.s 			page 6


 123 0004 034B     		ldr	r3, .L10+4
 124 0006 0B60     		str	r3, [r1]
  78:Core/Src/freertos.c ****   /* place for user code */
 125              		.loc 1 78 3 is_stmt 1 view .LVU19
  78:Core/Src/freertos.c ****   /* place for user code */
 126              		.loc 1 78 25 is_stmt 0 view .LVU20
 127 0008 8023     		movs	r3, #128
 128 000a 1360     		str	r3, [r2]
  80:Core/Src/freertos.c **** /* USER CODE END GET_IDLE_TASK_MEMORY */
 129              		.loc 1 80 1 view .LVU21
 130 000c 7047     		bx	lr
 131              	.L11:
 132 000e 00BF     		.align	2
 133              	.L10:
 134 0010 00000000 		.word	xIdleTaskTCBBuffer
 135 0014 00000000 		.word	xIdleStack
 136              		.cfi_endproc
 137              	.LFE364:
 139              		.section	.text.MX_FREERTOS_Init,"ax",%progbits
 140              		.align	1
 141              		.global	MX_FREERTOS_Init
 142              		.syntax unified
 143              		.thumb
 144              		.thumb_func
 146              	MX_FREERTOS_Init:
 147              	.LFB365:
  88:Core/Src/freertos.c ****   /* USER CODE BEGIN Init */
 148              		.loc 1 88 29 is_stmt 1 view -0
 149              		.cfi_startproc
 150              		@ args = 0, pretend = 0, frame = 56
 151              		@ frame_needed = 0, uses_anonymous_args = 0
 152 0000 10B5     		push	{r4, lr}
 153              	.LCFI2:
 154              		.cfi_def_cfa_offset 8
 155              		.cfi_offset 4, -8
 156              		.cfi_offset 14, -4
 157 0002 8EB0     		sub	sp, sp, #56
 158              	.LCFI3:
 159              		.cfi_def_cfa_offset 64
 111:Core/Src/freertos.c ****   defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 160              		.loc 1 111 3 view .LVU23
 161 0004 124C     		ldr	r4, .L14
 162 0006 0DF11C0C 		add	ip, sp, #28
 163 000a A646     		mov	lr, r4
 164 000c BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 165 0010 ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 166 0014 9EE80700 		ldm	lr, {r0, r1, r2}
 167 0018 8CE80700 		stm	ip, {r0, r1, r2}
 112:Core/Src/freertos.c **** 
 168              		.loc 1 112 3 view .LVU24
 112:Core/Src/freertos.c **** 
 169              		.loc 1 112 23 is_stmt 0 view .LVU25
 170 001c 0021     		movs	r1, #0
 171 001e 07A8     		add	r0, sp, #28
 172 0020 FFF7FEFF 		bl	osThreadCreate
 173              	.LVL10:
 112:Core/Src/freertos.c **** 
ARM GAS  C:\usertemp\ccDpNPsw.s 			page 7


 174              		.loc 1 112 21 discriminator 1 view .LVU26
 175 0024 0B4B     		ldr	r3, .L14+4
 176 0026 1860     		str	r0, [r3]
 115:Core/Src/freertos.c ****   taskLedHandle = osThreadCreate(osThread(taskLed), NULL);
 177              		.loc 1 115 3 is_stmt 1 view .LVU27
 178 0028 EE46     		mov	lr, sp
 179 002a 04F11C0C 		add	ip, r4, #28
 180 002e BCE80F00 		ldmia	ip!, {r0, r1, r2, r3}
 181 0032 AEE80F00 		stmia	lr!, {r0, r1, r2, r3}
 182 0036 9CE80700 		ldm	ip, {r0, r1, r2}
 183 003a 8EE80700 		stm	lr, {r0, r1, r2}
 116:Core/Src/freertos.c **** 
 184              		.loc 1 116 3 view .LVU28
 116:Core/Src/freertos.c **** 
 185              		.loc 1 116 19 is_stmt 0 view .LVU29
 186 003e 0021     		movs	r1, #0
 187 0040 6846     		mov	r0, sp
 188 0042 FFF7FEFF 		bl	osThreadCreate
 189              	.LVL11:
 116:Core/Src/freertos.c **** 
 190              		.loc 1 116 17 discriminator 1 view .LVU30
 191 0046 044B     		ldr	r3, .L14+8
 192 0048 1860     		str	r0, [r3]
 122:Core/Src/freertos.c **** 
 193              		.loc 1 122 1 view .LVU31
 194 004a 0EB0     		add	sp, sp, #56
 195              	.LCFI4:
 196              		.cfi_def_cfa_offset 8
 197              		@ sp needed
 198 004c 10BD     		pop	{r4, pc}
 199              	.L15:
 200 004e 00BF     		.align	2
 201              	.L14:
 202 0050 00000000 		.word	.LANCHOR0
 203 0054 00000000 		.word	defaultTaskHandle
 204 0058 00000000 		.word	taskLedHandle
 205              		.cfi_endproc
 206              	.LFE365:
 208              		.section	.text.HAL_GPIO_EXTI_Callback,"ax",%progbits
 209              		.align	1
 210              		.global	HAL_GPIO_EXTI_Callback
 211              		.syntax unified
 212              		.thumb
 213              		.thumb_func
 215              	HAL_GPIO_EXTI_Callback:
 216              	.LVL12:
 217              	.LFB368:
 162:Core/Src/freertos.c ****   }
 163:Core/Src/freertos.c ****   /* USER CODE END StartTask02 */
 164:Core/Src/freertos.c **** }
 165:Core/Src/freertos.c **** 
 166:Core/Src/freertos.c **** /* Private application code --------------------------------------------------*/
 167:Core/Src/freertos.c **** /* USER CODE BEGIN Application */
 168:Core/Src/freertos.c **** /**
 169:Core/Src/freertos.c ****   * @brief  EXTI line detection callback.
 170:Core/Src/freertos.c ****   * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
 171:Core/Src/freertos.c ****   * @retval None
ARM GAS  C:\usertemp\ccDpNPsw.s 			page 8


 172:Core/Src/freertos.c ****   */
 173:Core/Src/freertos.c **** /* NOTE:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: 
 174:Core/Src/freertos.c ****               __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 175:Core/Src/freertos.c **** This function Should not be modified in the hal_gpio file, when the callback is needed,
 176:Core/Src/freertos.c ****            the HAL_GPIO_EXTI_Callback could be implemented in the user file
 177:Core/Src/freertos.c **** ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::*/
 178:Core/Src/freertos.c **** void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
 179:Core/Src/freertos.c **** {
 218              		.loc 1 179 1 is_stmt 1 view -0
 219              		.cfi_startproc
 220              		@ args = 0, pretend = 0, frame = 0
 221              		@ frame_needed = 0, uses_anonymous_args = 0
 180:Core/Src/freertos.c ****   //GPIO_PIN_12 == ADC Complete interrupt
 181:Core/Src/freertos.c ****   if(GPIO_Pin==GPIO_PIN_12)
 222              		.loc 1 181 3 view .LVU33
 223              		.loc 1 181 5 is_stmt 0 view .LVU34
 224 0000 B0F5805F 		cmp	r0, #4096
 225 0004 00D0     		beq	.L22
 226 0006 7047     		bx	lr
 227              	.L22:
 179:Core/Src/freertos.c ****   //GPIO_PIN_12 == ADC Complete interrupt
 228              		.loc 1 179 1 view .LVU35
 229 0008 08B5     		push	{r3, lr}
 230              	.LCFI5:
 231              		.cfi_def_cfa_offset 8
 232              		.cfi_offset 3, -8
 233              		.cfi_offset 14, -4
 182:Core/Src/freertos.c ****   {
 183:Core/Src/freertos.c ****       test_AD7606();
 234              		.loc 1 183 7 is_stmt 1 view .LVU36
 235 000a FFF7FEFF 		bl	test_AD7606
 236              	.LVL13:
 184:Core/Src/freertos.c ****   }
 185:Core/Src/freertos.c **** 
 186:Core/Src/freertos.c **** }
 237              		.loc 1 186 1 is_stmt 0 view .LVU37
 238 000e 08BD     		pop	{r3, pc}
 239              		.cfi_endproc
 240              	.LFE368:
 242              		.section	.rodata.str1.4,"aMS",%progbits,1
 243              		.align	2
 244              	.LC2:
 245 0000 7461736B 		.ascii	"taskLed\000"
 245      4C656400 
 246              		.align	2
 247              	.LC0:
 248 0008 64656661 		.ascii	"defaultTask\000"
 248      756C7454 
 248      61736B00 
 249              		.section	.bss.xIdleStack,"aw",%nobits
 250              		.align	2
 253              	xIdleStack:
 254 0000 00000000 		.space	512
 254      00000000 
 254      00000000 
 254      00000000 
 254      00000000 
ARM GAS  C:\usertemp\ccDpNPsw.s 			page 9


 255              		.section	.bss.xIdleTaskTCBBuffer,"aw",%nobits
 256              		.align	2
 259              	xIdleTaskTCBBuffer:
 260 0000 00000000 		.space	84
 260      00000000 
 260      00000000 
 260      00000000 
 260      00000000 
 261              		.global	taskLedHandle
 262              		.section	.bss.taskLedHandle,"aw",%nobits
 263              		.align	2
 266              	taskLedHandle:
 267 0000 00000000 		.space	4
 268              		.global	defaultTaskHandle
 269              		.section	.bss.defaultTaskHandle,"aw",%nobits
 270              		.align	2
 273              	defaultTaskHandle:
 274 0000 00000000 		.space	4
 275              		.section	.rodata
 276              		.align	2
 277              		.set	.LANCHOR0,. + 0
 278              	.LC4:
 279 0000 08000000 		.word	.LC0
 280 0004 00000000 		.word	StartDefaultTask
 281 0008 0000     		.short	0
 282 000a 0000     		.space	2
 283 000c 00000000 		.word	0
 284 0010 00080000 		.word	2048
 285 0014 00000000 		.word	0
 286 0018 00000000 		.word	0
 287              	.LC5:
 288 001c 00000000 		.word	.LC2
 289 0020 00000000 		.word	StartTask02
 290 0024 FDFF     		.short	-3
 291 0026 0000     		.space	2
 292 0028 00000000 		.word	0
 293 002c 80000000 		.word	128
 294 0030 00000000 		.word	0
 295 0034 00000000 		.word	0
 296              		.text
 297              	.Letext0:
 298              		.file 2 "D:/armtoolchain/arm-gnu-toolchain-13.3.rel1-mingw-w64-i686-arm-none-eabi/arm-none-eabi/in
 299              		.file 3 "D:/armtoolchain/arm-gnu-toolchain-13.3.rel1-mingw-w64-i686-arm-none-eabi/arm-none-eabi/in
 300              		.file 4 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
 301              		.file 5 "Middlewares/Third_Party/FreeRTOS/Source/include/FreeRTOS.h"
 302              		.file 6 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 303              		.file 7 "Drivers/CMSIS/Device/ST/STM32H7xx/Include/stm32h743xx.h"
 304              		.file 8 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.h"
 305              		.file 9 "Core/Inc/ad7606.h"
 306              		.file 10 "Drivers/LCD_FMC/inc/lcdTest.h"
 307              		.file 11 "Middlewares/Third_Party/LwIP/src/include/lwip/apps/httpd.h"
 308              		.file 12 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_gpio.h"
ARM GAS  C:\usertemp\ccDpNPsw.s 			page 10


DEFINED SYMBOLS
                            *ABS*:00000000 freertos.c
C:\usertemp\ccDpNPsw.s:20     .text.StartDefaultTask:00000000 $t
C:\usertemp\ccDpNPsw.s:26     .text.StartDefaultTask:00000000 StartDefaultTask
C:\usertemp\ccDpNPsw.s:61     .text.StartTask02:00000000 $t
C:\usertemp\ccDpNPsw.s:67     .text.StartTask02:00000000 StartTask02
C:\usertemp\ccDpNPsw.s:98     .text.StartTask02:00000018 $d
C:\usertemp\ccDpNPsw.s:103    .text.vApplicationGetIdleTaskMemory:00000000 $t
C:\usertemp\ccDpNPsw.s:109    .text.vApplicationGetIdleTaskMemory:00000000 vApplicationGetIdleTaskMemory
C:\usertemp\ccDpNPsw.s:134    .text.vApplicationGetIdleTaskMemory:00000010 $d
C:\usertemp\ccDpNPsw.s:259    .bss.xIdleTaskTCBBuffer:00000000 xIdleTaskTCBBuffer
C:\usertemp\ccDpNPsw.s:253    .bss.xIdleStack:00000000 xIdleStack
C:\usertemp\ccDpNPsw.s:140    .text.MX_FREERTOS_Init:00000000 $t
C:\usertemp\ccDpNPsw.s:146    .text.MX_FREERTOS_Init:00000000 MX_FREERTOS_Init
C:\usertemp\ccDpNPsw.s:202    .text.MX_FREERTOS_Init:00000050 $d
C:\usertemp\ccDpNPsw.s:273    .bss.defaultTaskHandle:00000000 defaultTaskHandle
C:\usertemp\ccDpNPsw.s:266    .bss.taskLedHandle:00000000 taskLedHandle
C:\usertemp\ccDpNPsw.s:209    .text.HAL_GPIO_EXTI_Callback:00000000 $t
C:\usertemp\ccDpNPsw.s:215    .text.HAL_GPIO_EXTI_Callback:00000000 HAL_GPIO_EXTI_Callback
C:\usertemp\ccDpNPsw.s:243    .rodata.str1.4:00000000 $d
C:\usertemp\ccDpNPsw.s:250    .bss.xIdleStack:00000000 $d
C:\usertemp\ccDpNPsw.s:256    .bss.xIdleTaskTCBBuffer:00000000 $d
C:\usertemp\ccDpNPsw.s:263    .bss.taskLedHandle:00000000 $d
C:\usertemp\ccDpNPsw.s:270    .bss.defaultTaskHandle:00000000 $d
C:\usertemp\ccDpNPsw.s:276    .rodata:00000000 $d

UNDEFINED SYMBOLS
MX_LWIP_Init
httpd_init
osDelay
LCD_TEST
HAL_GPIO_TogglePin
osThreadCreate
test_AD7606
