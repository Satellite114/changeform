ARM GAS  C:\usertemp\cccoP0GL.s 			page 1


   1              		.cpu cortex-m7
   2              		.arch armv7e-m
   3              		.fpu fpv5-d16
   4              		.eabi_attribute 28, 1
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.file	"freertos.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.file 1 "Core/Src/freertos.c"
  19              		.section	.text.StartDefaultTask,"ax",%progbits
  20              		.align	1
  21              		.global	StartDefaultTask
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	StartDefaultTask:
  27              	.LVL0:
  28              	.LFB366:
   1:Core/Src/freertos.c **** /* USER CODE BEGIN Header */
   2:Core/Src/freertos.c **** /**
   3:Core/Src/freertos.c ****   ******************************************************************************
   4:Core/Src/freertos.c ****   * File Name          : freertos.c
   5:Core/Src/freertos.c ****   * Description        : Code for freertos applications
   6:Core/Src/freertos.c ****   ******************************************************************************
   7:Core/Src/freertos.c ****   * @attention
   8:Core/Src/freertos.c ****   *
   9:Core/Src/freertos.c ****   * <h2><center>&copy; Copyright (c) 2024 STMicroelectronics.
  10:Core/Src/freertos.c ****   * All rights reserved.</center></h2>
  11:Core/Src/freertos.c ****   *
  12:Core/Src/freertos.c ****   * This software component is licensed by ST under Ultimate Liberty license
  13:Core/Src/freertos.c ****   * SLA0044, the "License"; You may not use this file except in compliance with
  14:Core/Src/freertos.c ****   * the License. You may obtain a copy of the License at:
  15:Core/Src/freertos.c ****   *                             www.st.com/SLA0044
  16:Core/Src/freertos.c ****   *
  17:Core/Src/freertos.c ****   ******************************************************************************
  18:Core/Src/freertos.c ****   */
  19:Core/Src/freertos.c **** /* USER CODE END Header */
  20:Core/Src/freertos.c **** 
  21:Core/Src/freertos.c **** /* Includes ------------------------------------------------------------------*/
  22:Core/Src/freertos.c **** #include "FreeRTOS.h"
  23:Core/Src/freertos.c **** #include "task.h"
  24:Core/Src/freertos.c **** #include "main.h"
  25:Core/Src/freertos.c **** #include "cmsis_os.h"
  26:Core/Src/freertos.c **** 
  27:Core/Src/freertos.c **** /* Private includes ----------------------------------------------------------*/
  28:Core/Src/freertos.c **** /* USER CODE BEGIN Includes */
  29:Core/Src/freertos.c **** #include "lwip/apps/httpd.h"
  30:Core/Src/freertos.c **** #include "ad7606.h"
ARM GAS  C:\usertemp\cccoP0GL.s 			page 2


  31:Core/Src/freertos.c **** #
  32:Core/Src/freertos.c **** /* USER CODE END Includes */
  33:Core/Src/freertos.c **** 
  34:Core/Src/freertos.c **** /* Private typedef -----------------------------------------------------------*/
  35:Core/Src/freertos.c **** /* USER CODE BEGIN PTD */
  36:Core/Src/freertos.c **** 
  37:Core/Src/freertos.c **** /* USER CODE END PTD */
  38:Core/Src/freertos.c **** 
  39:Core/Src/freertos.c **** /* Private define ------------------------------------------------------------*/
  40:Core/Src/freertos.c **** /* USER CODE BEGIN PD */
  41:Core/Src/freertos.c **** 
  42:Core/Src/freertos.c **** /* USER CODE END PD */
  43:Core/Src/freertos.c **** 
  44:Core/Src/freertos.c **** /* Private macro -------------------------------------------------------------*/
  45:Core/Src/freertos.c **** /* USER CODE BEGIN PM */
  46:Core/Src/freertos.c **** 
  47:Core/Src/freertos.c **** /* USER CODE END PM */
  48:Core/Src/freertos.c **** 
  49:Core/Src/freertos.c **** /* Private variables ---------------------------------------------------------*/
  50:Core/Src/freertos.c **** /* USER CODE BEGIN Variables */
  51:Core/Src/freertos.c **** 
  52:Core/Src/freertos.c **** /* USER CODE END Variables */
  53:Core/Src/freertos.c **** osThreadId defaultTaskHandle;
  54:Core/Src/freertos.c **** osThreadId taskLedHandle;
  55:Core/Src/freertos.c **** 
  56:Core/Src/freertos.c **** /* Private function prototypes -----------------------------------------------*/
  57:Core/Src/freertos.c **** /* USER CODE BEGIN FunctionPrototypes */
  58:Core/Src/freertos.c **** 
  59:Core/Src/freertos.c **** /* USER CODE END FunctionPrototypes */
  60:Core/Src/freertos.c **** 
  61:Core/Src/freertos.c **** void StartDefaultTask(void const * argument);
  62:Core/Src/freertos.c **** void StartTask02(void const * argument);
  63:Core/Src/freertos.c **** 
  64:Core/Src/freertos.c **** extern void MX_LWIP_Init(void);
  65:Core/Src/freertos.c **** void MX_FREERTOS_Init(void); /* (MISRA C 2004 rule 8.1) */
  66:Core/Src/freertos.c **** 
  67:Core/Src/freertos.c **** /* GetIdleTaskMemory prototype (linked to static allocation support) */
  68:Core/Src/freertos.c **** void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskS
  69:Core/Src/freertos.c **** 
  70:Core/Src/freertos.c **** /* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
  71:Core/Src/freertos.c **** static StaticTask_t xIdleTaskTCBBuffer;
  72:Core/Src/freertos.c **** static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  73:Core/Src/freertos.c **** 
  74:Core/Src/freertos.c **** void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskS
  75:Core/Src/freertos.c **** {
  76:Core/Src/freertos.c ****   *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
  77:Core/Src/freertos.c ****   *ppxIdleTaskStackBuffer = &xIdleStack[0];
  78:Core/Src/freertos.c ****   *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
  79:Core/Src/freertos.c ****   /* place for user code */
  80:Core/Src/freertos.c **** }
  81:Core/Src/freertos.c **** /* USER CODE END GET_IDLE_TASK_MEMORY */
  82:Core/Src/freertos.c **** 
  83:Core/Src/freertos.c **** /**
  84:Core/Src/freertos.c ****   * @brief  FreeRTOS initialization
  85:Core/Src/freertos.c ****   * @param  None
  86:Core/Src/freertos.c ****   * @retval None
  87:Core/Src/freertos.c ****   */
ARM GAS  C:\usertemp\cccoP0GL.s 			page 3


  88:Core/Src/freertos.c **** void MX_FREERTOS_Init(void) {
  89:Core/Src/freertos.c ****   /* USER CODE BEGIN Init */
  90:Core/Src/freertos.c **** 
  91:Core/Src/freertos.c ****   /* USER CODE END Init */
  92:Core/Src/freertos.c **** 
  93:Core/Src/freertos.c ****   /* USER CODE BEGIN RTOS_MUTEX */
  94:Core/Src/freertos.c ****   /* add mutexes, ... */
  95:Core/Src/freertos.c ****   /* USER CODE END RTOS_MUTEX */
  96:Core/Src/freertos.c **** 
  97:Core/Src/freertos.c ****   /* USER CODE BEGIN RTOS_SEMAPHORES */
  98:Core/Src/freertos.c ****   /* add semaphores, ... */
  99:Core/Src/freertos.c ****   /* USER CODE END RTOS_SEMAPHORES */
 100:Core/Src/freertos.c **** 
 101:Core/Src/freertos.c ****   /* USER CODE BEGIN RTOS_TIMERS */
 102:Core/Src/freertos.c ****   /* start timers, add new ones, ... */
 103:Core/Src/freertos.c ****   /* USER CODE END RTOS_TIMERS */
 104:Core/Src/freertos.c **** 
 105:Core/Src/freertos.c ****   /* USER CODE BEGIN RTOS_QUEUES */
 106:Core/Src/freertos.c ****   /* add queues, ... */
 107:Core/Src/freertos.c ****   /* USER CODE END RTOS_QUEUES */
 108:Core/Src/freertos.c **** 
 109:Core/Src/freertos.c ****   /* Create the thread(s) */
 110:Core/Src/freertos.c ****   /* definition and creation of defaultTask */
 111:Core/Src/freertos.c ****   osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 2048);
 112:Core/Src/freertos.c ****   defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 113:Core/Src/freertos.c **** 
 114:Core/Src/freertos.c ****   /* definition and creation of taskLed */
 115:Core/Src/freertos.c ****   osThreadDef(taskLed, StartTask02, osPriorityIdle, 0, 128);
 116:Core/Src/freertos.c ****   taskLedHandle = osThreadCreate(osThread(taskLed), NULL);
 117:Core/Src/freertos.c **** 
 118:Core/Src/freertos.c ****   /* USER CODE BEGIN RTOS_THREADS */
 119:Core/Src/freertos.c ****   /* add threads, ... */
 120:Core/Src/freertos.c ****   /* USER CODE END RTOS_THREADS */
 121:Core/Src/freertos.c **** 
 122:Core/Src/freertos.c **** }
 123:Core/Src/freertos.c **** 
 124:Core/Src/freertos.c **** /* USER CODE BEGIN Header_StartDefaultTask */
 125:Core/Src/freertos.c **** /**
 126:Core/Src/freertos.c ****   * @brief  Function implementing the defaultTask thread.
 127:Core/Src/freertos.c ****   * @param  argument: Not used
 128:Core/Src/freertos.c ****   * @retval None
 129:Core/Src/freertos.c ****   */
 130:Core/Src/freertos.c **** /* USER CODE END Header_StartDefaultTask */
 131:Core/Src/freertos.c **** void StartDefaultTask(void const * argument)
 132:Core/Src/freertos.c **** {
  29              		.loc 1 132 1 view -0
  30              		.cfi_startproc
  31              		@ Volatile: function does not return.
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		.loc 1 132 1 is_stmt 0 view .LVU1
  35 0000 08B5     		push	{r3, lr}
  36              	.LCFI0:
  37              		.cfi_def_cfa_offset 8
  38              		.cfi_offset 3, -8
  39              		.cfi_offset 14, -4
 133:Core/Src/freertos.c ****   /* init code for LWIP */
ARM GAS  C:\usertemp\cccoP0GL.s 			page 4


 134:Core/Src/freertos.c ****   MX_LWIP_Init();
  40              		.loc 1 134 3 is_stmt 1 view .LVU2
  41 0002 FFF7FEFF 		bl	MX_LWIP_Init
  42              	.LVL1:
 135:Core/Src/freertos.c ****   /* USER CODE BEGIN StartDefaultTask */
 136:Core/Src/freertos.c ****   httpd_init();
  43              		.loc 1 136 3 view .LVU3
  44 0006 FFF7FEFF 		bl	httpd_init
  45              	.LVL2:
  46              	.L2:
 137:Core/Src/freertos.c ****   // osThreadTerminate(defaultTaskHandle);
 138:Core/Src/freertos.c ****   /* Infinite loop */
 139:Core/Src/freertos.c ****   for(;;)
  47              		.loc 1 139 3 view .LVU4
 140:Core/Src/freertos.c ****   {
 141:Core/Src/freertos.c ****     osDelay(1);
  48              		.loc 1 141 5 discriminator 1 view .LVU5
  49 000a 0120     		movs	r0, #1
  50 000c FFF7FEFF 		bl	osDelay
  51              	.LVL3:
 139:Core/Src/freertos.c ****   {
  52              		.loc 1 139 3 view .LVU6
  53 0010 FBE7     		b	.L2
  54              		.cfi_endproc
  55              	.LFE366:
  57              		.section	.text.StartTask02,"ax",%progbits
  58              		.align	1
  59              		.global	StartTask02
  60              		.syntax unified
  61              		.thumb
  62              		.thumb_func
  64              	StartTask02:
  65              	.LFB367:
 142:Core/Src/freertos.c ****  
 143:Core/Src/freertos.c ****   }
 144:Core/Src/freertos.c ****   /* USER CODE END StartDefaultTask */
 145:Core/Src/freertos.c **** }
 146:Core/Src/freertos.c **** 
 147:Core/Src/freertos.c **** /* USER CODE BEGIN Header_StartTask02 */
 148:Core/Src/freertos.c **** /**
 149:Core/Src/freertos.c **** * @brief Function implementing the taskLed thread.
 150:Core/Src/freertos.c **** * @param argument: Not used
 151:Core/Src/freertos.c **** * @retval None
 152:Core/Src/freertos.c **** */
 153:Core/Src/freertos.c **** /* USER CODE END Header_StartTask02 */
 154:Core/Src/freertos.c **** void StartTask02(void const * argument)
 155:Core/Src/freertos.c **** {
  66              		.loc 1 155 1 view -0
  67              		.cfi_startproc
  68              		@ Volatile: function does not return.
  69              		@ args = 0, pretend = 0, frame = 0
  70              		@ frame_needed = 0, uses_anonymous_args = 0
  71              	.LVL4:
  72              		.loc 1 155 1 is_stmt 0 view .LVU8
  73 0000 08B5     		push	{r3, lr}
  74              	.LCFI1:
  75              		.cfi_def_cfa_offset 8
ARM GAS  C:\usertemp\cccoP0GL.s 			page 5


  76              		.cfi_offset 3, -8
  77              		.cfi_offset 14, -4
  78              	.LVL5:
  79              	.L5:
 156:Core/Src/freertos.c ****   /* USER CODE BEGIN StartTask02 */
 157:Core/Src/freertos.c ****   /* Infinite loop */
 158:Core/Src/freertos.c ****   for(;;)
  80              		.loc 1 158 3 is_stmt 1 view .LVU9
 159:Core/Src/freertos.c ****   {
 160:Core/Src/freertos.c ****     HAL_GPIO_TogglePin(PG14_GPIO_Port,PG14_Pin);
  81              		.loc 1 160 5 view .LVU10
  82 0002 4FF48041 		mov	r1, #16384
  83 0006 0448     		ldr	r0, .L7
  84 0008 FFF7FEFF 		bl	HAL_GPIO_TogglePin
  85              	.LVL6:
 161:Core/Src/freertos.c ****     osDelay(1000);
  86              		.loc 1 161 5 discriminator 1 view .LVU11
  87 000c 4FF47A70 		mov	r0, #1000
  88 0010 FFF7FEFF 		bl	osDelay
  89              	.LVL7:
 158:Core/Src/freertos.c ****   {
  90              		.loc 1 158 3 view .LVU12
  91 0014 F5E7     		b	.L5
  92              	.L8:
  93 0016 00BF     		.align	2
  94              	.L7:
  95 0018 00180258 		.word	1476532224
  96              		.cfi_endproc
  97              	.LFE367:
  99              		.section	.text.vApplicationGetIdleTaskMemory,"ax",%progbits
 100              		.align	1
 101              		.global	vApplicationGetIdleTaskMemory
 102              		.syntax unified
 103              		.thumb
 104              		.thumb_func
 106              	vApplicationGetIdleTaskMemory:
 107              	.LVL8:
 108              	.LFB364:
  75:Core/Src/freertos.c ****   *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 109              		.loc 1 75 1 view -0
 110              		.cfi_startproc
 111              		@ args = 0, pretend = 0, frame = 0
 112              		@ frame_needed = 0, uses_anonymous_args = 0
 113              		@ link register save eliminated.
  76:Core/Src/freertos.c ****   *ppxIdleTaskStackBuffer = &xIdleStack[0];
 114              		.loc 1 76 3 view .LVU14
  76:Core/Src/freertos.c ****   *ppxIdleTaskStackBuffer = &xIdleStack[0];
 115              		.loc 1 76 25 is_stmt 0 view .LVU15
 116 0000 034B     		ldr	r3, .L10
 117 0002 0360     		str	r3, [r0]
  77:Core/Src/freertos.c ****   *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 118              		.loc 1 77 3 is_stmt 1 view .LVU16
  77:Core/Src/freertos.c ****   *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 119              		.loc 1 77 27 is_stmt 0 view .LVU17
 120 0004 034B     		ldr	r3, .L10+4
 121 0006 0B60     		str	r3, [r1]
  78:Core/Src/freertos.c ****   /* place for user code */
ARM GAS  C:\usertemp\cccoP0GL.s 			page 6


 122              		.loc 1 78 3 is_stmt 1 view .LVU18
  78:Core/Src/freertos.c ****   /* place for user code */
 123              		.loc 1 78 25 is_stmt 0 view .LVU19
 124 0008 8023     		movs	r3, #128
 125 000a 1360     		str	r3, [r2]
  80:Core/Src/freertos.c **** /* USER CODE END GET_IDLE_TASK_MEMORY */
 126              		.loc 1 80 1 view .LVU20
 127 000c 7047     		bx	lr
 128              	.L11:
 129 000e 00BF     		.align	2
 130              	.L10:
 131 0010 00000000 		.word	xIdleTaskTCBBuffer
 132 0014 00000000 		.word	xIdleStack
 133              		.cfi_endproc
 134              	.LFE364:
 136              		.section	.text.MX_FREERTOS_Init,"ax",%progbits
 137              		.align	1
 138              		.global	MX_FREERTOS_Init
 139              		.syntax unified
 140              		.thumb
 141              		.thumb_func
 143              	MX_FREERTOS_Init:
 144              	.LFB365:
  88:Core/Src/freertos.c ****   /* USER CODE BEGIN Init */
 145              		.loc 1 88 29 is_stmt 1 view -0
 146              		.cfi_startproc
 147              		@ args = 0, pretend = 0, frame = 56
 148              		@ frame_needed = 0, uses_anonymous_args = 0
 149 0000 10B5     		push	{r4, lr}
 150              	.LCFI2:
 151              		.cfi_def_cfa_offset 8
 152              		.cfi_offset 4, -8
 153              		.cfi_offset 14, -4
 154 0002 8EB0     		sub	sp, sp, #56
 155              	.LCFI3:
 156              		.cfi_def_cfa_offset 64
 111:Core/Src/freertos.c ****   defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 157              		.loc 1 111 3 view .LVU22
 158 0004 124C     		ldr	r4, .L14
 159 0006 0DF11C0C 		add	ip, sp, #28
 160 000a A646     		mov	lr, r4
 161 000c BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 162 0010 ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 163 0014 9EE80700 		ldm	lr, {r0, r1, r2}
 164 0018 8CE80700 		stm	ip, {r0, r1, r2}
 112:Core/Src/freertos.c **** 
 165              		.loc 1 112 3 view .LVU23
 112:Core/Src/freertos.c **** 
 166              		.loc 1 112 23 is_stmt 0 view .LVU24
 167 001c 0021     		movs	r1, #0
 168 001e 07A8     		add	r0, sp, #28
 169 0020 FFF7FEFF 		bl	osThreadCreate
 170              	.LVL9:
 112:Core/Src/freertos.c **** 
 171              		.loc 1 112 21 discriminator 1 view .LVU25
 172 0024 0B4B     		ldr	r3, .L14+4
 173 0026 1860     		str	r0, [r3]
ARM GAS  C:\usertemp\cccoP0GL.s 			page 7


 115:Core/Src/freertos.c ****   taskLedHandle = osThreadCreate(osThread(taskLed), NULL);
 174              		.loc 1 115 3 is_stmt 1 view .LVU26
 175 0028 EE46     		mov	lr, sp
 176 002a 04F11C0C 		add	ip, r4, #28
 177 002e BCE80F00 		ldmia	ip!, {r0, r1, r2, r3}
 178 0032 AEE80F00 		stmia	lr!, {r0, r1, r2, r3}
 179 0036 9CE80700 		ldm	ip, {r0, r1, r2}
 180 003a 8EE80700 		stm	lr, {r0, r1, r2}
 116:Core/Src/freertos.c **** 
 181              		.loc 1 116 3 view .LVU27
 116:Core/Src/freertos.c **** 
 182              		.loc 1 116 19 is_stmt 0 view .LVU28
 183 003e 0021     		movs	r1, #0
 184 0040 6846     		mov	r0, sp
 185 0042 FFF7FEFF 		bl	osThreadCreate
 186              	.LVL10:
 116:Core/Src/freertos.c **** 
 187              		.loc 1 116 17 discriminator 1 view .LVU29
 188 0046 044B     		ldr	r3, .L14+8
 189 0048 1860     		str	r0, [r3]
 122:Core/Src/freertos.c **** 
 190              		.loc 1 122 1 view .LVU30
 191 004a 0EB0     		add	sp, sp, #56
 192              	.LCFI4:
 193              		.cfi_def_cfa_offset 8
 194              		@ sp needed
 195 004c 10BD     		pop	{r4, pc}
 196              	.L15:
 197 004e 00BF     		.align	2
 198              	.L14:
 199 0050 00000000 		.word	.LANCHOR0
 200 0054 00000000 		.word	defaultTaskHandle
 201 0058 00000000 		.word	taskLedHandle
 202              		.cfi_endproc
 203              	.LFE365:
 205              		.section	.text.HAL_GPIO_EXTI_Callback,"ax",%progbits
 206              		.align	1
 207              		.global	HAL_GPIO_EXTI_Callback
 208              		.syntax unified
 209              		.thumb
 210              		.thumb_func
 212              	HAL_GPIO_EXTI_Callback:
 213              	.LVL11:
 214              	.LFB368:
 162:Core/Src/freertos.c ****   }
 163:Core/Src/freertos.c ****   /* USER CODE END StartTask02 */
 164:Core/Src/freertos.c **** }
 165:Core/Src/freertos.c **** 
 166:Core/Src/freertos.c **** /* Private application code --------------------------------------------------*/
 167:Core/Src/freertos.c **** /* USER CODE BEGIN Application */
 168:Core/Src/freertos.c **** /**
 169:Core/Src/freertos.c ****   * @brief  EXTI line detection callback.
 170:Core/Src/freertos.c ****   * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
 171:Core/Src/freertos.c ****   * @retval None
 172:Core/Src/freertos.c ****   */
 173:Core/Src/freertos.c **** /* NOTE:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: 
 174:Core/Src/freertos.c ****               __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
ARM GAS  C:\usertemp\cccoP0GL.s 			page 8


 175:Core/Src/freertos.c **** This function Should not be modified in the hal_gpio file, when the callback is needed,
 176:Core/Src/freertos.c ****            the HAL_GPIO_EXTI_Callback could be implemented in the user file
 177:Core/Src/freertos.c **** ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::*/
 178:Core/Src/freertos.c **** void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
 179:Core/Src/freertos.c **** {
 215              		.loc 1 179 1 is_stmt 1 view -0
 216              		.cfi_startproc
 217              		@ args = 0, pretend = 0, frame = 0
 218              		@ frame_needed = 0, uses_anonymous_args = 0
 180:Core/Src/freertos.c ****   //GPIO_PIN_12 == ADC Complete interrupt
 181:Core/Src/freertos.c ****   if(GPIO_Pin==GPIO_PIN_12)
 219              		.loc 1 181 3 view .LVU32
 220              		.loc 1 181 5 is_stmt 0 view .LVU33
 221 0000 B0F5805F 		cmp	r0, #4096
 222 0004 00D0     		beq	.L22
 223 0006 7047     		bx	lr
 224              	.L22:
 179:Core/Src/freertos.c ****   //GPIO_PIN_12 == ADC Complete interrupt
 225              		.loc 1 179 1 view .LVU34
 226 0008 08B5     		push	{r3, lr}
 227              	.LCFI5:
 228              		.cfi_def_cfa_offset 8
 229              		.cfi_offset 3, -8
 230              		.cfi_offset 14, -4
 182:Core/Src/freertos.c ****   {
 183:Core/Src/freertos.c ****       test_AD7606();
 231              		.loc 1 183 7 is_stmt 1 view .LVU35
 232 000a FFF7FEFF 		bl	test_AD7606
 233              	.LVL12:
 184:Core/Src/freertos.c ****   }
 185:Core/Src/freertos.c **** 
 186:Core/Src/freertos.c **** }
 234              		.loc 1 186 1 is_stmt 0 view .LVU36
 235 000e 08BD     		pop	{r3, pc}
 236              		.cfi_endproc
 237              	.LFE368:
 239              		.section	.rodata.str1.4,"aMS",%progbits,1
 240              		.align	2
 241              	.LC2:
 242 0000 7461736B 		.ascii	"taskLed\000"
 242      4C656400 
 243              		.align	2
 244              	.LC0:
 245 0008 64656661 		.ascii	"defaultTask\000"
 245      756C7454 
 245      61736B00 
 246              		.section	.bss.xIdleStack,"aw",%nobits
 247              		.align	2
 250              	xIdleStack:
 251 0000 00000000 		.space	512
 251      00000000 
 251      00000000 
 251      00000000 
 251      00000000 
 252              		.section	.bss.xIdleTaskTCBBuffer,"aw",%nobits
 253              		.align	2
 256              	xIdleTaskTCBBuffer:
ARM GAS  C:\usertemp\cccoP0GL.s 			page 9


 257 0000 00000000 		.space	84
 257      00000000 
 257      00000000 
 257      00000000 
 257      00000000 
 258              		.global	taskLedHandle
 259              		.section	.bss.taskLedHandle,"aw",%nobits
 260              		.align	2
 263              	taskLedHandle:
 264 0000 00000000 		.space	4
 265              		.global	defaultTaskHandle
 266              		.section	.bss.defaultTaskHandle,"aw",%nobits
 267              		.align	2
 270              	defaultTaskHandle:
 271 0000 00000000 		.space	4
 272              		.section	.rodata
 273              		.align	2
 274              		.set	.LANCHOR0,. + 0
 275              	.LC4:
 276 0000 08000000 		.word	.LC0
 277 0004 00000000 		.word	StartDefaultTask
 278 0008 0000     		.short	0
 279 000a 0000     		.space	2
 280 000c 00000000 		.word	0
 281 0010 00080000 		.word	2048
 282 0014 00000000 		.word	0
 283 0018 00000000 		.word	0
 284              	.LC5:
 285 001c 00000000 		.word	.LC2
 286 0020 00000000 		.word	StartTask02
 287 0024 FDFF     		.short	-3
 288 0026 0000     		.space	2
 289 0028 00000000 		.word	0
 290 002c 80000000 		.word	128
 291 0030 00000000 		.word	0
 292 0034 00000000 		.word	0
 293              		.text
 294              	.Letext0:
 295              		.file 2 "D:/armtoolchain/arm-gnu-toolchain-13.3.rel1-mingw-w64-i686-arm-none-eabi/arm-none-eabi/in
 296              		.file 3 "D:/armtoolchain/arm-gnu-toolchain-13.3.rel1-mingw-w64-i686-arm-none-eabi/arm-none-eabi/in
 297              		.file 4 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
 298              		.file 5 "Middlewares/Third_Party/FreeRTOS/Source/include/FreeRTOS.h"
 299              		.file 6 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 300              		.file 7 "Drivers/CMSIS/Device/ST/STM32H7xx/Include/stm32h743xx.h"
 301              		.file 8 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.h"
 302              		.file 9 "Core/Inc/ad7606.h"
 303              		.file 10 "Middlewares/Third_Party/LwIP/src/include/lwip/apps/httpd.h"
 304              		.file 11 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_gpio.h"
ARM GAS  C:\usertemp\cccoP0GL.s 			page 10


DEFINED SYMBOLS
                            *ABS*:00000000 freertos.c
C:\usertemp\cccoP0GL.s:20     .text.StartDefaultTask:00000000 $t
C:\usertemp\cccoP0GL.s:26     .text.StartDefaultTask:00000000 StartDefaultTask
C:\usertemp\cccoP0GL.s:58     .text.StartTask02:00000000 $t
C:\usertemp\cccoP0GL.s:64     .text.StartTask02:00000000 StartTask02
C:\usertemp\cccoP0GL.s:95     .text.StartTask02:00000018 $d
C:\usertemp\cccoP0GL.s:100    .text.vApplicationGetIdleTaskMemory:00000000 $t
C:\usertemp\cccoP0GL.s:106    .text.vApplicationGetIdleTaskMemory:00000000 vApplicationGetIdleTaskMemory
C:\usertemp\cccoP0GL.s:131    .text.vApplicationGetIdleTaskMemory:00000010 $d
C:\usertemp\cccoP0GL.s:256    .bss.xIdleTaskTCBBuffer:00000000 xIdleTaskTCBBuffer
C:\usertemp\cccoP0GL.s:250    .bss.xIdleStack:00000000 xIdleStack
C:\usertemp\cccoP0GL.s:137    .text.MX_FREERTOS_Init:00000000 $t
C:\usertemp\cccoP0GL.s:143    .text.MX_FREERTOS_Init:00000000 MX_FREERTOS_Init
C:\usertemp\cccoP0GL.s:199    .text.MX_FREERTOS_Init:00000050 $d
C:\usertemp\cccoP0GL.s:270    .bss.defaultTaskHandle:00000000 defaultTaskHandle
C:\usertemp\cccoP0GL.s:263    .bss.taskLedHandle:00000000 taskLedHandle
C:\usertemp\cccoP0GL.s:206    .text.HAL_GPIO_EXTI_Callback:00000000 $t
C:\usertemp\cccoP0GL.s:212    .text.HAL_GPIO_EXTI_Callback:00000000 HAL_GPIO_EXTI_Callback
C:\usertemp\cccoP0GL.s:240    .rodata.str1.4:00000000 $d
C:\usertemp\cccoP0GL.s:247    .bss.xIdleStack:00000000 $d
C:\usertemp\cccoP0GL.s:253    .bss.xIdleTaskTCBBuffer:00000000 $d
C:\usertemp\cccoP0GL.s:260    .bss.taskLedHandle:00000000 $d
C:\usertemp\cccoP0GL.s:267    .bss.defaultTaskHandle:00000000 $d
C:\usertemp\cccoP0GL.s:273    .rodata:00000000 $d

UNDEFINED SYMBOLS
MX_LWIP_Init
httpd_init
osDelay
HAL_GPIO_TogglePin
osThreadCreate
test_AD7606
