ARM GAS  C:\usertemp\cc0gL4jD.s 			page 1


   1              		.cpu cortex-m7
   2              		.arch armv7e-m
   3              		.fpu fpv5-d16
   4              		.eabi_attribute 28, 1
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.file	"lv_tlsf.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.file 1 "lvgl/src/misc/lv_tlsf.c"
  19              		.section	.text.block_size,"ax",%progbits
  20              		.align	1
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  25              	block_size:
  26              	.LVL0:
  27              	.LFB3:
   1:lvgl/src/misc/lv_tlsf.c **** #include "../lv_conf_internal.h"
   2:lvgl/src/misc/lv_tlsf.c **** #if LV_MEM_CUSTOM == 0
   3:lvgl/src/misc/lv_tlsf.c **** 
   4:lvgl/src/misc/lv_tlsf.c **** #include <limits.h>
   5:lvgl/src/misc/lv_tlsf.c **** #include "lv_tlsf.h"
   6:lvgl/src/misc/lv_tlsf.c **** #include "lv_mem.h"
   7:lvgl/src/misc/lv_tlsf.c **** #include "lv_log.h"
   8:lvgl/src/misc/lv_tlsf.c **** #include "lv_assert.h"
   9:lvgl/src/misc/lv_tlsf.c **** 
  10:lvgl/src/misc/lv_tlsf.c **** #undef  printf
  11:lvgl/src/misc/lv_tlsf.c **** #define printf LV_LOG_ERROR
  12:lvgl/src/misc/lv_tlsf.c **** 
  13:lvgl/src/misc/lv_tlsf.c **** #define TLSF_MAX_POOL_SIZE LV_MEM_SIZE
  14:lvgl/src/misc/lv_tlsf.c **** 
  15:lvgl/src/misc/lv_tlsf.c **** #if !defined(_DEBUG)
  16:lvgl/src/misc/lv_tlsf.c ****     #define _DEBUG 0
  17:lvgl/src/misc/lv_tlsf.c **** #endif
  18:lvgl/src/misc/lv_tlsf.c **** 
  19:lvgl/src/misc/lv_tlsf.c **** #if defined(__cplusplus)
  20:lvgl/src/misc/lv_tlsf.c ****     #define tlsf_decl inline
  21:lvgl/src/misc/lv_tlsf.c **** #else
  22:lvgl/src/misc/lv_tlsf.c ****     #define tlsf_decl static
  23:lvgl/src/misc/lv_tlsf.c **** #endif
  24:lvgl/src/misc/lv_tlsf.c **** 
  25:lvgl/src/misc/lv_tlsf.c **** /*
  26:lvgl/src/misc/lv_tlsf.c **** ** Architecture-specific bit manipulation routines.
  27:lvgl/src/misc/lv_tlsf.c **** **
  28:lvgl/src/misc/lv_tlsf.c **** ** TLSF achieves O(1) cost for malloc and free operations by limiting
  29:lvgl/src/misc/lv_tlsf.c **** ** the search for a free block to a free list of guaranteed size
  30:lvgl/src/misc/lv_tlsf.c **** ** adequate to fulfill the request, combined with efficient free list
  31:lvgl/src/misc/lv_tlsf.c **** ** queries using bitmasks and architecture-specific bit-manipulation
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 2


  32:lvgl/src/misc/lv_tlsf.c **** ** routines.
  33:lvgl/src/misc/lv_tlsf.c **** **
  34:lvgl/src/misc/lv_tlsf.c **** ** Most modern processors provide instructions to count leading zeroes
  35:lvgl/src/misc/lv_tlsf.c **** ** in a word, find the lowest and highest set bit, etc. These
  36:lvgl/src/misc/lv_tlsf.c **** ** specific implementations will be used when available, falling back
  37:lvgl/src/misc/lv_tlsf.c **** ** to a reasonably efficient generic implementation.
  38:lvgl/src/misc/lv_tlsf.c **** **
  39:lvgl/src/misc/lv_tlsf.c **** ** NOTE: TLSF spec relies on ffs/fls returning value 0..31.
  40:lvgl/src/misc/lv_tlsf.c **** ** ffs/fls return 1-32 by default, returning 0 for error.
  41:lvgl/src/misc/lv_tlsf.c **** */
  42:lvgl/src/misc/lv_tlsf.c **** 
  43:lvgl/src/misc/lv_tlsf.c **** /*
  44:lvgl/src/misc/lv_tlsf.c **** ** Detect whether or not we are building for a 32- or 64-bit (LP/LLP)
  45:lvgl/src/misc/lv_tlsf.c **** ** architecture. There is no reliable portable method at compile-time.
  46:lvgl/src/misc/lv_tlsf.c **** */
  47:lvgl/src/misc/lv_tlsf.c **** #if defined (__alpha__) || defined (__ia64__) || defined (__x86_64__) \
  48:lvgl/src/misc/lv_tlsf.c ****     || defined (_WIN64) || defined (__LP64__) || defined (__LLP64__)
  49:lvgl/src/misc/lv_tlsf.c ****     #define TLSF_64BIT
  50:lvgl/src/misc/lv_tlsf.c **** #endif
  51:lvgl/src/misc/lv_tlsf.c **** 
  52:lvgl/src/misc/lv_tlsf.c **** /*
  53:lvgl/src/misc/lv_tlsf.c **** ** Returns one plus the index of the most significant 1-bit of n,
  54:lvgl/src/misc/lv_tlsf.c **** ** or if n is zero, returns zero.
  55:lvgl/src/misc/lv_tlsf.c **** */
  56:lvgl/src/misc/lv_tlsf.c **** #ifdef TLSF_64BIT
  57:lvgl/src/misc/lv_tlsf.c ****     #define TLSF_FLS(n) ((n) & 0xffffffff00000000ull ? 32 + TLSF_FLS32((size_t)(n) >> 32) : TLSF_FL
  58:lvgl/src/misc/lv_tlsf.c **** #else
  59:lvgl/src/misc/lv_tlsf.c ****     #define TLSF_FLS(n) TLSF_FLS32(n)
  60:lvgl/src/misc/lv_tlsf.c **** #endif
  61:lvgl/src/misc/lv_tlsf.c **** 
  62:lvgl/src/misc/lv_tlsf.c **** #define TLSF_FLS32(n) ((n) & 0xffff0000 ? 16 + TLSF_FLS16((n) >> 16) : TLSF_FLS16(n))
  63:lvgl/src/misc/lv_tlsf.c **** #define TLSF_FLS16(n) ((n) & 0xff00     ?  8 + TLSF_FLS8 ((n) >>  8) : TLSF_FLS8 (n))
  64:lvgl/src/misc/lv_tlsf.c **** #define TLSF_FLS8(n)  ((n) & 0xf0       ?  4 + TLSF_FLS4 ((n) >>  4) : TLSF_FLS4 (n))
  65:lvgl/src/misc/lv_tlsf.c **** #define TLSF_FLS4(n)  ((n) & 0xc        ?  2 + TLSF_FLS2 ((n) >>  2) : TLSF_FLS2 (n))
  66:lvgl/src/misc/lv_tlsf.c **** #define TLSF_FLS2(n)  ((n) & 0x2        ?  1 + TLSF_FLS1 ((n) >>  1) : TLSF_FLS1 (n))
  67:lvgl/src/misc/lv_tlsf.c **** #define TLSF_FLS1(n)  ((n) & 0x1        ?  1 : 0)
  68:lvgl/src/misc/lv_tlsf.c **** 
  69:lvgl/src/misc/lv_tlsf.c **** /*
  70:lvgl/src/misc/lv_tlsf.c **** ** Returns round up value of log2(n).
  71:lvgl/src/misc/lv_tlsf.c **** ** Note: it is used at compile time.
  72:lvgl/src/misc/lv_tlsf.c **** */
  73:lvgl/src/misc/lv_tlsf.c **** #define TLSF_LOG2_CEIL(n) ((n) & (n - 1) ? TLSF_FLS(n) : TLSF_FLS(n) - 1)
  74:lvgl/src/misc/lv_tlsf.c **** 
  75:lvgl/src/misc/lv_tlsf.c **** /*
  76:lvgl/src/misc/lv_tlsf.c **** ** gcc 3.4 and above have builtin support, specialized for architecture.
  77:lvgl/src/misc/lv_tlsf.c **** ** Some compilers masquerade as gcc; patchlevel test filters them out.
  78:lvgl/src/misc/lv_tlsf.c **** */
  79:lvgl/src/misc/lv_tlsf.c **** #if defined (__GNUC__) && (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)) \
  80:lvgl/src/misc/lv_tlsf.c ****     && defined (__GNUC_PATCHLEVEL__)
  81:lvgl/src/misc/lv_tlsf.c **** 
  82:lvgl/src/misc/lv_tlsf.c **** #if defined (__SNC__)
  83:lvgl/src/misc/lv_tlsf.c **** /* SNC for Playstation 3. */
  84:lvgl/src/misc/lv_tlsf.c **** 
  85:lvgl/src/misc/lv_tlsf.c **** tlsf_decl int tlsf_ffs(unsigned int word)
  86:lvgl/src/misc/lv_tlsf.c **** {
  87:lvgl/src/misc/lv_tlsf.c ****     const unsigned int reverse = word & (~word + 1);
  88:lvgl/src/misc/lv_tlsf.c ****     const int bit = 32 - __builtin_clz(reverse);
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 3


  89:lvgl/src/misc/lv_tlsf.c ****     return bit - 1;
  90:lvgl/src/misc/lv_tlsf.c **** }
  91:lvgl/src/misc/lv_tlsf.c **** 
  92:lvgl/src/misc/lv_tlsf.c **** #else
  93:lvgl/src/misc/lv_tlsf.c **** 
  94:lvgl/src/misc/lv_tlsf.c **** tlsf_decl int tlsf_ffs(unsigned int word)
  95:lvgl/src/misc/lv_tlsf.c **** {
  96:lvgl/src/misc/lv_tlsf.c ****     return __builtin_ffs(word) - 1;
  97:lvgl/src/misc/lv_tlsf.c **** }
  98:lvgl/src/misc/lv_tlsf.c **** 
  99:lvgl/src/misc/lv_tlsf.c **** #endif
 100:lvgl/src/misc/lv_tlsf.c **** 
 101:lvgl/src/misc/lv_tlsf.c **** tlsf_decl int tlsf_fls(unsigned int word)
 102:lvgl/src/misc/lv_tlsf.c **** {
 103:lvgl/src/misc/lv_tlsf.c ****     const int bit = word ? 32 - __builtin_clz(word) : 0;
 104:lvgl/src/misc/lv_tlsf.c ****     return bit - 1;
 105:lvgl/src/misc/lv_tlsf.c **** }
 106:lvgl/src/misc/lv_tlsf.c **** 
 107:lvgl/src/misc/lv_tlsf.c **** #elif defined (_MSC_VER) && (_MSC_VER >= 1400) && (defined (_M_IX86) || defined (_M_X64))
 108:lvgl/src/misc/lv_tlsf.c **** /* Microsoft Visual C++ support on x86/X64 architectures. */
 109:lvgl/src/misc/lv_tlsf.c **** 
 110:lvgl/src/misc/lv_tlsf.c **** #include <intrin.h>
 111:lvgl/src/misc/lv_tlsf.c **** 
 112:lvgl/src/misc/lv_tlsf.c **** #pragma intrinsic(_BitScanReverse)
 113:lvgl/src/misc/lv_tlsf.c **** #pragma intrinsic(_BitScanForward)
 114:lvgl/src/misc/lv_tlsf.c **** 
 115:lvgl/src/misc/lv_tlsf.c **** tlsf_decl int tlsf_fls(unsigned int word)
 116:lvgl/src/misc/lv_tlsf.c **** {
 117:lvgl/src/misc/lv_tlsf.c ****     unsigned long index;
 118:lvgl/src/misc/lv_tlsf.c ****     return _BitScanReverse(&index, word) ? index : -1;
 119:lvgl/src/misc/lv_tlsf.c **** }
 120:lvgl/src/misc/lv_tlsf.c **** 
 121:lvgl/src/misc/lv_tlsf.c **** tlsf_decl int tlsf_ffs(unsigned int word)
 122:lvgl/src/misc/lv_tlsf.c **** {
 123:lvgl/src/misc/lv_tlsf.c ****     unsigned long index;
 124:lvgl/src/misc/lv_tlsf.c ****     return _BitScanForward(&index, word) ? index : -1;
 125:lvgl/src/misc/lv_tlsf.c **** }
 126:lvgl/src/misc/lv_tlsf.c **** 
 127:lvgl/src/misc/lv_tlsf.c **** #elif defined (_MSC_VER) && defined (_M_PPC)
 128:lvgl/src/misc/lv_tlsf.c **** /* Microsoft Visual C++ support on PowerPC architectures. */
 129:lvgl/src/misc/lv_tlsf.c **** 
 130:lvgl/src/misc/lv_tlsf.c **** #include <ppcintrinsics.h>
 131:lvgl/src/misc/lv_tlsf.c **** 
 132:lvgl/src/misc/lv_tlsf.c **** tlsf_decl int tlsf_fls(unsigned int word)
 133:lvgl/src/misc/lv_tlsf.c **** {
 134:lvgl/src/misc/lv_tlsf.c ****     const int bit = 32 - _CountLeadingZeros(word);
 135:lvgl/src/misc/lv_tlsf.c ****     return bit - 1;
 136:lvgl/src/misc/lv_tlsf.c **** }
 137:lvgl/src/misc/lv_tlsf.c **** 
 138:lvgl/src/misc/lv_tlsf.c **** tlsf_decl int tlsf_ffs(unsigned int word)
 139:lvgl/src/misc/lv_tlsf.c **** {
 140:lvgl/src/misc/lv_tlsf.c ****     const unsigned int reverse = word & (~word + 1);
 141:lvgl/src/misc/lv_tlsf.c ****     const int bit = 32 - _CountLeadingZeros(reverse);
 142:lvgl/src/misc/lv_tlsf.c ****     return bit - 1;
 143:lvgl/src/misc/lv_tlsf.c **** }
 144:lvgl/src/misc/lv_tlsf.c **** 
 145:lvgl/src/misc/lv_tlsf.c **** #elif defined (__ARMCC_VERSION)
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 4


 146:lvgl/src/misc/lv_tlsf.c **** /* RealView Compilation Tools for ARM */
 147:lvgl/src/misc/lv_tlsf.c **** 
 148:lvgl/src/misc/lv_tlsf.c **** tlsf_decl int tlsf_ffs(unsigned int word)
 149:lvgl/src/misc/lv_tlsf.c **** {
 150:lvgl/src/misc/lv_tlsf.c ****     const unsigned int reverse = word & (~word + 1);
 151:lvgl/src/misc/lv_tlsf.c ****     const int bit = 32 - __clz(reverse);
 152:lvgl/src/misc/lv_tlsf.c ****     return bit - 1;
 153:lvgl/src/misc/lv_tlsf.c **** }
 154:lvgl/src/misc/lv_tlsf.c **** 
 155:lvgl/src/misc/lv_tlsf.c **** tlsf_decl int tlsf_fls(unsigned int word)
 156:lvgl/src/misc/lv_tlsf.c **** {
 157:lvgl/src/misc/lv_tlsf.c ****     const int bit = word ? 32 - __clz(word) : 0;
 158:lvgl/src/misc/lv_tlsf.c ****     return bit - 1;
 159:lvgl/src/misc/lv_tlsf.c **** }
 160:lvgl/src/misc/lv_tlsf.c **** 
 161:lvgl/src/misc/lv_tlsf.c **** #elif defined (__ghs__)
 162:lvgl/src/misc/lv_tlsf.c **** /* Green Hills support for PowerPC */
 163:lvgl/src/misc/lv_tlsf.c **** 
 164:lvgl/src/misc/lv_tlsf.c **** #include <ppc_ghs.h>
 165:lvgl/src/misc/lv_tlsf.c **** 
 166:lvgl/src/misc/lv_tlsf.c **** tlsf_decl int tlsf_ffs(unsigned int word)
 167:lvgl/src/misc/lv_tlsf.c **** {
 168:lvgl/src/misc/lv_tlsf.c ****     const unsigned int reverse = word & (~word + 1);
 169:lvgl/src/misc/lv_tlsf.c ****     const int bit = 32 - __CLZ32(reverse);
 170:lvgl/src/misc/lv_tlsf.c ****     return bit - 1;
 171:lvgl/src/misc/lv_tlsf.c **** }
 172:lvgl/src/misc/lv_tlsf.c **** 
 173:lvgl/src/misc/lv_tlsf.c **** tlsf_decl int tlsf_fls(unsigned int word)
 174:lvgl/src/misc/lv_tlsf.c **** {
 175:lvgl/src/misc/lv_tlsf.c ****     const int bit = word ? 32 - __CLZ32(word) : 0;
 176:lvgl/src/misc/lv_tlsf.c ****     return bit - 1;
 177:lvgl/src/misc/lv_tlsf.c **** }
 178:lvgl/src/misc/lv_tlsf.c **** 
 179:lvgl/src/misc/lv_tlsf.c **** #else
 180:lvgl/src/misc/lv_tlsf.c **** /* Fall back to generic implementation. */
 181:lvgl/src/misc/lv_tlsf.c **** 
 182:lvgl/src/misc/lv_tlsf.c **** /* Implement ffs in terms of fls. */
 183:lvgl/src/misc/lv_tlsf.c **** tlsf_decl int tlsf_ffs(unsigned int word)
 184:lvgl/src/misc/lv_tlsf.c **** {
 185:lvgl/src/misc/lv_tlsf.c ****     const unsigned int reverse = word & (~word + 1);
 186:lvgl/src/misc/lv_tlsf.c ****     return TLSF_FLS32(reverse) - 1;
 187:lvgl/src/misc/lv_tlsf.c **** }
 188:lvgl/src/misc/lv_tlsf.c **** 
 189:lvgl/src/misc/lv_tlsf.c **** tlsf_decl int tlsf_fls(unsigned int word)
 190:lvgl/src/misc/lv_tlsf.c **** {
 191:lvgl/src/misc/lv_tlsf.c ****     return TLSF_FLS32(word) - 1;
 192:lvgl/src/misc/lv_tlsf.c **** }
 193:lvgl/src/misc/lv_tlsf.c **** 
 194:lvgl/src/misc/lv_tlsf.c **** #endif
 195:lvgl/src/misc/lv_tlsf.c **** 
 196:lvgl/src/misc/lv_tlsf.c **** /* Possibly 64-bit version of tlsf_fls. */
 197:lvgl/src/misc/lv_tlsf.c **** #if defined (TLSF_64BIT)
 198:lvgl/src/misc/lv_tlsf.c **** tlsf_decl int tlsf_fls_sizet(size_t size)
 199:lvgl/src/misc/lv_tlsf.c **** {
 200:lvgl/src/misc/lv_tlsf.c ****     int high = (int)(size >> 32);
 201:lvgl/src/misc/lv_tlsf.c ****     int bits = 0;
 202:lvgl/src/misc/lv_tlsf.c ****     if(high) {
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 5


 203:lvgl/src/misc/lv_tlsf.c ****         bits = 32 + tlsf_fls(high);
 204:lvgl/src/misc/lv_tlsf.c ****     }
 205:lvgl/src/misc/lv_tlsf.c ****     else {
 206:lvgl/src/misc/lv_tlsf.c ****         bits = tlsf_fls((int)size & 0xffffffff);
 207:lvgl/src/misc/lv_tlsf.c **** 
 208:lvgl/src/misc/lv_tlsf.c ****     }
 209:lvgl/src/misc/lv_tlsf.c ****     return bits;
 210:lvgl/src/misc/lv_tlsf.c **** }
 211:lvgl/src/misc/lv_tlsf.c **** #else
 212:lvgl/src/misc/lv_tlsf.c **** #define tlsf_fls_sizet tlsf_fls
 213:lvgl/src/misc/lv_tlsf.c **** #endif
 214:lvgl/src/misc/lv_tlsf.c **** 
 215:lvgl/src/misc/lv_tlsf.c **** #undef tlsf_decl
 216:lvgl/src/misc/lv_tlsf.c **** 
 217:lvgl/src/misc/lv_tlsf.c **** /*
 218:lvgl/src/misc/lv_tlsf.c **** ** Constants.
 219:lvgl/src/misc/lv_tlsf.c **** */
 220:lvgl/src/misc/lv_tlsf.c **** 
 221:lvgl/src/misc/lv_tlsf.c **** /* Public constants: may be modified. */
 222:lvgl/src/misc/lv_tlsf.c **** enum tlsf_public {
 223:lvgl/src/misc/lv_tlsf.c ****     /* log2 of number of linear subdivisions of block sizes. Larger
 224:lvgl/src/misc/lv_tlsf.c ****     ** values require more memory in the control structure. Values of
 225:lvgl/src/misc/lv_tlsf.c ****     ** 4 or 5 are typical.
 226:lvgl/src/misc/lv_tlsf.c ****     */
 227:lvgl/src/misc/lv_tlsf.c ****     SL_INDEX_COUNT_LOG2 = 5,
 228:lvgl/src/misc/lv_tlsf.c **** };
 229:lvgl/src/misc/lv_tlsf.c **** 
 230:lvgl/src/misc/lv_tlsf.c **** /* Private constants: do not modify. */
 231:lvgl/src/misc/lv_tlsf.c **** enum tlsf_private {
 232:lvgl/src/misc/lv_tlsf.c **** #if defined (TLSF_64BIT)
 233:lvgl/src/misc/lv_tlsf.c ****     /* All allocation sizes and addresses are aligned to 8 bytes. */
 234:lvgl/src/misc/lv_tlsf.c ****     ALIGN_SIZE_LOG2 = 3,
 235:lvgl/src/misc/lv_tlsf.c **** #else
 236:lvgl/src/misc/lv_tlsf.c ****     /* All allocation sizes and addresses are aligned to 4 bytes. */
 237:lvgl/src/misc/lv_tlsf.c ****     ALIGN_SIZE_LOG2 = 2,
 238:lvgl/src/misc/lv_tlsf.c **** #endif
 239:lvgl/src/misc/lv_tlsf.c ****     ALIGN_SIZE = (1 << ALIGN_SIZE_LOG2),
 240:lvgl/src/misc/lv_tlsf.c **** 
 241:lvgl/src/misc/lv_tlsf.c ****     /*
 242:lvgl/src/misc/lv_tlsf.c ****     ** We support allocations of sizes up to (1 << FL_INDEX_MAX) bits.
 243:lvgl/src/misc/lv_tlsf.c ****     ** However, because we linearly subdivide the second-level lists, and
 244:lvgl/src/misc/lv_tlsf.c ****     ** our minimum size granularity is 4 bytes, it doesn't make sense to
 245:lvgl/src/misc/lv_tlsf.c ****     ** create first-level lists for sizes smaller than SL_INDEX_COUNT * 4,
 246:lvgl/src/misc/lv_tlsf.c ****     ** or (1 << (SL_INDEX_COUNT_LOG2 + 2)) bytes, as there we will be
 247:lvgl/src/misc/lv_tlsf.c ****     ** trying to split size ranges into more slots than we have available.
 248:lvgl/src/misc/lv_tlsf.c ****     ** Instead, we calculate the minimum threshold size, and place all
 249:lvgl/src/misc/lv_tlsf.c ****     ** blocks below that size into the 0th first-level list.
 250:lvgl/src/misc/lv_tlsf.c ****     */
 251:lvgl/src/misc/lv_tlsf.c **** 
 252:lvgl/src/misc/lv_tlsf.c **** #if defined (TLSF_MAX_POOL_SIZE)
 253:lvgl/src/misc/lv_tlsf.c ****     FL_INDEX_MAX = TLSF_LOG2_CEIL(TLSF_MAX_POOL_SIZE),
 254:lvgl/src/misc/lv_tlsf.c **** #elif defined (TLSF_64BIT)
 255:lvgl/src/misc/lv_tlsf.c ****     /*
 256:lvgl/src/misc/lv_tlsf.c ****     ** TODO: We can increase this to support larger sizes, at the expense
 257:lvgl/src/misc/lv_tlsf.c ****     ** of more overhead in the TLSF structure.
 258:lvgl/src/misc/lv_tlsf.c ****     */
 259:lvgl/src/misc/lv_tlsf.c ****     FL_INDEX_MAX = 32,
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 6


 260:lvgl/src/misc/lv_tlsf.c **** #else
 261:lvgl/src/misc/lv_tlsf.c ****     FL_INDEX_MAX = 30,
 262:lvgl/src/misc/lv_tlsf.c **** #endif
 263:lvgl/src/misc/lv_tlsf.c ****     SL_INDEX_COUNT = (1 << SL_INDEX_COUNT_LOG2),
 264:lvgl/src/misc/lv_tlsf.c ****     FL_INDEX_SHIFT = (SL_INDEX_COUNT_LOG2 + ALIGN_SIZE_LOG2),
 265:lvgl/src/misc/lv_tlsf.c ****     FL_INDEX_COUNT = (FL_INDEX_MAX - FL_INDEX_SHIFT + 1),
 266:lvgl/src/misc/lv_tlsf.c **** 
 267:lvgl/src/misc/lv_tlsf.c ****     SMALL_BLOCK_SIZE = (1 << FL_INDEX_SHIFT),
 268:lvgl/src/misc/lv_tlsf.c **** };
 269:lvgl/src/misc/lv_tlsf.c **** 
 270:lvgl/src/misc/lv_tlsf.c **** /*
 271:lvgl/src/misc/lv_tlsf.c **** ** Cast and min/max macros.
 272:lvgl/src/misc/lv_tlsf.c **** */
 273:lvgl/src/misc/lv_tlsf.c **** 
 274:lvgl/src/misc/lv_tlsf.c **** #define tlsf_cast(t, exp)   ((t) (exp))
 275:lvgl/src/misc/lv_tlsf.c **** #define tlsf_min(a, b)      ((a) < (b) ? (a) : (b))
 276:lvgl/src/misc/lv_tlsf.c **** #define tlsf_max(a, b)      ((a) > (b) ? (a) : (b))
 277:lvgl/src/misc/lv_tlsf.c **** 
 278:lvgl/src/misc/lv_tlsf.c **** /*
 279:lvgl/src/misc/lv_tlsf.c **** ** Set assert macro, if it has not been provided by the user.
 280:lvgl/src/misc/lv_tlsf.c **** */
 281:lvgl/src/misc/lv_tlsf.c **** #define tlsf_assert LV_ASSERT
 282:lvgl/src/misc/lv_tlsf.c **** 
 283:lvgl/src/misc/lv_tlsf.c **** #if !defined (tlsf_assert)
 284:lvgl/src/misc/lv_tlsf.c ****     #define tlsf_assert assert
 285:lvgl/src/misc/lv_tlsf.c **** #endif
 286:lvgl/src/misc/lv_tlsf.c **** 
 287:lvgl/src/misc/lv_tlsf.c **** /*
 288:lvgl/src/misc/lv_tlsf.c **** ** Static assertion mechanism.
 289:lvgl/src/misc/lv_tlsf.c **** */
 290:lvgl/src/misc/lv_tlsf.c **** 
 291:lvgl/src/misc/lv_tlsf.c **** #define _tlsf_glue2(x, y) x ## y
 292:lvgl/src/misc/lv_tlsf.c **** #define _tlsf_glue(x, y) _tlsf_glue2(x, y)
 293:lvgl/src/misc/lv_tlsf.c **** #define tlsf_static_assert(exp) \
 294:lvgl/src/misc/lv_tlsf.c ****     typedef char _tlsf_glue(static_assert, __LINE__) [(exp) ? 1 : -1]
 295:lvgl/src/misc/lv_tlsf.c **** 
 296:lvgl/src/misc/lv_tlsf.c **** /* This code has been tested on 32- and 64-bit (LP/LLP) architectures. */
 297:lvgl/src/misc/lv_tlsf.c **** tlsf_static_assert(sizeof(int) * CHAR_BIT == 32);
 298:lvgl/src/misc/lv_tlsf.c **** tlsf_static_assert(sizeof(size_t) * CHAR_BIT >= 32);
 299:lvgl/src/misc/lv_tlsf.c **** tlsf_static_assert(sizeof(size_t) * CHAR_BIT <= 64);
 300:lvgl/src/misc/lv_tlsf.c **** 
 301:lvgl/src/misc/lv_tlsf.c **** /* SL_INDEX_COUNT must be <= number of bits in sl_bitmap's storage type. */
 302:lvgl/src/misc/lv_tlsf.c **** tlsf_static_assert(sizeof(unsigned int) * CHAR_BIT >= SL_INDEX_COUNT);
 303:lvgl/src/misc/lv_tlsf.c **** 
 304:lvgl/src/misc/lv_tlsf.c **** /* Ensure we've properly tuned our sizes. */
 305:lvgl/src/misc/lv_tlsf.c **** tlsf_static_assert(ALIGN_SIZE == SMALL_BLOCK_SIZE / SL_INDEX_COUNT);
 306:lvgl/src/misc/lv_tlsf.c **** 
 307:lvgl/src/misc/lv_tlsf.c **** /*
 308:lvgl/src/misc/lv_tlsf.c **** ** Data structures and associated constants.
 309:lvgl/src/misc/lv_tlsf.c **** */
 310:lvgl/src/misc/lv_tlsf.c **** 
 311:lvgl/src/misc/lv_tlsf.c **** /*
 312:lvgl/src/misc/lv_tlsf.c **** ** Block header structure.
 313:lvgl/src/misc/lv_tlsf.c **** **
 314:lvgl/src/misc/lv_tlsf.c **** ** There are several implementation subtleties involved:
 315:lvgl/src/misc/lv_tlsf.c **** ** - The prev_phys_block field is only valid if the previous block is free.
 316:lvgl/src/misc/lv_tlsf.c **** ** - The prev_phys_block field is actually stored at the end of the
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 7


 317:lvgl/src/misc/lv_tlsf.c **** **   previous block. It appears at the beginning of this structure only to
 318:lvgl/src/misc/lv_tlsf.c **** **   simplify the implementation.
 319:lvgl/src/misc/lv_tlsf.c **** ** - The next_free / prev_free fields are only valid if the block is free.
 320:lvgl/src/misc/lv_tlsf.c **** */
 321:lvgl/src/misc/lv_tlsf.c **** typedef struct block_header_t {
 322:lvgl/src/misc/lv_tlsf.c ****     /* Points to the previous physical block. */
 323:lvgl/src/misc/lv_tlsf.c ****     struct block_header_t * prev_phys_block;
 324:lvgl/src/misc/lv_tlsf.c **** 
 325:lvgl/src/misc/lv_tlsf.c ****     /* The size of this block, excluding the block header. */
 326:lvgl/src/misc/lv_tlsf.c ****     size_t size;
 327:lvgl/src/misc/lv_tlsf.c **** 
 328:lvgl/src/misc/lv_tlsf.c ****     /* Next and previous free blocks. */
 329:lvgl/src/misc/lv_tlsf.c ****     struct block_header_t * next_free;
 330:lvgl/src/misc/lv_tlsf.c ****     struct block_header_t * prev_free;
 331:lvgl/src/misc/lv_tlsf.c **** } block_header_t;
 332:lvgl/src/misc/lv_tlsf.c **** 
 333:lvgl/src/misc/lv_tlsf.c **** /*
 334:lvgl/src/misc/lv_tlsf.c **** ** Since block sizes are always at least a multiple of 4, the two least
 335:lvgl/src/misc/lv_tlsf.c **** ** significant bits of the size field are used to store the block status:
 336:lvgl/src/misc/lv_tlsf.c **** ** - bit 0: whether block is busy or free
 337:lvgl/src/misc/lv_tlsf.c **** ** - bit 1: whether previous block is busy or free
 338:lvgl/src/misc/lv_tlsf.c **** */
 339:lvgl/src/misc/lv_tlsf.c **** static const size_t block_header_free_bit = 1 << 0;
 340:lvgl/src/misc/lv_tlsf.c **** static const size_t block_header_prev_free_bit = 1 << 1;
 341:lvgl/src/misc/lv_tlsf.c **** 
 342:lvgl/src/misc/lv_tlsf.c **** /*
 343:lvgl/src/misc/lv_tlsf.c **** ** The size of the block header exposed to used blocks is the size field.
 344:lvgl/src/misc/lv_tlsf.c **** ** The prev_phys_block field is stored *inside* the previous free block.
 345:lvgl/src/misc/lv_tlsf.c **** */
 346:lvgl/src/misc/lv_tlsf.c **** static const size_t block_header_overhead = sizeof(size_t);
 347:lvgl/src/misc/lv_tlsf.c **** 
 348:lvgl/src/misc/lv_tlsf.c **** /* User data starts directly after the size field in a used block. */
 349:lvgl/src/misc/lv_tlsf.c **** static const size_t block_start_offset =
 350:lvgl/src/misc/lv_tlsf.c ****     offsetof(block_header_t, size) + sizeof(size_t);
 351:lvgl/src/misc/lv_tlsf.c **** 
 352:lvgl/src/misc/lv_tlsf.c **** /*
 353:lvgl/src/misc/lv_tlsf.c **** ** A free block must be large enough to store its header minus the size of
 354:lvgl/src/misc/lv_tlsf.c **** ** the prev_phys_block field, and no larger than the number of addressable
 355:lvgl/src/misc/lv_tlsf.c **** ** bits for FL_INDEX.
 356:lvgl/src/misc/lv_tlsf.c **** */
 357:lvgl/src/misc/lv_tlsf.c **** static const size_t block_size_min =
 358:lvgl/src/misc/lv_tlsf.c ****     sizeof(block_header_t) - sizeof(block_header_t *);
 359:lvgl/src/misc/lv_tlsf.c **** static const size_t block_size_max = tlsf_cast(size_t, 1) << FL_INDEX_MAX;
 360:lvgl/src/misc/lv_tlsf.c **** 
 361:lvgl/src/misc/lv_tlsf.c **** 
 362:lvgl/src/misc/lv_tlsf.c **** /* The TLSF control structure. */
 363:lvgl/src/misc/lv_tlsf.c **** typedef struct control_t {
 364:lvgl/src/misc/lv_tlsf.c ****     /* Empty lists point at this block to indicate they are free. */
 365:lvgl/src/misc/lv_tlsf.c ****     block_header_t block_null;
 366:lvgl/src/misc/lv_tlsf.c **** 
 367:lvgl/src/misc/lv_tlsf.c ****     /* Bitmaps for free lists. */
 368:lvgl/src/misc/lv_tlsf.c ****     unsigned int fl_bitmap;
 369:lvgl/src/misc/lv_tlsf.c ****     unsigned int sl_bitmap[FL_INDEX_COUNT];
 370:lvgl/src/misc/lv_tlsf.c **** 
 371:lvgl/src/misc/lv_tlsf.c ****     /* Head of free lists. */
 372:lvgl/src/misc/lv_tlsf.c ****     block_header_t * blocks[FL_INDEX_COUNT][SL_INDEX_COUNT];
 373:lvgl/src/misc/lv_tlsf.c **** } control_t;
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 8


 374:lvgl/src/misc/lv_tlsf.c **** 
 375:lvgl/src/misc/lv_tlsf.c **** /* A type used for casting when doing pointer arithmetic. */
 376:lvgl/src/misc/lv_tlsf.c **** typedef ptrdiff_t tlsfptr_t;
 377:lvgl/src/misc/lv_tlsf.c **** 
 378:lvgl/src/misc/lv_tlsf.c **** /*
 379:lvgl/src/misc/lv_tlsf.c **** ** block_header_t member functions.
 380:lvgl/src/misc/lv_tlsf.c **** */
 381:lvgl/src/misc/lv_tlsf.c **** 
 382:lvgl/src/misc/lv_tlsf.c **** static size_t block_size(const block_header_t * block)
 383:lvgl/src/misc/lv_tlsf.c **** {
  28              		.loc 1 383 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
 384:lvgl/src/misc/lv_tlsf.c ****     return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
  33              		.loc 1 384 5 view .LVU1
  34              		.loc 1 384 17 is_stmt 0 view .LVU2
  35 0000 4068     		ldr	r0, [r0, #4]
  36              	.LVL1:
 385:lvgl/src/misc/lv_tlsf.c **** }
  37              		.loc 1 385 1 view .LVU3
  38 0002 20F00300 		bic	r0, r0, #3
  39 0006 7047     		bx	lr
  40              		.cfi_endproc
  41              	.LFE3:
  43              		.section	.text.block_set_size,"ax",%progbits
  44              		.align	1
  45              		.syntax unified
  46              		.thumb
  47              		.thumb_func
  49              	block_set_size:
  50              	.LVL2:
  51              	.LFB4:
 386:lvgl/src/misc/lv_tlsf.c **** 
 387:lvgl/src/misc/lv_tlsf.c **** static void block_set_size(block_header_t * block, size_t size)
 388:lvgl/src/misc/lv_tlsf.c **** {
  52              		.loc 1 388 1 is_stmt 1 view -0
  53              		.cfi_startproc
  54              		@ args = 0, pretend = 0, frame = 0
  55              		@ frame_needed = 0, uses_anonymous_args = 0
  56              		@ link register save eliminated.
 389:lvgl/src/misc/lv_tlsf.c ****     const size_t oldsize = block->size;
  57              		.loc 1 389 5 view .LVU5
  58              		.loc 1 389 18 is_stmt 0 view .LVU6
  59 0000 4368     		ldr	r3, [r0, #4]
  60              	.LVL3:
 390:lvgl/src/misc/lv_tlsf.c ****     block->size = size | (oldsize & (block_header_free_bit | block_header_prev_free_bit));
  61              		.loc 1 390 5 is_stmt 1 view .LVU7
  62              		.loc 1 390 35 is_stmt 0 view .LVU8
  63 0002 03F00303 		and	r3, r3, #3
  64              	.LVL4:
  65              		.loc 1 390 24 view .LVU9
  66 0006 0B43     		orrs	r3, r3, r1
  67              		.loc 1 390 17 view .LVU10
  68 0008 4360     		str	r3, [r0, #4]
  69              	.LVL5:
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 9


 391:lvgl/src/misc/lv_tlsf.c **** }
  70              		.loc 1 391 1 view .LVU11
  71 000a 7047     		bx	lr
  72              		.cfi_endproc
  73              	.LFE4:
  75              		.section	.text.block_is_last,"ax",%progbits
  76              		.align	1
  77              		.syntax unified
  78              		.thumb
  79              		.thumb_func
  81              	block_is_last:
  82              	.LVL6:
  83              	.LFB5:
 392:lvgl/src/misc/lv_tlsf.c **** 
 393:lvgl/src/misc/lv_tlsf.c **** static int block_is_last(const block_header_t * block)
 394:lvgl/src/misc/lv_tlsf.c **** {
  84              		.loc 1 394 1 is_stmt 1 view -0
  85              		.cfi_startproc
  86              		@ args = 0, pretend = 0, frame = 0
  87              		@ frame_needed = 0, uses_anonymous_args = 0
  88              		.loc 1 394 1 is_stmt 0 view .LVU13
  89 0000 08B5     		push	{r3, lr}
  90              	.LCFI0:
  91              		.cfi_def_cfa_offset 8
  92              		.cfi_offset 3, -8
  93              		.cfi_offset 14, -4
 395:lvgl/src/misc/lv_tlsf.c ****     return block_size(block) == 0;
  94              		.loc 1 395 5 is_stmt 1 view .LVU14
  95              		.loc 1 395 12 is_stmt 0 view .LVU15
  96 0002 FFF7FEFF 		bl	block_size
  97              	.LVL7:
 396:lvgl/src/misc/lv_tlsf.c **** }
  98              		.loc 1 396 1 view .LVU16
  99 0006 B0FA80F0 		clz	r0, r0
 100 000a 4009     		lsrs	r0, r0, #5
 101 000c 08BD     		pop	{r3, pc}
 102              		.cfi_endproc
 103              	.LFE5:
 105              		.section	.text.block_is_free,"ax",%progbits
 106              		.align	1
 107              		.syntax unified
 108              		.thumb
 109              		.thumb_func
 111              	block_is_free:
 112              	.LVL8:
 113              	.LFB6:
 397:lvgl/src/misc/lv_tlsf.c **** 
 398:lvgl/src/misc/lv_tlsf.c **** static int block_is_free(const block_header_t * block)
 399:lvgl/src/misc/lv_tlsf.c **** {
 114              		.loc 1 399 1 is_stmt 1 view -0
 115              		.cfi_startproc
 116              		@ args = 0, pretend = 0, frame = 0
 117              		@ frame_needed = 0, uses_anonymous_args = 0
 118              		@ link register save eliminated.
 400:lvgl/src/misc/lv_tlsf.c ****     return tlsf_cast(int, block->size & block_header_free_bit);
 119              		.loc 1 400 5 view .LVU18
 120              		.loc 1 400 12 is_stmt 0 view .LVU19
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 10


 121 0000 4068     		ldr	r0, [r0, #4]
 122              	.LVL9:
 401:lvgl/src/misc/lv_tlsf.c **** }
 123              		.loc 1 401 1 view .LVU20
 124 0002 00F00100 		and	r0, r0, #1
 125 0006 7047     		bx	lr
 126              		.cfi_endproc
 127              	.LFE6:
 129              		.section	.text.block_set_free,"ax",%progbits
 130              		.align	1
 131              		.syntax unified
 132              		.thumb
 133              		.thumb_func
 135              	block_set_free:
 136              	.LVL10:
 137              	.LFB7:
 402:lvgl/src/misc/lv_tlsf.c **** 
 403:lvgl/src/misc/lv_tlsf.c **** static void block_set_free(block_header_t * block)
 404:lvgl/src/misc/lv_tlsf.c **** {
 138              		.loc 1 404 1 is_stmt 1 view -0
 139              		.cfi_startproc
 140              		@ args = 0, pretend = 0, frame = 0
 141              		@ frame_needed = 0, uses_anonymous_args = 0
 142              		@ link register save eliminated.
 405:lvgl/src/misc/lv_tlsf.c ****     block->size |= block_header_free_bit;
 143              		.loc 1 405 5 view .LVU22
 144              		.loc 1 405 10 is_stmt 0 view .LVU23
 145 0000 4368     		ldr	r3, [r0, #4]
 146              		.loc 1 405 17 view .LVU24
 147 0002 43F00103 		orr	r3, r3, #1
 148 0006 4360     		str	r3, [r0, #4]
 406:lvgl/src/misc/lv_tlsf.c **** }
 149              		.loc 1 406 1 view .LVU25
 150 0008 7047     		bx	lr
 151              		.cfi_endproc
 152              	.LFE7:
 154              		.section	.text.block_set_used,"ax",%progbits
 155              		.align	1
 156              		.syntax unified
 157              		.thumb
 158              		.thumb_func
 160              	block_set_used:
 161              	.LVL11:
 162              	.LFB8:
 407:lvgl/src/misc/lv_tlsf.c **** 
 408:lvgl/src/misc/lv_tlsf.c **** static void block_set_used(block_header_t * block)
 409:lvgl/src/misc/lv_tlsf.c **** {
 163              		.loc 1 409 1 is_stmt 1 view -0
 164              		.cfi_startproc
 165              		@ args = 0, pretend = 0, frame = 0
 166              		@ frame_needed = 0, uses_anonymous_args = 0
 167              		@ link register save eliminated.
 410:lvgl/src/misc/lv_tlsf.c ****     block->size &= ~block_header_free_bit;
 168              		.loc 1 410 5 view .LVU27
 169              		.loc 1 410 10 is_stmt 0 view .LVU28
 170 0000 4368     		ldr	r3, [r0, #4]
 171              		.loc 1 410 17 view .LVU29
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 11


 172 0002 23F00103 		bic	r3, r3, #1
 173 0006 4360     		str	r3, [r0, #4]
 411:lvgl/src/misc/lv_tlsf.c **** }
 174              		.loc 1 411 1 view .LVU30
 175 0008 7047     		bx	lr
 176              		.cfi_endproc
 177              	.LFE8:
 179              		.section	.text.block_is_prev_free,"ax",%progbits
 180              		.align	1
 181              		.syntax unified
 182              		.thumb
 183              		.thumb_func
 185              	block_is_prev_free:
 186              	.LVL12:
 187              	.LFB9:
 412:lvgl/src/misc/lv_tlsf.c **** 
 413:lvgl/src/misc/lv_tlsf.c **** static int block_is_prev_free(const block_header_t * block)
 414:lvgl/src/misc/lv_tlsf.c **** {
 188              		.loc 1 414 1 is_stmt 1 view -0
 189              		.cfi_startproc
 190              		@ args = 0, pretend = 0, frame = 0
 191              		@ frame_needed = 0, uses_anonymous_args = 0
 192              		@ link register save eliminated.
 415:lvgl/src/misc/lv_tlsf.c ****     return tlsf_cast(int, block->size & block_header_prev_free_bit);
 193              		.loc 1 415 5 view .LVU32
 194              		.loc 1 415 12 is_stmt 0 view .LVU33
 195 0000 4068     		ldr	r0, [r0, #4]
 196              	.LVL13:
 416:lvgl/src/misc/lv_tlsf.c **** }
 197              		.loc 1 416 1 view .LVU34
 198 0002 00F00200 		and	r0, r0, #2
 199 0006 7047     		bx	lr
 200              		.cfi_endproc
 201              	.LFE9:
 203              		.section	.text.block_set_prev_free,"ax",%progbits
 204              		.align	1
 205              		.syntax unified
 206              		.thumb
 207              		.thumb_func
 209              	block_set_prev_free:
 210              	.LVL14:
 211              	.LFB10:
 417:lvgl/src/misc/lv_tlsf.c **** 
 418:lvgl/src/misc/lv_tlsf.c **** static void block_set_prev_free(block_header_t * block)
 419:lvgl/src/misc/lv_tlsf.c **** {
 212              		.loc 1 419 1 is_stmt 1 view -0
 213              		.cfi_startproc
 214              		@ args = 0, pretend = 0, frame = 0
 215              		@ frame_needed = 0, uses_anonymous_args = 0
 216              		@ link register save eliminated.
 420:lvgl/src/misc/lv_tlsf.c ****     block->size |= block_header_prev_free_bit;
 217              		.loc 1 420 5 view .LVU36
 218              		.loc 1 420 10 is_stmt 0 view .LVU37
 219 0000 4368     		ldr	r3, [r0, #4]
 220              		.loc 1 420 17 view .LVU38
 221 0002 43F00203 		orr	r3, r3, #2
 222 0006 4360     		str	r3, [r0, #4]
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 12


 421:lvgl/src/misc/lv_tlsf.c **** }
 223              		.loc 1 421 1 view .LVU39
 224 0008 7047     		bx	lr
 225              		.cfi_endproc
 226              	.LFE10:
 228              		.section	.text.block_set_prev_used,"ax",%progbits
 229              		.align	1
 230              		.syntax unified
 231              		.thumb
 232              		.thumb_func
 234              	block_set_prev_used:
 235              	.LVL15:
 236              	.LFB11:
 422:lvgl/src/misc/lv_tlsf.c **** 
 423:lvgl/src/misc/lv_tlsf.c **** static void block_set_prev_used(block_header_t * block)
 424:lvgl/src/misc/lv_tlsf.c **** {
 237              		.loc 1 424 1 is_stmt 1 view -0
 238              		.cfi_startproc
 239              		@ args = 0, pretend = 0, frame = 0
 240              		@ frame_needed = 0, uses_anonymous_args = 0
 241              		@ link register save eliminated.
 425:lvgl/src/misc/lv_tlsf.c ****     block->size &= ~block_header_prev_free_bit;
 242              		.loc 1 425 5 view .LVU41
 243              		.loc 1 425 10 is_stmt 0 view .LVU42
 244 0000 4368     		ldr	r3, [r0, #4]
 245              		.loc 1 425 17 view .LVU43
 246 0002 23F00203 		bic	r3, r3, #2
 247 0006 4360     		str	r3, [r0, #4]
 426:lvgl/src/misc/lv_tlsf.c **** }
 248              		.loc 1 426 1 view .LVU44
 249 0008 7047     		bx	lr
 250              		.cfi_endproc
 251              	.LFE11:
 253              		.section	.text.block_from_ptr,"ax",%progbits
 254              		.align	1
 255              		.syntax unified
 256              		.thumb
 257              		.thumb_func
 259              	block_from_ptr:
 260              	.LVL16:
 261              	.LFB12:
 427:lvgl/src/misc/lv_tlsf.c **** 
 428:lvgl/src/misc/lv_tlsf.c **** static block_header_t * block_from_ptr(const void * ptr)
 429:lvgl/src/misc/lv_tlsf.c **** {
 262              		.loc 1 429 1 is_stmt 1 view -0
 263              		.cfi_startproc
 264              		@ args = 0, pretend = 0, frame = 0
 265              		@ frame_needed = 0, uses_anonymous_args = 0
 266              		@ link register save eliminated.
 430:lvgl/src/misc/lv_tlsf.c ****     return tlsf_cast(block_header_t *,
 267              		.loc 1 430 5 view .LVU46
 431:lvgl/src/misc/lv_tlsf.c ****                      tlsf_cast(unsigned char *, ptr) - block_start_offset);
 432:lvgl/src/misc/lv_tlsf.c **** }
 268              		.loc 1 432 1 is_stmt 0 view .LVU47
 269 0000 0838     		subs	r0, r0, #8
 270              	.LVL17:
 271              		.loc 1 432 1 view .LVU48
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 13


 272 0002 7047     		bx	lr
 273              		.cfi_endproc
 274              	.LFE12:
 276              		.section	.text.block_to_ptr,"ax",%progbits
 277              		.align	1
 278              		.syntax unified
 279              		.thumb
 280              		.thumb_func
 282              	block_to_ptr:
 283              	.LVL18:
 284              	.LFB13:
 433:lvgl/src/misc/lv_tlsf.c **** 
 434:lvgl/src/misc/lv_tlsf.c **** static void * block_to_ptr(const block_header_t * block)
 435:lvgl/src/misc/lv_tlsf.c **** {
 285              		.loc 1 435 1 is_stmt 1 view -0
 286              		.cfi_startproc
 287              		@ args = 0, pretend = 0, frame = 0
 288              		@ frame_needed = 0, uses_anonymous_args = 0
 289              		@ link register save eliminated.
 436:lvgl/src/misc/lv_tlsf.c ****     return tlsf_cast(void *,
 290              		.loc 1 436 5 view .LVU50
 437:lvgl/src/misc/lv_tlsf.c ****                      tlsf_cast(unsigned char *, block) + block_start_offset);
 438:lvgl/src/misc/lv_tlsf.c **** }
 291              		.loc 1 438 1 is_stmt 0 view .LVU51
 292 0000 0830     		adds	r0, r0, #8
 293              	.LVL19:
 294              		.loc 1 438 1 view .LVU52
 295 0002 7047     		bx	lr
 296              		.cfi_endproc
 297              	.LFE13:
 299              		.section	.text.offset_to_block,"ax",%progbits
 300              		.align	1
 301              		.syntax unified
 302              		.thumb
 303              		.thumb_func
 305              	offset_to_block:
 306              	.LVL20:
 307              	.LFB14:
 439:lvgl/src/misc/lv_tlsf.c **** 
 440:lvgl/src/misc/lv_tlsf.c **** /* Return location of next block after block of given size. */
 441:lvgl/src/misc/lv_tlsf.c **** static block_header_t * offset_to_block(const void * ptr, size_t size)
 442:lvgl/src/misc/lv_tlsf.c **** {
 308              		.loc 1 442 1 is_stmt 1 view -0
 309              		.cfi_startproc
 310              		@ args = 0, pretend = 0, frame = 0
 311              		@ frame_needed = 0, uses_anonymous_args = 0
 312              		@ link register save eliminated.
 443:lvgl/src/misc/lv_tlsf.c ****     return tlsf_cast(block_header_t *, tlsf_cast(tlsfptr_t, ptr) + size);
 313              		.loc 1 443 5 view .LVU54
 444:lvgl/src/misc/lv_tlsf.c **** }
 314              		.loc 1 444 1 is_stmt 0 view .LVU55
 315 0000 0844     		add	r0, r0, r1
 316              	.LVL21:
 317              		.loc 1 444 1 view .LVU56
 318 0002 7047     		bx	lr
 319              		.cfi_endproc
 320              	.LFE14:
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 14


 322              		.section	.text.block_prev,"ax",%progbits
 323              		.align	1
 324              		.syntax unified
 325              		.thumb
 326              		.thumb_func
 328              	block_prev:
 329              	.LVL22:
 330              	.LFB15:
 445:lvgl/src/misc/lv_tlsf.c **** 
 446:lvgl/src/misc/lv_tlsf.c **** /* Return location of previous block. */
 447:lvgl/src/misc/lv_tlsf.c **** static block_header_t * block_prev(const block_header_t * block)
 448:lvgl/src/misc/lv_tlsf.c **** {
 331              		.loc 1 448 1 is_stmt 1 view -0
 332              		.cfi_startproc
 333              		@ args = 0, pretend = 0, frame = 0
 334              		@ frame_needed = 0, uses_anonymous_args = 0
 335              		.loc 1 448 1 is_stmt 0 view .LVU58
 336 0000 10B5     		push	{r4, lr}
 337              	.LCFI1:
 338              		.cfi_def_cfa_offset 8
 339              		.cfi_offset 4, -8
 340              		.cfi_offset 14, -4
 341 0002 0446     		mov	r4, r0
 449:lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(block_is_prev_free(block) && "previous block must be free");
 342              		.loc 1 449 5 is_stmt 1 view .LVU59
 343              		.loc 1 449 5 view .LVU60
 344 0004 FFF7FEFF 		bl	block_is_prev_free
 345              	.LVL23:
 346              		.loc 1 449 5 is_stmt 0 discriminator 1 view .LVU61
 347 0008 00B9     		cbnz	r0, .L15
 348              	.L16:
 349              		.loc 1 449 5 is_stmt 1 discriminator 3 view .LVU62
 350              		.loc 1 449 5 discriminator 3 view .LVU63
 351              		.loc 1 449 5 discriminator 3 view .LVU64
 352              		.loc 1 449 5 discriminator 3 view .LVU65
 353              		.loc 1 449 5 discriminator 3 view .LVU66
 354 000a FEE7     		b	.L16
 355              	.L15:
 356              		.loc 1 449 5 discriminator 4 view .LVU67
 450:lvgl/src/misc/lv_tlsf.c ****     return block->prev_phys_block;
 357              		.loc 1 450 5 view .LVU68
 451:lvgl/src/misc/lv_tlsf.c **** }
 358              		.loc 1 451 1 is_stmt 0 view .LVU69
 359 000c 2068     		ldr	r0, [r4]
 360 000e 10BD     		pop	{r4, pc}
 361              		.loc 1 451 1 view .LVU70
 362              		.cfi_endproc
 363              	.LFE15:
 365              		.section	.text.block_next,"ax",%progbits
 366              		.align	1
 367              		.syntax unified
 368              		.thumb
 369              		.thumb_func
 371              	block_next:
 372              	.LVL24:
 373              	.LFB16:
 452:lvgl/src/misc/lv_tlsf.c **** 
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 15


 453:lvgl/src/misc/lv_tlsf.c **** /* Return location of next existing block. */
 454:lvgl/src/misc/lv_tlsf.c **** static block_header_t * block_next(const block_header_t * block)
 455:lvgl/src/misc/lv_tlsf.c **** {
 374              		.loc 1 455 1 is_stmt 1 view -0
 375              		.cfi_startproc
 376              		@ args = 0, pretend = 0, frame = 0
 377              		@ frame_needed = 0, uses_anonymous_args = 0
 378              		.loc 1 455 1 is_stmt 0 view .LVU72
 379 0000 38B5     		push	{r3, r4, r5, lr}
 380              	.LCFI2:
 381              		.cfi_def_cfa_offset 16
 382              		.cfi_offset 3, -16
 383              		.cfi_offset 4, -12
 384              		.cfi_offset 5, -8
 385              		.cfi_offset 14, -4
 386 0002 0446     		mov	r4, r0
 456:lvgl/src/misc/lv_tlsf.c ****     block_header_t * next = offset_to_block(block_to_ptr(block),
 387              		.loc 1 456 5 is_stmt 1 view .LVU73
 388              		.loc 1 456 45 is_stmt 0 view .LVU74
 389 0004 FFF7FEFF 		bl	block_to_ptr
 390              	.LVL25:
 391              		.loc 1 456 45 view .LVU75
 392 0008 0546     		mov	r5, r0
 457:lvgl/src/misc/lv_tlsf.c ****                                             block_size(block) - block_header_overhead);
 393              		.loc 1 457 45 view .LVU76
 394 000a 2046     		mov	r0, r4
 395 000c FFF7FEFF 		bl	block_size
 396              	.LVL26:
 456:lvgl/src/misc/lv_tlsf.c ****     block_header_t * next = offset_to_block(block_to_ptr(block),
 397              		.loc 1 456 29 view .LVU77
 398 0010 011F     		subs	r1, r0, #4
 399 0012 2846     		mov	r0, r5
 400 0014 FFF7FEFF 		bl	offset_to_block
 401              	.LVL27:
 402 0018 0546     		mov	r5, r0
 403              	.LVL28:
 458:lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(!block_is_last(block));
 404              		.loc 1 458 5 is_stmt 1 view .LVU78
 405              		.loc 1 458 5 view .LVU79
 406 001a 2046     		mov	r0, r4
 407              	.LVL29:
 408              		.loc 1 458 5 is_stmt 0 view .LVU80
 409 001c FFF7FEFF 		bl	block_is_last
 410              	.LVL30:
 411              		.loc 1 458 5 discriminator 1 view .LVU81
 412 0020 00B1     		cbz	r0, .L18
 413              	.L20:
 414              		.loc 1 458 5 is_stmt 1 discriminator 1 view .LVU82
 415              		.loc 1 458 5 discriminator 1 view .LVU83
 416              		.loc 1 458 5 discriminator 1 view .LVU84
 417              		.loc 1 458 5 discriminator 1 view .LVU85
 418              		.loc 1 458 5 discriminator 1 view .LVU86
 419 0022 FEE7     		b	.L20
 420              	.L18:
 459:lvgl/src/misc/lv_tlsf.c ****     return next;
 460:lvgl/src/misc/lv_tlsf.c **** }
 421              		.loc 1 460 1 is_stmt 0 view .LVU87
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 16


 422 0024 2846     		mov	r0, r5
 423 0026 38BD     		pop	{r3, r4, r5, pc}
 424              		.loc 1 460 1 view .LVU88
 425              		.cfi_endproc
 426              	.LFE16:
 428              		.section	.text.block_link_next,"ax",%progbits
 429              		.align	1
 430              		.syntax unified
 431              		.thumb
 432              		.thumb_func
 434              	block_link_next:
 435              	.LVL31:
 436              	.LFB17:
 461:lvgl/src/misc/lv_tlsf.c **** 
 462:lvgl/src/misc/lv_tlsf.c **** /* Link a new block with its physical neighbor, return the neighbor. */
 463:lvgl/src/misc/lv_tlsf.c **** static block_header_t * block_link_next(block_header_t * block)
 464:lvgl/src/misc/lv_tlsf.c **** {
 437              		.loc 1 464 1 is_stmt 1 view -0
 438              		.cfi_startproc
 439              		@ args = 0, pretend = 0, frame = 0
 440              		@ frame_needed = 0, uses_anonymous_args = 0
 441              		.loc 1 464 1 is_stmt 0 view .LVU90
 442 0000 10B5     		push	{r4, lr}
 443              	.LCFI3:
 444              		.cfi_def_cfa_offset 8
 445              		.cfi_offset 4, -8
 446              		.cfi_offset 14, -4
 447 0002 0446     		mov	r4, r0
 465:lvgl/src/misc/lv_tlsf.c ****     block_header_t * next = block_next(block);
 448              		.loc 1 465 5 is_stmt 1 view .LVU91
 449              		.loc 1 465 29 is_stmt 0 view .LVU92
 450 0004 FFF7FEFF 		bl	block_next
 451              	.LVL32:
 466:lvgl/src/misc/lv_tlsf.c ****     next->prev_phys_block = block;
 452              		.loc 1 466 5 is_stmt 1 view .LVU93
 453              		.loc 1 466 27 is_stmt 0 view .LVU94
 454 0008 0460     		str	r4, [r0]
 467:lvgl/src/misc/lv_tlsf.c ****     return next;
 455              		.loc 1 467 5 is_stmt 1 view .LVU95
 468:lvgl/src/misc/lv_tlsf.c **** }
 456              		.loc 1 468 1 is_stmt 0 view .LVU96
 457 000a 10BD     		pop	{r4, pc}
 458              		.loc 1 468 1 view .LVU97
 459              		.cfi_endproc
 460              	.LFE17:
 462              		.section	.text.block_mark_as_free,"ax",%progbits
 463              		.align	1
 464              		.syntax unified
 465              		.thumb
 466              		.thumb_func
 468              	block_mark_as_free:
 469              	.LVL33:
 470              	.LFB18:
 469:lvgl/src/misc/lv_tlsf.c **** 
 470:lvgl/src/misc/lv_tlsf.c **** static void block_mark_as_free(block_header_t * block)
 471:lvgl/src/misc/lv_tlsf.c **** {
 471              		.loc 1 471 1 is_stmt 1 view -0
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 17


 472              		.cfi_startproc
 473              		@ args = 0, pretend = 0, frame = 0
 474              		@ frame_needed = 0, uses_anonymous_args = 0
 475              		.loc 1 471 1 is_stmt 0 view .LVU99
 476 0000 10B5     		push	{r4, lr}
 477              	.LCFI4:
 478              		.cfi_def_cfa_offset 8
 479              		.cfi_offset 4, -8
 480              		.cfi_offset 14, -4
 481 0002 0446     		mov	r4, r0
 472:lvgl/src/misc/lv_tlsf.c ****     /* Link the block to the next block, first. */
 473:lvgl/src/misc/lv_tlsf.c ****     block_header_t * next = block_link_next(block);
 482              		.loc 1 473 5 is_stmt 1 view .LVU100
 483              		.loc 1 473 29 is_stmt 0 view .LVU101
 484 0004 FFF7FEFF 		bl	block_link_next
 485              	.LVL34:
 474:lvgl/src/misc/lv_tlsf.c ****     block_set_prev_free(next);
 486              		.loc 1 474 5 is_stmt 1 view .LVU102
 487 0008 FFF7FEFF 		bl	block_set_prev_free
 488              	.LVL35:
 475:lvgl/src/misc/lv_tlsf.c ****     block_set_free(block);
 489              		.loc 1 475 5 view .LVU103
 490 000c 2046     		mov	r0, r4
 491 000e FFF7FEFF 		bl	block_set_free
 492              	.LVL36:
 476:lvgl/src/misc/lv_tlsf.c **** }
 493              		.loc 1 476 1 is_stmt 0 view .LVU104
 494 0012 10BD     		pop	{r4, pc}
 495              		.loc 1 476 1 view .LVU105
 496              		.cfi_endproc
 497              	.LFE18:
 499              		.section	.text.block_mark_as_used,"ax",%progbits
 500              		.align	1
 501              		.syntax unified
 502              		.thumb
 503              		.thumb_func
 505              	block_mark_as_used:
 506              	.LVL37:
 507              	.LFB19:
 477:lvgl/src/misc/lv_tlsf.c **** 
 478:lvgl/src/misc/lv_tlsf.c **** static void block_mark_as_used(block_header_t * block)
 479:lvgl/src/misc/lv_tlsf.c **** {
 508              		.loc 1 479 1 is_stmt 1 view -0
 509              		.cfi_startproc
 510              		@ args = 0, pretend = 0, frame = 0
 511              		@ frame_needed = 0, uses_anonymous_args = 0
 512              		.loc 1 479 1 is_stmt 0 view .LVU107
 513 0000 10B5     		push	{r4, lr}
 514              	.LCFI5:
 515              		.cfi_def_cfa_offset 8
 516              		.cfi_offset 4, -8
 517              		.cfi_offset 14, -4
 518 0002 0446     		mov	r4, r0
 480:lvgl/src/misc/lv_tlsf.c ****     block_header_t * next = block_next(block);
 519              		.loc 1 480 5 is_stmt 1 view .LVU108
 520              		.loc 1 480 29 is_stmt 0 view .LVU109
 521 0004 FFF7FEFF 		bl	block_next
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 18


 522              	.LVL38:
 481:lvgl/src/misc/lv_tlsf.c ****     block_set_prev_used(next);
 523              		.loc 1 481 5 is_stmt 1 view .LVU110
 524 0008 FFF7FEFF 		bl	block_set_prev_used
 525              	.LVL39:
 482:lvgl/src/misc/lv_tlsf.c ****     block_set_used(block);
 526              		.loc 1 482 5 view .LVU111
 527 000c 2046     		mov	r0, r4
 528 000e FFF7FEFF 		bl	block_set_used
 529              	.LVL40:
 483:lvgl/src/misc/lv_tlsf.c **** }
 530              		.loc 1 483 1 is_stmt 0 view .LVU112
 531 0012 10BD     		pop	{r4, pc}
 532              		.loc 1 483 1 view .LVU113
 533              		.cfi_endproc
 534              	.LFE19:
 536              		.section	.text.align_up,"ax",%progbits
 537              		.align	1
 538              		.syntax unified
 539              		.thumb
 540              		.thumb_func
 542              	align_up:
 543              	.LVL41:
 544              	.LFB20:
 484:lvgl/src/misc/lv_tlsf.c **** 
 485:lvgl/src/misc/lv_tlsf.c **** static size_t align_up(size_t x, size_t align)
 486:lvgl/src/misc/lv_tlsf.c **** {
 545              		.loc 1 486 1 is_stmt 1 view -0
 546              		.cfi_startproc
 547              		@ args = 0, pretend = 0, frame = 0
 548              		@ frame_needed = 0, uses_anonymous_args = 0
 549              		@ link register save eliminated.
 487:lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(0 == (align & (align - 1)) && "must align to a power of two");
 550              		.loc 1 487 5 view .LVU115
 551              		.loc 1 487 5 view .LVU116
 552 0000 4B1E     		subs	r3, r1, #1
 553 0002 0B42     		tst	r3, r1
 554 0004 00D0     		beq	.L29
 555              	.L30:
 556              		.loc 1 487 5 discriminator 1 view .LVU117
 557              		.loc 1 487 5 discriminator 1 view .LVU118
 558              		.loc 1 487 5 discriminator 1 view .LVU119
 559              		.loc 1 487 5 discriminator 1 view .LVU120
 560              		.loc 1 487 5 discriminator 1 view .LVU121
 561 0006 FEE7     		b	.L30
 562              	.L29:
 563              		.loc 1 487 5 discriminator 2 view .LVU122
 488:lvgl/src/misc/lv_tlsf.c ****     return (x + (align - 1)) & ~(align - 1);
 564              		.loc 1 488 5 view .LVU123
 565              		.loc 1 488 15 is_stmt 0 view .LVU124
 566 0008 0844     		add	r0, r0, r1
 567              	.LVL42:
 568              		.loc 1 488 15 view .LVU125
 569 000a 0138     		subs	r0, r0, #1
 570              		.loc 1 488 32 view .LVU126
 571 000c 4942     		rsbs	r1, r1, #0
 572              	.LVL43:
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 19


 489:lvgl/src/misc/lv_tlsf.c **** }
 573              		.loc 1 489 1 view .LVU127
 574 000e 0840     		ands	r0, r0, r1
 575 0010 7047     		bx	lr
 576              		.cfi_endproc
 577              	.LFE20:
 579              		.section	.text.align_down,"ax",%progbits
 580              		.align	1
 581              		.syntax unified
 582              		.thumb
 583              		.thumb_func
 585              	align_down:
 586              	.LVL44:
 587              	.LFB21:
 490:lvgl/src/misc/lv_tlsf.c **** 
 491:lvgl/src/misc/lv_tlsf.c **** static size_t align_down(size_t x, size_t align)
 492:lvgl/src/misc/lv_tlsf.c **** {
 588              		.loc 1 492 1 is_stmt 1 view -0
 589              		.cfi_startproc
 590              		@ args = 0, pretend = 0, frame = 0
 591              		@ frame_needed = 0, uses_anonymous_args = 0
 592              		@ link register save eliminated.
 493:lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(0 == (align & (align - 1)) && "must align to a power of two");
 593              		.loc 1 493 5 view .LVU129
 594              		.loc 1 493 5 view .LVU130
 595 0000 4B1E     		subs	r3, r1, #1
 596 0002 0B42     		tst	r3, r1
 597 0004 00D0     		beq	.L32
 598              	.L33:
 599              		.loc 1 493 5 discriminator 1 view .LVU131
 600              		.loc 1 493 5 discriminator 1 view .LVU132
 601              		.loc 1 493 5 discriminator 1 view .LVU133
 602              		.loc 1 493 5 discriminator 1 view .LVU134
 603              		.loc 1 493 5 discriminator 1 view .LVU135
 604 0006 FEE7     		b	.L33
 605              	.L32:
 606              		.loc 1 493 5 discriminator 2 view .LVU136
 494:lvgl/src/misc/lv_tlsf.c ****     return x - (x & (align - 1));
 607              		.loc 1 494 5 view .LVU137
 608              		.loc 1 494 14 is_stmt 0 view .LVU138
 609 0008 4942     		rsbs	r1, r1, #0
 610              	.LVL45:
 495:lvgl/src/misc/lv_tlsf.c **** }
 611              		.loc 1 495 1 view .LVU139
 612 000a 0840     		ands	r0, r0, r1
 613              	.LVL46:
 614              		.loc 1 495 1 view .LVU140
 615 000c 7047     		bx	lr
 616              		.cfi_endproc
 617              	.LFE21:
 619              		.section	.text.align_ptr,"ax",%progbits
 620              		.align	1
 621              		.syntax unified
 622              		.thumb
 623              		.thumb_func
 625              	align_ptr:
 626              	.LVL47:
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 20


 627              	.LFB22:
 496:lvgl/src/misc/lv_tlsf.c **** 
 497:lvgl/src/misc/lv_tlsf.c **** static void * align_ptr(const void * ptr, size_t align)
 498:lvgl/src/misc/lv_tlsf.c **** {
 628              		.loc 1 498 1 is_stmt 1 view -0
 629              		.cfi_startproc
 630              		@ args = 0, pretend = 0, frame = 0
 631              		@ frame_needed = 0, uses_anonymous_args = 0
 632              		@ link register save eliminated.
 499:lvgl/src/misc/lv_tlsf.c ****     const tlsfptr_t aligned =
 633              		.loc 1 499 5 view .LVU142
 500:lvgl/src/misc/lv_tlsf.c ****         (tlsf_cast(tlsfptr_t, ptr) + (align - 1)) & ~(align - 1);
 634              		.loc 1 500 36 is_stmt 0 view .LVU143
 635 0000 0844     		add	r0, r0, r1
 636              	.LVL48:
 637              		.loc 1 500 36 view .LVU144
 638 0002 0138     		subs	r0, r0, #1
 639              		.loc 1 500 53 view .LVU145
 640 0004 4B42     		rsbs	r3, r1, #0
 641              		.loc 1 500 51 view .LVU146
 642 0006 1840     		ands	r0, r0, r3
 643              	.LVL49:
 501:lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(0 == (align & (align - 1)) && "must align to a power of two");
 644              		.loc 1 501 5 is_stmt 1 view .LVU147
 645              		.loc 1 501 5 view .LVU148
 646 0008 4B1E     		subs	r3, r1, #1
 647 000a 0B42     		tst	r3, r1
 648 000c 00D0     		beq	.L35
 649              	.L36:
 650              		.loc 1 501 5 discriminator 1 view .LVU149
 651              		.loc 1 501 5 discriminator 1 view .LVU150
 652              		.loc 1 501 5 discriminator 1 view .LVU151
 653              		.loc 1 501 5 discriminator 1 view .LVU152
 654              		.loc 1 501 5 discriminator 1 view .LVU153
 655 000e FEE7     		b	.L36
 656              	.L35:
 657              		.loc 1 501 5 discriminator 2 view .LVU154
 502:lvgl/src/misc/lv_tlsf.c ****     return tlsf_cast(void *, aligned);
 658              		.loc 1 502 5 view .LVU155
 503:lvgl/src/misc/lv_tlsf.c **** }
 659              		.loc 1 503 1 is_stmt 0 view .LVU156
 660 0010 7047     		bx	lr
 661              		.cfi_endproc
 662              	.LFE22:
 664              		.section	.text.adjust_request_size,"ax",%progbits
 665              		.align	1
 666              		.syntax unified
 667              		.thumb
 668              		.thumb_func
 670              	adjust_request_size:
 671              	.LVL50:
 672              	.LFB23:
 504:lvgl/src/misc/lv_tlsf.c **** 
 505:lvgl/src/misc/lv_tlsf.c **** /*
 506:lvgl/src/misc/lv_tlsf.c **** ** Adjust an allocation size to be aligned to word size, and no smaller
 507:lvgl/src/misc/lv_tlsf.c **** ** than internal minimum.
 508:lvgl/src/misc/lv_tlsf.c **** */
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 21


 509:lvgl/src/misc/lv_tlsf.c **** static size_t adjust_request_size(size_t size, size_t align)
 510:lvgl/src/misc/lv_tlsf.c **** {
 673              		.loc 1 510 1 is_stmt 1 view -0
 674              		.cfi_startproc
 675              		@ args = 0, pretend = 0, frame = 0
 676              		@ frame_needed = 0, uses_anonymous_args = 0
 677              		.loc 1 510 1 is_stmt 0 view .LVU158
 678 0000 08B5     		push	{r3, lr}
 679              	.LCFI6:
 680              		.cfi_def_cfa_offset 8
 681              		.cfi_offset 3, -8
 682              		.cfi_offset 14, -4
 511:lvgl/src/misc/lv_tlsf.c ****     size_t adjust = 0;
 683              		.loc 1 511 5 is_stmt 1 view .LVU159
 684              	.LVL51:
 512:lvgl/src/misc/lv_tlsf.c ****     if(size) {
 685              		.loc 1 512 5 view .LVU160
 686              		.loc 1 512 7 is_stmt 0 view .LVU161
 687 0002 00B9     		cbnz	r0, .L41
 688              	.LVL52:
 689              	.L38:
 513:lvgl/src/misc/lv_tlsf.c ****         const size_t aligned = align_up(size, align);
 514:lvgl/src/misc/lv_tlsf.c **** 
 515:lvgl/src/misc/lv_tlsf.c ****         /* aligned sized must not exceed block_size_max or we'll go out of bounds on sl_bitmap */
 516:lvgl/src/misc/lv_tlsf.c ****         if(aligned < block_size_max) {
 517:lvgl/src/misc/lv_tlsf.c ****             adjust = tlsf_max(aligned, block_size_min);
 518:lvgl/src/misc/lv_tlsf.c ****         }
 519:lvgl/src/misc/lv_tlsf.c ****     }
 520:lvgl/src/misc/lv_tlsf.c ****     return adjust;
 690              		.loc 1 520 5 is_stmt 1 view .LVU162
 521:lvgl/src/misc/lv_tlsf.c **** }
 691              		.loc 1 521 1 is_stmt 0 view .LVU163
 692 0004 08BD     		pop	{r3, pc}
 693              	.LVL53:
 694              	.L41:
 695              	.LBB2:
 513:lvgl/src/misc/lv_tlsf.c ****         const size_t aligned = align_up(size, align);
 696              		.loc 1 513 9 is_stmt 1 view .LVU164
 513:lvgl/src/misc/lv_tlsf.c ****         const size_t aligned = align_up(size, align);
 697              		.loc 1 513 32 is_stmt 0 view .LVU165
 698 0006 FFF7FEFF 		bl	align_up
 699              	.LVL54:
 516:lvgl/src/misc/lv_tlsf.c ****             adjust = tlsf_max(aligned, block_size_min);
 700              		.loc 1 516 9 is_stmt 1 view .LVU166
 516:lvgl/src/misc/lv_tlsf.c ****             adjust = tlsf_max(aligned, block_size_min);
 701              		.loc 1 516 11 is_stmt 0 view .LVU167
 702 000a B0F5002F 		cmp	r0, #524288
 703 000e 03D2     		bcs	.L39
 517:lvgl/src/misc/lv_tlsf.c ****         }
 704              		.loc 1 517 13 is_stmt 1 view .LVU168
 517:lvgl/src/misc/lv_tlsf.c ****         }
 705              		.loc 1 517 20 is_stmt 0 view .LVU169
 706 0010 0C28     		cmp	r0, #12
 707 0012 38BF     		it	cc
 708 0014 0C20     		movcc	r0, #12
 709              	.LVL55:
 517:lvgl/src/misc/lv_tlsf.c ****         }
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 22


 710              		.loc 1 517 20 view .LVU170
 711 0016 F5E7     		b	.L38
 712              	.LVL56:
 713              	.L39:
 517:lvgl/src/misc/lv_tlsf.c ****         }
 714              		.loc 1 517 20 view .LVU171
 715              	.LBE2:
 511:lvgl/src/misc/lv_tlsf.c ****     if(size) {
 716              		.loc 1 511 12 view .LVU172
 717 0018 0020     		movs	r0, #0
 718              	.LVL57:
 511:lvgl/src/misc/lv_tlsf.c ****     if(size) {
 719              		.loc 1 511 12 view .LVU173
 720 001a F3E7     		b	.L38
 721              		.cfi_endproc
 722              	.LFE23:
 724              		.section	.text.remove_free_block,"ax",%progbits
 725              		.align	1
 726              		.syntax unified
 727              		.thumb
 728              		.thumb_func
 730              	remove_free_block:
 731              	.LVL58:
 732              	.LFB27:
 522:lvgl/src/misc/lv_tlsf.c **** 
 523:lvgl/src/misc/lv_tlsf.c **** /*
 524:lvgl/src/misc/lv_tlsf.c **** ** TLSF utility functions. In most cases, these are direct translations of
 525:lvgl/src/misc/lv_tlsf.c **** ** the documentation found in the white paper.
 526:lvgl/src/misc/lv_tlsf.c **** */
 527:lvgl/src/misc/lv_tlsf.c **** 
 528:lvgl/src/misc/lv_tlsf.c **** static void mapping_insert(size_t size, int * fli, int * sli)
 529:lvgl/src/misc/lv_tlsf.c **** {
 530:lvgl/src/misc/lv_tlsf.c ****     int fl, sl;
 531:lvgl/src/misc/lv_tlsf.c ****     if(size < SMALL_BLOCK_SIZE) {
 532:lvgl/src/misc/lv_tlsf.c ****         /* Store small blocks in first list. */
 533:lvgl/src/misc/lv_tlsf.c ****         fl = 0;
 534:lvgl/src/misc/lv_tlsf.c ****         sl = tlsf_cast(int, size) / (SMALL_BLOCK_SIZE / SL_INDEX_COUNT);
 535:lvgl/src/misc/lv_tlsf.c ****     }
 536:lvgl/src/misc/lv_tlsf.c ****     else {
 537:lvgl/src/misc/lv_tlsf.c ****         fl = tlsf_fls_sizet(size);
 538:lvgl/src/misc/lv_tlsf.c ****         sl = tlsf_cast(int, size >> (fl - SL_INDEX_COUNT_LOG2)) ^ (1 << SL_INDEX_COUNT_LOG2);
 539:lvgl/src/misc/lv_tlsf.c ****         fl -= (FL_INDEX_SHIFT - 1);
 540:lvgl/src/misc/lv_tlsf.c ****     }
 541:lvgl/src/misc/lv_tlsf.c ****     *fli = fl;
 542:lvgl/src/misc/lv_tlsf.c ****     *sli = sl;
 543:lvgl/src/misc/lv_tlsf.c **** }
 544:lvgl/src/misc/lv_tlsf.c **** 
 545:lvgl/src/misc/lv_tlsf.c **** /* This version rounds up to the next block size (for allocations) */
 546:lvgl/src/misc/lv_tlsf.c **** static void mapping_search(size_t size, int * fli, int * sli)
 547:lvgl/src/misc/lv_tlsf.c **** {
 548:lvgl/src/misc/lv_tlsf.c ****     if(size >= SMALL_BLOCK_SIZE) {
 549:lvgl/src/misc/lv_tlsf.c ****         const size_t round = (1 << (tlsf_fls_sizet(size) - SL_INDEX_COUNT_LOG2)) - 1;
 550:lvgl/src/misc/lv_tlsf.c ****         size += round;
 551:lvgl/src/misc/lv_tlsf.c ****     }
 552:lvgl/src/misc/lv_tlsf.c ****     mapping_insert(size, fli, sli);
 553:lvgl/src/misc/lv_tlsf.c **** }
 554:lvgl/src/misc/lv_tlsf.c **** 
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 23


 555:lvgl/src/misc/lv_tlsf.c **** static block_header_t * search_suitable_block(control_t * control, int * fli, int * sli)
 556:lvgl/src/misc/lv_tlsf.c **** {
 557:lvgl/src/misc/lv_tlsf.c ****     int fl = *fli;
 558:lvgl/src/misc/lv_tlsf.c ****     int sl = *sli;
 559:lvgl/src/misc/lv_tlsf.c **** 
 560:lvgl/src/misc/lv_tlsf.c ****     /*
 561:lvgl/src/misc/lv_tlsf.c ****     ** First, search for a block in the list associated with the given
 562:lvgl/src/misc/lv_tlsf.c ****     ** fl/sl index.
 563:lvgl/src/misc/lv_tlsf.c ****     */
 564:lvgl/src/misc/lv_tlsf.c ****     unsigned int sl_map = control->sl_bitmap[fl] & (~0U << sl);
 565:lvgl/src/misc/lv_tlsf.c ****     if(!sl_map) {
 566:lvgl/src/misc/lv_tlsf.c ****         /* No block exists. Search in the next largest first-level list. */
 567:lvgl/src/misc/lv_tlsf.c ****         const unsigned int fl_map = control->fl_bitmap & (~0U << (fl + 1));
 568:lvgl/src/misc/lv_tlsf.c ****         if(!fl_map) {
 569:lvgl/src/misc/lv_tlsf.c ****             /* No free blocks available, memory has been exhausted. */
 570:lvgl/src/misc/lv_tlsf.c ****             return 0;
 571:lvgl/src/misc/lv_tlsf.c ****         }
 572:lvgl/src/misc/lv_tlsf.c **** 
 573:lvgl/src/misc/lv_tlsf.c ****         fl = tlsf_ffs(fl_map);
 574:lvgl/src/misc/lv_tlsf.c ****         *fli = fl;
 575:lvgl/src/misc/lv_tlsf.c ****         sl_map = control->sl_bitmap[fl];
 576:lvgl/src/misc/lv_tlsf.c ****     }
 577:lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(sl_map && "internal error - second level bitmap is null");
 578:lvgl/src/misc/lv_tlsf.c ****     sl = tlsf_ffs(sl_map);
 579:lvgl/src/misc/lv_tlsf.c ****     *sli = sl;
 580:lvgl/src/misc/lv_tlsf.c **** 
 581:lvgl/src/misc/lv_tlsf.c ****     /* Return the first block in the free list. */
 582:lvgl/src/misc/lv_tlsf.c ****     return control->blocks[fl][sl];
 583:lvgl/src/misc/lv_tlsf.c **** }
 584:lvgl/src/misc/lv_tlsf.c **** 
 585:lvgl/src/misc/lv_tlsf.c **** /* Remove a free block from the free list.*/
 586:lvgl/src/misc/lv_tlsf.c **** static void remove_free_block(control_t * control, block_header_t * block, int fl, int sl)
 587:lvgl/src/misc/lv_tlsf.c **** {
 733              		.loc 1 587 1 is_stmt 1 view -0
 734              		.cfi_startproc
 735              		@ args = 0, pretend = 0, frame = 0
 736              		@ frame_needed = 0, uses_anonymous_args = 0
 737              		.loc 1 587 1 is_stmt 0 view .LVU175
 738 0000 00B5     		push	{lr}
 739              	.LCFI7:
 740              		.cfi_def_cfa_offset 4
 741              		.cfi_offset 14, -4
 742 0002 9646     		mov	lr, r2
 743 0004 9C46     		mov	ip, r3
 588:lvgl/src/misc/lv_tlsf.c ****     block_header_t * prev = block->prev_free;
 744              		.loc 1 588 5 is_stmt 1 view .LVU176
 745              		.loc 1 588 22 is_stmt 0 view .LVU177
 746 0006 CB68     		ldr	r3, [r1, #12]
 747              	.LVL59:
 589:lvgl/src/misc/lv_tlsf.c ****     block_header_t * next = block->next_free;
 748              		.loc 1 589 5 is_stmt 1 view .LVU178
 749              		.loc 1 589 22 is_stmt 0 view .LVU179
 750 0008 8A68     		ldr	r2, [r1, #8]
 751              	.LVL60:
 590:lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(prev && "prev_free field can not be null");
 752              		.loc 1 590 5 is_stmt 1 view .LVU180
 753              		.loc 1 590 5 view .LVU181
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 24


 754 000a 5BB1     		cbz	r3, .L44
 755              		.loc 1 590 5 discriminator 2 view .LVU182
 591:lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(next && "next_free field can not be null");
 756              		.loc 1 591 5 view .LVU183
 757              		.loc 1 591 5 view .LVU184
 758 000c 5AB1     		cbz	r2, .L46
 759              		.loc 1 591 5 discriminator 2 view .LVU185
 592:lvgl/src/misc/lv_tlsf.c ****     next->prev_free = prev;
 760              		.loc 1 592 5 view .LVU186
 761              		.loc 1 592 21 is_stmt 0 view .LVU187
 762 000e D360     		str	r3, [r2, #12]
 593:lvgl/src/misc/lv_tlsf.c ****     prev->next_free = next;
 763              		.loc 1 593 5 is_stmt 1 view .LVU188
 764              		.loc 1 593 21 is_stmt 0 view .LVU189
 765 0010 9A60     		str	r2, [r3, #8]
 594:lvgl/src/misc/lv_tlsf.c **** 
 595:lvgl/src/misc/lv_tlsf.c ****     /* If this block is the head of the free list, set new head. */
 596:lvgl/src/misc/lv_tlsf.c ****     if(control->blocks[fl][sl] == block) {
 766              		.loc 1 596 5 is_stmt 1 view .LVU190
 767              		.loc 1 596 27 is_stmt 0 view .LVU191
 768 0012 0CEB4E13 		add	r3, ip, lr, lsl #5
 769              	.LVL61:
 770              		.loc 1 596 27 view .LVU192
 771 0016 1233     		adds	r3, r3, #18
 772 0018 50F82330 		ldr	r3, [r0, r3, lsl #2]
 773              		.loc 1 596 7 view .LVU193
 774 001c 8B42     		cmp	r3, r1
 775 001e 03D0     		beq	.L49
 776              	.LVL62:
 777              	.L42:
 597:lvgl/src/misc/lv_tlsf.c ****         control->blocks[fl][sl] = next;
 598:lvgl/src/misc/lv_tlsf.c **** 
 599:lvgl/src/misc/lv_tlsf.c ****         /* If the new head is null, clear the bitmap. */
 600:lvgl/src/misc/lv_tlsf.c ****         if(next == &control->block_null) {
 601:lvgl/src/misc/lv_tlsf.c ****             control->sl_bitmap[fl] &= ~(1U << sl);
 602:lvgl/src/misc/lv_tlsf.c **** 
 603:lvgl/src/misc/lv_tlsf.c ****             /* If the second bitmap is now empty, clear the fl bitmap. */
 604:lvgl/src/misc/lv_tlsf.c ****             if(!control->sl_bitmap[fl]) {
 605:lvgl/src/misc/lv_tlsf.c ****                 control->fl_bitmap &= ~(1U << fl);
 606:lvgl/src/misc/lv_tlsf.c ****             }
 607:lvgl/src/misc/lv_tlsf.c ****         }
 608:lvgl/src/misc/lv_tlsf.c ****     }
 609:lvgl/src/misc/lv_tlsf.c **** }
 778              		.loc 1 609 1 view .LVU194
 779 0020 5DF804FB 		ldr	pc, [sp], #4
 780              	.LVL63:
 781              	.L44:
 590:lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(next && "next_free field can not be null");
 782              		.loc 1 590 5 is_stmt 1 discriminator 1 view .LVU195
 590:lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(next && "next_free field can not be null");
 783              		.loc 1 590 5 discriminator 1 view .LVU196
 590:lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(next && "next_free field can not be null");
 784              		.loc 1 590 5 discriminator 1 view .LVU197
 590:lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(next && "next_free field can not be null");
 785              		.loc 1 590 5 discriminator 1 view .LVU198
 590:lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(next && "next_free field can not be null");
 786              		.loc 1 590 5 discriminator 1 view .LVU199
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 25


 787 0024 FEE7     		b	.L44
 788              	.L46:
 591:lvgl/src/misc/lv_tlsf.c ****     next->prev_free = prev;
 789              		.loc 1 591 5 discriminator 1 view .LVU200
 591:lvgl/src/misc/lv_tlsf.c ****     next->prev_free = prev;
 790              		.loc 1 591 5 discriminator 1 view .LVU201
 591:lvgl/src/misc/lv_tlsf.c ****     next->prev_free = prev;
 791              		.loc 1 591 5 discriminator 1 view .LVU202
 591:lvgl/src/misc/lv_tlsf.c ****     next->prev_free = prev;
 792              		.loc 1 591 5 discriminator 1 view .LVU203
 591:lvgl/src/misc/lv_tlsf.c ****     next->prev_free = prev;
 793              		.loc 1 591 5 discriminator 1 view .LVU204
 794 0026 FEE7     		b	.L46
 795              	.LVL64:
 796              	.L49:
 597:lvgl/src/misc/lv_tlsf.c ****         control->blocks[fl][sl] = next;
 797              		.loc 1 597 9 view .LVU205
 597:lvgl/src/misc/lv_tlsf.c ****         control->blocks[fl][sl] = next;
 798              		.loc 1 597 33 is_stmt 0 view .LVU206
 799 0028 0CEB4E13 		add	r3, ip, lr, lsl #5
 800 002c 1233     		adds	r3, r3, #18
 801 002e 40F82320 		str	r2, [r0, r3, lsl #2]
 600:lvgl/src/misc/lv_tlsf.c ****             control->sl_bitmap[fl] &= ~(1U << sl);
 802              		.loc 1 600 9 is_stmt 1 view .LVU207
 600:lvgl/src/misc/lv_tlsf.c ****             control->sl_bitmap[fl] &= ~(1U << sl);
 803              		.loc 1 600 11 is_stmt 0 view .LVU208
 804 0032 9042     		cmp	r0, r2
 805 0034 F4D1     		bne	.L42
 601:lvgl/src/misc/lv_tlsf.c **** 
 806              		.loc 1 601 13 is_stmt 1 view .LVU209
 601:lvgl/src/misc/lv_tlsf.c **** 
 807              		.loc 1 601 31 is_stmt 0 view .LVU210
 808 0036 0EF10402 		add	r2, lr, #4
 809              	.LVL65:
 601:lvgl/src/misc/lv_tlsf.c **** 
 810              		.loc 1 601 31 view .LVU211
 811 003a 00EB8202 		add	r2, r0, r2, lsl #2
 812 003e 5368     		ldr	r3, [r2, #4]
 813              	.LVL66:
 601:lvgl/src/misc/lv_tlsf.c **** 
 814              		.loc 1 601 44 view .LVU212
 815 0040 0121     		movs	r1, #1
 816              	.LVL67:
 601:lvgl/src/misc/lv_tlsf.c **** 
 817              		.loc 1 601 44 view .LVU213
 818 0042 01FA0CF1 		lsl	r1, r1, ip
 601:lvgl/src/misc/lv_tlsf.c **** 
 819              		.loc 1 601 36 view .LVU214
 820 0046 23EA0103 		bic	r3, r3, r1
 821 004a 5360     		str	r3, [r2, #4]
 822              	.LVL68:
 604:lvgl/src/misc/lv_tlsf.c ****                 control->fl_bitmap &= ~(1U << fl);
 823              		.loc 1 604 13 is_stmt 1 view .LVU215
 604:lvgl/src/misc/lv_tlsf.c ****                 control->fl_bitmap &= ~(1U << fl);
 824              		.loc 1 604 15 is_stmt 0 view .LVU216
 825 004c 002B     		cmp	r3, #0
 826 004e E7D1     		bne	.L42
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 26


 605:lvgl/src/misc/lv_tlsf.c ****             }
 827              		.loc 1 605 17 is_stmt 1 view .LVU217
 605:lvgl/src/misc/lv_tlsf.c ****             }
 828              		.loc 1 605 24 is_stmt 0 view .LVU218
 829 0050 0369     		ldr	r3, [r0, #16]
 605:lvgl/src/misc/lv_tlsf.c ****             }
 830              		.loc 1 605 44 view .LVU219
 831 0052 0122     		movs	r2, #1
 832 0054 02FA0EF2 		lsl	r2, r2, lr
 605:lvgl/src/misc/lv_tlsf.c ****             }
 833              		.loc 1 605 36 view .LVU220
 834 0058 23EA0203 		bic	r3, r3, r2
 835 005c 0361     		str	r3, [r0, #16]
 836              		.loc 1 609 1 view .LVU221
 837 005e DFE7     		b	.L42
 838              		.cfi_endproc
 839              	.LFE27:
 841              		.section	.text.insert_free_block,"ax",%progbits
 842              		.align	1
 843              		.syntax unified
 844              		.thumb
 845              		.thumb_func
 847              	insert_free_block:
 848              	.LVL69:
 849              	.LFB28:
 610:lvgl/src/misc/lv_tlsf.c **** 
 611:lvgl/src/misc/lv_tlsf.c **** /* Insert a free block into the free block list. */
 612:lvgl/src/misc/lv_tlsf.c **** static void insert_free_block(control_t * control, block_header_t * block, int fl, int sl)
 613:lvgl/src/misc/lv_tlsf.c **** {
 850              		.loc 1 613 1 is_stmt 1 view -0
 851              		.cfi_startproc
 852              		@ args = 0, pretend = 0, frame = 0
 853              		@ frame_needed = 0, uses_anonymous_args = 0
 854              		.loc 1 613 1 is_stmt 0 view .LVU223
 855 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 856              	.LCFI8:
 857              		.cfi_def_cfa_offset 24
 858              		.cfi_offset 4, -24
 859              		.cfi_offset 5, -20
 860              		.cfi_offset 6, -16
 861              		.cfi_offset 7, -12
 862              		.cfi_offset 8, -8
 863              		.cfi_offset 14, -4
 864 0004 1646     		mov	r6, r2
 865 0006 1F46     		mov	r7, r3
 614:lvgl/src/misc/lv_tlsf.c ****     block_header_t * current = control->blocks[fl][sl];
 866              		.loc 1 614 5 is_stmt 1 view .LVU224
 867              		.loc 1 614 22 is_stmt 0 view .LVU225
 868 0008 03EB4212 		add	r2, r3, r2, lsl #5
 869              	.LVL70:
 870              		.loc 1 614 22 view .LVU226
 871 000c 1232     		adds	r2, r2, #18
 872 000e 50F82230 		ldr	r3, [r0, r2, lsl #2]
 873              	.LVL71:
 615:lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(current && "free list cannot have a null entry");
 874              		.loc 1 615 5 is_stmt 1 view .LVU227
 875              		.loc 1 615 5 view .LVU228
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 27


 876 0012 7BB1     		cbz	r3, .L52
 877 0014 0546     		mov	r5, r0
 878 0016 0C46     		mov	r4, r1
 879              		.loc 1 615 5 discriminator 2 view .LVU229
 616:lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(block && "cannot insert a null entry into the free list");
 880              		.loc 1 616 5 view .LVU230
 881              		.loc 1 616 5 view .LVU231
 882 0018 69B1     		cbz	r1, .L54
 883              		.loc 1 616 5 discriminator 2 view .LVU232
 617:lvgl/src/misc/lv_tlsf.c ****     block->next_free = current;
 884              		.loc 1 617 5 view .LVU233
 885              		.loc 1 617 22 is_stmt 0 view .LVU234
 886 001a 8B60     		str	r3, [r1, #8]
 618:lvgl/src/misc/lv_tlsf.c ****     block->prev_free = &control->block_null;
 887              		.loc 1 618 5 is_stmt 1 view .LVU235
 888              		.loc 1 618 22 is_stmt 0 view .LVU236
 889 001c C860     		str	r0, [r1, #12]
 619:lvgl/src/misc/lv_tlsf.c ****     current->prev_free = block;
 890              		.loc 1 619 5 is_stmt 1 view .LVU237
 891              		.loc 1 619 24 is_stmt 0 view .LVU238
 892 001e D960     		str	r1, [r3, #12]
 620:lvgl/src/misc/lv_tlsf.c **** 
 621:lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(block_to_ptr(block) == align_ptr(block_to_ptr(block), ALIGN_SIZE)
 893              		.loc 1 621 5 is_stmt 1 view .LVU239
 894              		.loc 1 621 5 view .LVU240
 895 0020 0846     		mov	r0, r1
 896              	.LVL72:
 897              		.loc 1 621 5 is_stmt 0 view .LVU241
 898 0022 FFF7FEFF 		bl	block_to_ptr
 899              	.LVL73:
 900              		.loc 1 621 5 view .LVU242
 901 0026 8046     		mov	r8, r0
 902              		.loc 1 621 5 discriminator 2 view .LVU243
 903 0028 0421     		movs	r1, #4
 904 002a FFF7FEFF 		bl	align_ptr
 905              	.LVL74:
 906              		.loc 1 621 5 discriminator 3 view .LVU244
 907 002e 8045     		cmp	r8, r0
 908 0030 02D0     		beq	.L55
 909              	.L56:
 910              		.loc 1 621 5 is_stmt 1 discriminator 1 view .LVU245
 911              		.loc 1 621 5 discriminator 1 view .LVU246
 912              		.loc 1 621 5 discriminator 1 view .LVU247
 913              		.loc 1 621 5 discriminator 1 view .LVU248
 914              		.loc 1 621 5 discriminator 1 view .LVU249
 915 0032 FEE7     		b	.L56
 916              	.LVL75:
 917              	.L52:
 615:lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(block && "cannot insert a null entry into the free list");
 918              		.loc 1 615 5 discriminator 1 view .LVU250
 615:lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(block && "cannot insert a null entry into the free list");
 919              		.loc 1 615 5 discriminator 1 view .LVU251
 615:lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(block && "cannot insert a null entry into the free list");
 920              		.loc 1 615 5 discriminator 1 view .LVU252
 615:lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(block && "cannot insert a null entry into the free list");
 921              		.loc 1 615 5 discriminator 1 view .LVU253
 615:lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(block && "cannot insert a null entry into the free list");
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 28


 922              		.loc 1 615 5 discriminator 1 view .LVU254
 923 0034 FEE7     		b	.L52
 924              	.L54:
 616:lvgl/src/misc/lv_tlsf.c ****     block->next_free = current;
 925              		.loc 1 616 5 discriminator 1 view .LVU255
 616:lvgl/src/misc/lv_tlsf.c ****     block->next_free = current;
 926              		.loc 1 616 5 discriminator 1 view .LVU256
 616:lvgl/src/misc/lv_tlsf.c ****     block->next_free = current;
 927              		.loc 1 616 5 discriminator 1 view .LVU257
 616:lvgl/src/misc/lv_tlsf.c ****     block->next_free = current;
 928              		.loc 1 616 5 discriminator 1 view .LVU258
 616:lvgl/src/misc/lv_tlsf.c ****     block->next_free = current;
 929              		.loc 1 616 5 discriminator 1 view .LVU259
 930 0036 FEE7     		b	.L54
 931              	.LVL76:
 932              	.L55:
 933              		.loc 1 621 5 discriminator 2 view .LVU260
 622:lvgl/src/misc/lv_tlsf.c ****                 && "block not aligned properly");
 623:lvgl/src/misc/lv_tlsf.c ****     /*
 624:lvgl/src/misc/lv_tlsf.c ****     ** Insert the new block at the head of the list, and mark the first-
 625:lvgl/src/misc/lv_tlsf.c ****     ** and second-level bitmaps appropriately.
 626:lvgl/src/misc/lv_tlsf.c ****     */
 627:lvgl/src/misc/lv_tlsf.c ****     control->blocks[fl][sl] = block;
 934              		.loc 1 627 5 view .LVU261
 935              		.loc 1 627 29 is_stmt 0 view .LVU262
 936 0038 07EB4613 		add	r3, r7, r6, lsl #5
 937 003c 1233     		adds	r3, r3, #18
 938 003e 45F82340 		str	r4, [r5, r3, lsl #2]
 628:lvgl/src/misc/lv_tlsf.c ****     control->fl_bitmap |= (1U << fl);
 939              		.loc 1 628 5 is_stmt 1 view .LVU263
 940              		.loc 1 628 12 is_stmt 0 view .LVU264
 941 0042 2A69     		ldr	r2, [r5, #16]
 942              		.loc 1 628 31 view .LVU265
 943 0044 0123     		movs	r3, #1
 944 0046 03FA06F1 		lsl	r1, r3, r6
 945              		.loc 1 628 24 view .LVU266
 946 004a 0A43     		orrs	r2, r2, r1
 947 004c 2A61     		str	r2, [r5, #16]
 629:lvgl/src/misc/lv_tlsf.c ****     control->sl_bitmap[fl] |= (1U << sl);
 948              		.loc 1 629 5 is_stmt 1 view .LVU267
 949              		.loc 1 629 23 is_stmt 0 view .LVU268
 950 004e 0436     		adds	r6, r6, #4
 951              	.LVL77:
 952              		.loc 1 629 23 view .LVU269
 953 0050 05EB8605 		add	r5, r5, r6, lsl #2
 954              	.LVL78:
 955              		.loc 1 629 23 view .LVU270
 956 0054 6A68     		ldr	r2, [r5, #4]
 957              		.loc 1 629 35 view .LVU271
 958 0056 BB40     		lsls	r3, r3, r7
 959              		.loc 1 629 28 view .LVU272
 960 0058 1A43     		orrs	r2, r2, r3
 961 005a 6A60     		str	r2, [r5, #4]
 630:lvgl/src/misc/lv_tlsf.c **** }
 962              		.loc 1 630 1 view .LVU273
 963 005c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 964              		.loc 1 630 1 view .LVU274
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 29


 965              		.cfi_endproc
 966              	.LFE28:
 968              		.section	.text.block_can_split,"ax",%progbits
 969              		.align	1
 970              		.syntax unified
 971              		.thumb
 972              		.thumb_func
 974              	block_can_split:
 975              	.LVL79:
 976              	.LFB31:
 631:lvgl/src/misc/lv_tlsf.c **** 
 632:lvgl/src/misc/lv_tlsf.c **** /* Remove a given block from the free list. */
 633:lvgl/src/misc/lv_tlsf.c **** static void block_remove(control_t * control, block_header_t * block)
 634:lvgl/src/misc/lv_tlsf.c **** {
 635:lvgl/src/misc/lv_tlsf.c ****     int fl, sl;
 636:lvgl/src/misc/lv_tlsf.c ****     mapping_insert(block_size(block), &fl, &sl);
 637:lvgl/src/misc/lv_tlsf.c ****     remove_free_block(control, block, fl, sl);
 638:lvgl/src/misc/lv_tlsf.c **** }
 639:lvgl/src/misc/lv_tlsf.c **** 
 640:lvgl/src/misc/lv_tlsf.c **** /* Insert a given block into the free list. */
 641:lvgl/src/misc/lv_tlsf.c **** static void block_insert(control_t * control, block_header_t * block)
 642:lvgl/src/misc/lv_tlsf.c **** {
 643:lvgl/src/misc/lv_tlsf.c ****     int fl, sl;
 644:lvgl/src/misc/lv_tlsf.c ****     mapping_insert(block_size(block), &fl, &sl);
 645:lvgl/src/misc/lv_tlsf.c ****     insert_free_block(control, block, fl, sl);
 646:lvgl/src/misc/lv_tlsf.c **** }
 647:lvgl/src/misc/lv_tlsf.c **** 
 648:lvgl/src/misc/lv_tlsf.c **** static int block_can_split(block_header_t * block, size_t size)
 649:lvgl/src/misc/lv_tlsf.c **** {
 977              		.loc 1 649 1 is_stmt 1 view -0
 978              		.cfi_startproc
 979              		@ args = 0, pretend = 0, frame = 0
 980              		@ frame_needed = 0, uses_anonymous_args = 0
 981              		.loc 1 649 1 is_stmt 0 view .LVU276
 982 0000 10B5     		push	{r4, lr}
 983              	.LCFI9:
 984              		.cfi_def_cfa_offset 8
 985              		.cfi_offset 4, -8
 986              		.cfi_offset 14, -4
 987 0002 0C46     		mov	r4, r1
 650:lvgl/src/misc/lv_tlsf.c ****     return block_size(block) >= sizeof(block_header_t) + size;
 988              		.loc 1 650 5 is_stmt 1 view .LVU277
 989              		.loc 1 650 12 is_stmt 0 view .LVU278
 990 0004 FFF7FEFF 		bl	block_size
 991              	.LVL80:
 992              		.loc 1 650 56 discriminator 1 view .LVU279
 993 0008 1034     		adds	r4, r4, #16
 994              	.LVL81:
 651:lvgl/src/misc/lv_tlsf.c **** }
 995              		.loc 1 651 1 view .LVU280
 996 000a A042     		cmp	r0, r4
 997 000c 34BF     		ite	cc
 998 000e 0020     		movcc	r0, #0
 999 0010 0120     		movcs	r0, #1
 1000 0012 10BD     		pop	{r4, pc}
 1001              		.loc 1 651 1 view .LVU281
 1002              		.cfi_endproc
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 30


 1003              	.LFE31:
 1005              		.section	.text.block_split,"ax",%progbits
 1006              		.align	1
 1007              		.syntax unified
 1008              		.thumb
 1009              		.thumb_func
 1011              	block_split:
 1012              	.LVL82:
 1013              	.LFB32:
 652:lvgl/src/misc/lv_tlsf.c **** 
 653:lvgl/src/misc/lv_tlsf.c **** /* Split a block into two, the second of which is free. */
 654:lvgl/src/misc/lv_tlsf.c **** static block_header_t * block_split(block_header_t * block, size_t size)
 655:lvgl/src/misc/lv_tlsf.c **** {
 1014              		.loc 1 655 1 is_stmt 1 view -0
 1015              		.cfi_startproc
 1016              		@ args = 0, pretend = 0, frame = 0
 1017              		@ frame_needed = 0, uses_anonymous_args = 0
 1018              		.loc 1 655 1 is_stmt 0 view .LVU283
 1019 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 1020              	.LCFI10:
 1021              		.cfi_def_cfa_offset 32
 1022              		.cfi_offset 3, -32
 1023              		.cfi_offset 4, -28
 1024              		.cfi_offset 5, -24
 1025              		.cfi_offset 6, -20
 1026              		.cfi_offset 7, -16
 1027              		.cfi_offset 8, -12
 1028              		.cfi_offset 9, -8
 1029              		.cfi_offset 14, -4
 1030 0004 0746     		mov	r7, r0
 1031 0006 0C46     		mov	r4, r1
 656:lvgl/src/misc/lv_tlsf.c ****     /* Calculate the amount of space left in the remaining block. */
 657:lvgl/src/misc/lv_tlsf.c ****     block_header_t * remaining =
 1032              		.loc 1 657 5 is_stmt 1 view .LVU284
 658:lvgl/src/misc/lv_tlsf.c ****         offset_to_block(block_to_ptr(block), size - block_header_overhead);
 1033              		.loc 1 658 25 is_stmt 0 view .LVU285
 1034 0008 FFF7FEFF 		bl	block_to_ptr
 1035              	.LVL83:
 1036              		.loc 1 658 9 discriminator 1 view .LVU286
 1037 000c 211F     		subs	r1, r4, #4
 1038 000e FFF7FEFF 		bl	offset_to_block
 1039              	.LVL84:
 1040 0012 0546     		mov	r5, r0
 1041              	.LVL85:
 659:lvgl/src/misc/lv_tlsf.c **** 
 660:lvgl/src/misc/lv_tlsf.c ****     const size_t remain_size = block_size(block) - (size + block_header_overhead);
 1042              		.loc 1 660 5 is_stmt 1 view .LVU287
 1043              		.loc 1 660 32 is_stmt 0 view .LVU288
 1044 0014 3846     		mov	r0, r7
 1045              	.LVL86:
 1046              		.loc 1 660 32 view .LVU289
 1047 0016 FFF7FEFF 		bl	block_size
 1048              	.LVL87:
 1049 001a 0646     		mov	r6, r0
 1050              		.loc 1 660 50 discriminator 1 view .LVU290
 1051 001c 031B     		subs	r3, r0, r4
 1052              		.loc 1 660 18 discriminator 1 view .LVU291
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 31


 1053 001e A3F10409 		sub	r9, r3, #4
 1054              	.LVL88:
 661:lvgl/src/misc/lv_tlsf.c **** 
 662:lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(block_to_ptr(remaining) == align_ptr(block_to_ptr(remaining), ALIGN_SIZE)
 1055              		.loc 1 662 5 is_stmt 1 view .LVU292
 1056              		.loc 1 662 5 view .LVU293
 1057 0022 2846     		mov	r0, r5
 1058 0024 FFF7FEFF 		bl	block_to_ptr
 1059              	.LVL89:
 1060 0028 8046     		mov	r8, r0
 1061              		.loc 1 662 5 is_stmt 0 discriminator 2 view .LVU294
 1062 002a 0421     		movs	r1, #4
 1063 002c FFF7FEFF 		bl	align_ptr
 1064              	.LVL90:
 1065              		.loc 1 662 5 discriminator 3 view .LVU295
 1066 0030 8045     		cmp	r8, r0
 1067 0032 00D0     		beq	.L61
 1068              	.L62:
 1069              		.loc 1 662 5 is_stmt 1 discriminator 1 view .LVU296
 1070              		.loc 1 662 5 discriminator 1 view .LVU297
 1071              		.loc 1 662 5 discriminator 1 view .LVU298
 1072              		.loc 1 662 5 discriminator 1 view .LVU299
 1073              		.loc 1 662 5 discriminator 1 view .LVU300
 1074 0034 FEE7     		b	.L62
 1075              	.L61:
 1076              		.loc 1 662 5 discriminator 2 view .LVU301
 663:lvgl/src/misc/lv_tlsf.c ****                 && "remaining block not aligned properly");
 664:lvgl/src/misc/lv_tlsf.c **** 
 665:lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(block_size(block) == remain_size + size + block_header_overhead);
 1077              		.loc 1 665 5 view .LVU302
 1078              		.loc 1 665 5 view .LVU303
 1079              		.loc 1 665 5 is_stmt 0 discriminator 1 view .LVU304
 1080 0036 04EB0903 		add	r3, r4, r9
 1081 003a 0433     		adds	r3, r3, #4
 1082 003c 9E42     		cmp	r6, r3
 1083 003e 00D0     		beq	.L63
 1084              	.L64:
 1085              		.loc 1 665 5 is_stmt 1 discriminator 1 view .LVU305
 1086              		.loc 1 665 5 discriminator 1 view .LVU306
 1087              		.loc 1 665 5 discriminator 1 view .LVU307
 1088              		.loc 1 665 5 discriminator 1 view .LVU308
 1089              		.loc 1 665 5 discriminator 1 view .LVU309
 1090 0040 FEE7     		b	.L64
 1091              	.L63:
 1092              		.loc 1 665 5 discriminator 2 view .LVU310
 666:lvgl/src/misc/lv_tlsf.c ****     block_set_size(remaining, remain_size);
 1093              		.loc 1 666 5 view .LVU311
 1094 0042 4946     		mov	r1, r9
 1095 0044 2846     		mov	r0, r5
 1096 0046 FFF7FEFF 		bl	block_set_size
 1097              	.LVL91:
 667:lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(block_size(remaining) >= block_size_min && "block split with invalid size");
 1098              		.loc 1 667 5 view .LVU312
 1099              		.loc 1 667 5 view .LVU313
 1100 004a 2846     		mov	r0, r5
 1101 004c FFF7FEFF 		bl	block_size
 1102              	.LVL92:
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 32


 1103              		.loc 1 667 5 is_stmt 0 discriminator 1 view .LVU314
 1104 0050 0B28     		cmp	r0, #11
 1105 0052 00D8     		bhi	.L65
 1106              	.L66:
 1107              		.loc 1 667 5 is_stmt 1 discriminator 3 view .LVU315
 1108              		.loc 1 667 5 discriminator 3 view .LVU316
 1109              		.loc 1 667 5 discriminator 3 view .LVU317
 1110              		.loc 1 667 5 discriminator 3 view .LVU318
 1111              		.loc 1 667 5 discriminator 3 view .LVU319
 1112 0054 FEE7     		b	.L66
 1113              	.L65:
 1114              		.loc 1 667 5 discriminator 4 view .LVU320
 668:lvgl/src/misc/lv_tlsf.c **** 
 669:lvgl/src/misc/lv_tlsf.c ****     block_set_size(block, size);
 1115              		.loc 1 669 5 view .LVU321
 1116 0056 2146     		mov	r1, r4
 1117 0058 3846     		mov	r0, r7
 1118 005a FFF7FEFF 		bl	block_set_size
 1119              	.LVL93:
 670:lvgl/src/misc/lv_tlsf.c ****     block_mark_as_free(remaining);
 1120              		.loc 1 670 5 view .LVU322
 1121 005e 2846     		mov	r0, r5
 1122 0060 FFF7FEFF 		bl	block_mark_as_free
 1123              	.LVL94:
 671:lvgl/src/misc/lv_tlsf.c **** 
 672:lvgl/src/misc/lv_tlsf.c ****     return remaining;
 1124              		.loc 1 672 5 view .LVU323
 673:lvgl/src/misc/lv_tlsf.c **** }
 1125              		.loc 1 673 1 is_stmt 0 view .LVU324
 1126 0064 2846     		mov	r0, r5
 1127 0066 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1128              		.loc 1 673 1 view .LVU325
 1129              		.cfi_endproc
 1130              	.LFE32:
 1132              		.section	.text.block_absorb,"ax",%progbits
 1133              		.align	1
 1134              		.syntax unified
 1135              		.thumb
 1136              		.thumb_func
 1138              	block_absorb:
 1139              	.LVL95:
 1140              	.LFB33:
 674:lvgl/src/misc/lv_tlsf.c **** 
 675:lvgl/src/misc/lv_tlsf.c **** /* Absorb a free block's storage into an adjacent previous free block. */
 676:lvgl/src/misc/lv_tlsf.c **** static block_header_t * block_absorb(block_header_t * prev, block_header_t * block)
 677:lvgl/src/misc/lv_tlsf.c **** {
 1141              		.loc 1 677 1 is_stmt 1 view -0
 1142              		.cfi_startproc
 1143              		@ args = 0, pretend = 0, frame = 0
 1144              		@ frame_needed = 0, uses_anonymous_args = 0
 1145              		.loc 1 677 1 is_stmt 0 view .LVU327
 1146 0000 38B5     		push	{r3, r4, r5, lr}
 1147              	.LCFI11:
 1148              		.cfi_def_cfa_offset 16
 1149              		.cfi_offset 3, -16
 1150              		.cfi_offset 4, -12
 1151              		.cfi_offset 5, -8
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 33


 1152              		.cfi_offset 14, -4
 1153 0002 0446     		mov	r4, r0
 1154 0004 0D46     		mov	r5, r1
 678:lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(!block_is_last(prev) && "previous block can't be last");
 1155              		.loc 1 678 5 is_stmt 1 view .LVU328
 1156              		.loc 1 678 5 view .LVU329
 1157 0006 FFF7FEFF 		bl	block_is_last
 1158              	.LVL96:
 1159              		.loc 1 678 5 is_stmt 0 discriminator 1 view .LVU330
 1160 000a 00B1     		cbz	r0, .L69
 1161              	.L70:
 1162              		.loc 1 678 5 is_stmt 1 discriminator 1 view .LVU331
 1163              		.loc 1 678 5 discriminator 1 view .LVU332
 1164              		.loc 1 678 5 discriminator 1 view .LVU333
 1165              		.loc 1 678 5 discriminator 1 view .LVU334
 1166              		.loc 1 678 5 discriminator 1 view .LVU335
 1167 000c FEE7     		b	.L70
 1168              	.L69:
 1169              		.loc 1 678 5 discriminator 2 view .LVU336
 679:lvgl/src/misc/lv_tlsf.c ****     /* Note: Leaves flags untouched. */
 680:lvgl/src/misc/lv_tlsf.c ****     prev->size += block_size(block) + block_header_overhead;
 1170              		.loc 1 680 5 view .LVU337
 1171              		.loc 1 680 19 is_stmt 0 view .LVU338
 1172 000e 2846     		mov	r0, r5
 1173 0010 FFF7FEFF 		bl	block_size
 1174              	.LVL97:
 1175              		.loc 1 680 37 discriminator 1 view .LVU339
 1176 0014 021D     		adds	r2, r0, #4
 1177              		.loc 1 680 9 discriminator 1 view .LVU340
 1178 0016 6368     		ldr	r3, [r4, #4]
 1179              		.loc 1 680 16 discriminator 1 view .LVU341
 1180 0018 1344     		add	r3, r3, r2
 1181 001a 6360     		str	r3, [r4, #4]
 681:lvgl/src/misc/lv_tlsf.c ****     block_link_next(prev);
 1182              		.loc 1 681 5 is_stmt 1 view .LVU342
 1183 001c 2046     		mov	r0, r4
 1184 001e FFF7FEFF 		bl	block_link_next
 1185              	.LVL98:
 682:lvgl/src/misc/lv_tlsf.c ****     return prev;
 1186              		.loc 1 682 5 view .LVU343
 683:lvgl/src/misc/lv_tlsf.c **** }
 1187              		.loc 1 683 1 is_stmt 0 view .LVU344
 1188 0022 2046     		mov	r0, r4
 1189 0024 38BD     		pop	{r3, r4, r5, pc}
 1190              		.loc 1 683 1 view .LVU345
 1191              		.cfi_endproc
 1192              	.LFE33:
 1194              		.section	.text.control_constructor,"ax",%progbits
 1195              		.align	1
 1196              		.syntax unified
 1197              		.thumb
 1198              		.thumb_func
 1200              	control_constructor:
 1201              	.LVL99:
 1202              	.LFB41:
 684:lvgl/src/misc/lv_tlsf.c **** 
 685:lvgl/src/misc/lv_tlsf.c **** /* Merge a just-freed block with an adjacent previous free block. */
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 34


 686:lvgl/src/misc/lv_tlsf.c **** static block_header_t * block_merge_prev(control_t * control, block_header_t * block)
 687:lvgl/src/misc/lv_tlsf.c **** {
 688:lvgl/src/misc/lv_tlsf.c ****     if(block_is_prev_free(block)) {
 689:lvgl/src/misc/lv_tlsf.c ****         block_header_t * prev = block_prev(block);
 690:lvgl/src/misc/lv_tlsf.c ****         tlsf_assert(prev && "prev physical block can't be null");
 691:lvgl/src/misc/lv_tlsf.c ****         tlsf_assert(block_is_free(prev) && "prev block is not free though marked as such");
 692:lvgl/src/misc/lv_tlsf.c ****         block_remove(control, prev);
 693:lvgl/src/misc/lv_tlsf.c ****         block = block_absorb(prev, block);
 694:lvgl/src/misc/lv_tlsf.c ****     }
 695:lvgl/src/misc/lv_tlsf.c **** 
 696:lvgl/src/misc/lv_tlsf.c ****     return block;
 697:lvgl/src/misc/lv_tlsf.c **** }
 698:lvgl/src/misc/lv_tlsf.c **** 
 699:lvgl/src/misc/lv_tlsf.c **** /* Merge a just-freed block with an adjacent free block. */
 700:lvgl/src/misc/lv_tlsf.c **** static block_header_t * block_merge_next(control_t * control, block_header_t * block)
 701:lvgl/src/misc/lv_tlsf.c **** {
 702:lvgl/src/misc/lv_tlsf.c ****     block_header_t * next = block_next(block);
 703:lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(next && "next physical block can't be null");
 704:lvgl/src/misc/lv_tlsf.c **** 
 705:lvgl/src/misc/lv_tlsf.c ****     if(block_is_free(next)) {
 706:lvgl/src/misc/lv_tlsf.c ****         tlsf_assert(!block_is_last(block) && "previous block can't be last");
 707:lvgl/src/misc/lv_tlsf.c ****         block_remove(control, next);
 708:lvgl/src/misc/lv_tlsf.c ****         block = block_absorb(block, next);
 709:lvgl/src/misc/lv_tlsf.c ****     }
 710:lvgl/src/misc/lv_tlsf.c **** 
 711:lvgl/src/misc/lv_tlsf.c ****     return block;
 712:lvgl/src/misc/lv_tlsf.c **** }
 713:lvgl/src/misc/lv_tlsf.c **** 
 714:lvgl/src/misc/lv_tlsf.c **** /* Trim any trailing block space off the end of a block, return to pool. */
 715:lvgl/src/misc/lv_tlsf.c **** static void block_trim_free(control_t * control, block_header_t * block, size_t size)
 716:lvgl/src/misc/lv_tlsf.c **** {
 717:lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(block_is_free(block) && "block must be free");
 718:lvgl/src/misc/lv_tlsf.c ****     if(block_can_split(block, size)) {
 719:lvgl/src/misc/lv_tlsf.c ****         block_header_t * remaining_block = block_split(block, size);
 720:lvgl/src/misc/lv_tlsf.c ****         block_link_next(block);
 721:lvgl/src/misc/lv_tlsf.c ****         block_set_prev_free(remaining_block);
 722:lvgl/src/misc/lv_tlsf.c ****         block_insert(control, remaining_block);
 723:lvgl/src/misc/lv_tlsf.c ****     }
 724:lvgl/src/misc/lv_tlsf.c **** }
 725:lvgl/src/misc/lv_tlsf.c **** 
 726:lvgl/src/misc/lv_tlsf.c **** /* Trim any trailing block space off the end of a used block, return to pool. */
 727:lvgl/src/misc/lv_tlsf.c **** static void block_trim_used(control_t * control, block_header_t * block, size_t size)
 728:lvgl/src/misc/lv_tlsf.c **** {
 729:lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(!block_is_free(block) && "block must be used");
 730:lvgl/src/misc/lv_tlsf.c ****     if(block_can_split(block, size)) {
 731:lvgl/src/misc/lv_tlsf.c ****         /* If the next block is free, we must coalesce. */
 732:lvgl/src/misc/lv_tlsf.c ****         block_header_t * remaining_block = block_split(block, size);
 733:lvgl/src/misc/lv_tlsf.c ****         block_set_prev_used(remaining_block);
 734:lvgl/src/misc/lv_tlsf.c **** 
 735:lvgl/src/misc/lv_tlsf.c ****         remaining_block = block_merge_next(control, remaining_block);
 736:lvgl/src/misc/lv_tlsf.c ****         block_insert(control, remaining_block);
 737:lvgl/src/misc/lv_tlsf.c ****     }
 738:lvgl/src/misc/lv_tlsf.c **** }
 739:lvgl/src/misc/lv_tlsf.c **** 
 740:lvgl/src/misc/lv_tlsf.c **** static block_header_t * block_trim_free_leading(control_t * control, block_header_t * block, size_t
 741:lvgl/src/misc/lv_tlsf.c **** {
 742:lvgl/src/misc/lv_tlsf.c ****     block_header_t * remaining_block = block;
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 35


 743:lvgl/src/misc/lv_tlsf.c ****     if(block_can_split(block, size)) {
 744:lvgl/src/misc/lv_tlsf.c ****         /* We want the 2nd block. */
 745:lvgl/src/misc/lv_tlsf.c ****         remaining_block = block_split(block, size - block_header_overhead);
 746:lvgl/src/misc/lv_tlsf.c ****         block_set_prev_free(remaining_block);
 747:lvgl/src/misc/lv_tlsf.c **** 
 748:lvgl/src/misc/lv_tlsf.c ****         block_link_next(block);
 749:lvgl/src/misc/lv_tlsf.c ****         block_insert(control, block);
 750:lvgl/src/misc/lv_tlsf.c ****     }
 751:lvgl/src/misc/lv_tlsf.c **** 
 752:lvgl/src/misc/lv_tlsf.c ****     return remaining_block;
 753:lvgl/src/misc/lv_tlsf.c **** }
 754:lvgl/src/misc/lv_tlsf.c **** 
 755:lvgl/src/misc/lv_tlsf.c **** static block_header_t * block_locate_free(control_t * control, size_t size)
 756:lvgl/src/misc/lv_tlsf.c **** {
 757:lvgl/src/misc/lv_tlsf.c ****     int fl = 0, sl = 0;
 758:lvgl/src/misc/lv_tlsf.c ****     block_header_t * block = 0;
 759:lvgl/src/misc/lv_tlsf.c **** 
 760:lvgl/src/misc/lv_tlsf.c ****     if(size) {
 761:lvgl/src/misc/lv_tlsf.c ****         mapping_search(size, &fl, &sl);
 762:lvgl/src/misc/lv_tlsf.c **** 
 763:lvgl/src/misc/lv_tlsf.c ****         /*
 764:lvgl/src/misc/lv_tlsf.c ****         ** mapping_search can futz with the size, so for excessively large sizes it can sometimes w
 765:lvgl/src/misc/lv_tlsf.c ****         ** with indices that are off the end of the block array.
 766:lvgl/src/misc/lv_tlsf.c ****         ** So, we protect against that here, since this is the only callsite of mapping_search.
 767:lvgl/src/misc/lv_tlsf.c ****         ** Note that we don't need to check sl, since it comes from a modulo operation that guarant
 768:lvgl/src/misc/lv_tlsf.c ****         */
 769:lvgl/src/misc/lv_tlsf.c ****         if(fl < FL_INDEX_COUNT) {
 770:lvgl/src/misc/lv_tlsf.c ****             block = search_suitable_block(control, &fl, &sl);
 771:lvgl/src/misc/lv_tlsf.c ****         }
 772:lvgl/src/misc/lv_tlsf.c ****     }
 773:lvgl/src/misc/lv_tlsf.c **** 
 774:lvgl/src/misc/lv_tlsf.c ****     if(block) {
 775:lvgl/src/misc/lv_tlsf.c ****         tlsf_assert(block_size(block) >= size);
 776:lvgl/src/misc/lv_tlsf.c ****         remove_free_block(control, block, fl, sl);
 777:lvgl/src/misc/lv_tlsf.c ****     }
 778:lvgl/src/misc/lv_tlsf.c **** 
 779:lvgl/src/misc/lv_tlsf.c ****     return block;
 780:lvgl/src/misc/lv_tlsf.c **** }
 781:lvgl/src/misc/lv_tlsf.c **** 
 782:lvgl/src/misc/lv_tlsf.c **** static void * block_prepare_used(control_t * control, block_header_t * block, size_t size)
 783:lvgl/src/misc/lv_tlsf.c **** {
 784:lvgl/src/misc/lv_tlsf.c ****     void * p = 0;
 785:lvgl/src/misc/lv_tlsf.c ****     if(block) {
 786:lvgl/src/misc/lv_tlsf.c ****         tlsf_assert(size && "size must be non-zero");
 787:lvgl/src/misc/lv_tlsf.c ****         block_trim_free(control, block, size);
 788:lvgl/src/misc/lv_tlsf.c ****         block_mark_as_used(block);
 789:lvgl/src/misc/lv_tlsf.c ****         p = block_to_ptr(block);
 790:lvgl/src/misc/lv_tlsf.c ****     }
 791:lvgl/src/misc/lv_tlsf.c ****     return p;
 792:lvgl/src/misc/lv_tlsf.c **** }
 793:lvgl/src/misc/lv_tlsf.c **** 
 794:lvgl/src/misc/lv_tlsf.c **** /* Clear structure and point all empty lists at the null block. */
 795:lvgl/src/misc/lv_tlsf.c **** static void control_constructor(control_t * control)
 796:lvgl/src/misc/lv_tlsf.c **** {
 1203              		.loc 1 796 1 is_stmt 1 view -0
 1204              		.cfi_startproc
 1205              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 36


 1206              		@ frame_needed = 0, uses_anonymous_args = 0
 1207              		@ link register save eliminated.
 797:lvgl/src/misc/lv_tlsf.c ****     int i, j;
 1208              		.loc 1 797 5 view .LVU347
 798:lvgl/src/misc/lv_tlsf.c **** 
 799:lvgl/src/misc/lv_tlsf.c ****     control->block_null.next_free = &control->block_null;
 1209              		.loc 1 799 5 view .LVU348
 1210              		.loc 1 799 35 is_stmt 0 view .LVU349
 1211 0000 8060     		str	r0, [r0, #8]
 800:lvgl/src/misc/lv_tlsf.c ****     control->block_null.prev_free = &control->block_null;
 1212              		.loc 1 800 5 is_stmt 1 view .LVU350
 1213              		.loc 1 800 35 is_stmt 0 view .LVU351
 1214 0002 C060     		str	r0, [r0, #12]
 801:lvgl/src/misc/lv_tlsf.c **** 
 802:lvgl/src/misc/lv_tlsf.c ****     control->fl_bitmap = 0;
 1215              		.loc 1 802 5 is_stmt 1 view .LVU352
 1216              		.loc 1 802 24 is_stmt 0 view .LVU353
 1217 0004 0021     		movs	r1, #0
 1218 0006 0161     		str	r1, [r0, #16]
 803:lvgl/src/misc/lv_tlsf.c ****     for(i = 0; i < FL_INDEX_COUNT; ++i) {
 1219              		.loc 1 803 5 is_stmt 1 view .LVU354
 1220              	.LVL100:
 1221              		.loc 1 803 5 is_stmt 0 view .LVU355
 1222 0008 08E0     		b	.L73
 1223              	.LVL101:
 1224              	.L75:
 804:lvgl/src/misc/lv_tlsf.c ****         control->sl_bitmap[i] = 0;
 805:lvgl/src/misc/lv_tlsf.c ****         for(j = 0; j < SL_INDEX_COUNT; ++j) {
 806:lvgl/src/misc/lv_tlsf.c ****             control->blocks[i][j] = &control->block_null;
 1225              		.loc 1 806 13 is_stmt 1 view .LVU356
 1226              		.loc 1 806 35 is_stmt 0 view .LVU357
 1227 000a 03EB4112 		add	r2, r3, r1, lsl #5
 1228 000e 1232     		adds	r2, r2, #18
 1229 0010 40F82200 		str	r0, [r0, r2, lsl #2]
 805:lvgl/src/misc/lv_tlsf.c ****             control->blocks[i][j] = &control->block_null;
 1230              		.loc 1 805 40 is_stmt 1 discriminator 3 view .LVU358
 1231 0014 0133     		adds	r3, r3, #1
 1232              	.LVL102:
 1233              	.L74:
 805:lvgl/src/misc/lv_tlsf.c ****             control->blocks[i][j] = &control->block_null;
 1234              		.loc 1 805 22 discriminator 1 view .LVU359
 1235 0016 1F2B     		cmp	r3, #31
 1236 0018 F7DD     		ble	.L75
 803:lvgl/src/misc/lv_tlsf.c ****     for(i = 0; i < FL_INDEX_COUNT; ++i) {
 1237              		.loc 1 803 36 discriminator 2 view .LVU360
 1238 001a 0131     		adds	r1, r1, #1
 1239              	.LVL103:
 1240              	.L73:
 803:lvgl/src/misc/lv_tlsf.c ****     for(i = 0; i < FL_INDEX_COUNT; ++i) {
 1241              		.loc 1 803 18 discriminator 1 view .LVU361
 1242 001c 0C29     		cmp	r1, #12
 1243 001e 05DC     		bgt	.L77
 804:lvgl/src/misc/lv_tlsf.c ****         control->sl_bitmap[i] = 0;
 1244              		.loc 1 804 9 view .LVU362
 804:lvgl/src/misc/lv_tlsf.c ****         control->sl_bitmap[i] = 0;
 1245              		.loc 1 804 31 is_stmt 0 view .LVU363
 1246 0020 0A1D     		adds	r2, r1, #4
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 37


 1247 0022 00EB8202 		add	r2, r0, r2, lsl #2
 1248 0026 0023     		movs	r3, #0
 1249 0028 5360     		str	r3, [r2, #4]
 805:lvgl/src/misc/lv_tlsf.c ****             control->blocks[i][j] = &control->block_null;
 1250              		.loc 1 805 9 is_stmt 1 view .LVU364
 1251              	.LVL104:
 805:lvgl/src/misc/lv_tlsf.c ****             control->blocks[i][j] = &control->block_null;
 1252              		.loc 1 805 9 is_stmt 0 view .LVU365
 1253 002a F4E7     		b	.L74
 1254              	.LVL105:
 1255              	.L77:
 807:lvgl/src/misc/lv_tlsf.c ****         }
 808:lvgl/src/misc/lv_tlsf.c ****     }
 809:lvgl/src/misc/lv_tlsf.c **** }
 1256              		.loc 1 809 1 view .LVU366
 1257 002c 7047     		bx	lr
 1258              		.cfi_endproc
 1259              	.LFE41:
 1261              		.section	.text.integrity_walker,"ax",%progbits
 1262              		.align	1
 1263              		.syntax unified
 1264              		.thumb
 1265              		.thumb_func
 1267              	integrity_walker:
 1268              	.LVL106:
 1269              	.LFB42:
 810:lvgl/src/misc/lv_tlsf.c **** 
 811:lvgl/src/misc/lv_tlsf.c **** /*
 812:lvgl/src/misc/lv_tlsf.c **** ** Debugging utilities.
 813:lvgl/src/misc/lv_tlsf.c **** */
 814:lvgl/src/misc/lv_tlsf.c **** 
 815:lvgl/src/misc/lv_tlsf.c **** typedef struct integrity_t {
 816:lvgl/src/misc/lv_tlsf.c ****     int prev_status;
 817:lvgl/src/misc/lv_tlsf.c ****     int status;
 818:lvgl/src/misc/lv_tlsf.c **** } integrity_t;
 819:lvgl/src/misc/lv_tlsf.c **** 
 820:lvgl/src/misc/lv_tlsf.c **** #define tlsf_insist(x) { tlsf_assert(x); if (!(x)) { status--; } }
 821:lvgl/src/misc/lv_tlsf.c **** 
 822:lvgl/src/misc/lv_tlsf.c **** static void integrity_walker(void * ptr, size_t size, int used, void * user)
 823:lvgl/src/misc/lv_tlsf.c **** {
 1270              		.loc 1 823 1 is_stmt 1 view -0
 1271              		.cfi_startproc
 1272              		@ args = 0, pretend = 0, frame = 0
 1273              		@ frame_needed = 0, uses_anonymous_args = 0
 1274              		.loc 1 823 1 is_stmt 0 view .LVU368
 1275 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1276              	.LCFI12:
 1277              		.cfi_def_cfa_offset 24
 1278              		.cfi_offset 4, -24
 1279              		.cfi_offset 5, -20
 1280              		.cfi_offset 6, -16
 1281              		.cfi_offset 7, -12
 1282              		.cfi_offset 8, -8
 1283              		.cfi_offset 14, -4
 1284 0004 0F46     		mov	r7, r1
 1285 0006 1D46     		mov	r5, r3
 824:lvgl/src/misc/lv_tlsf.c ****     block_header_t * block = block_from_ptr(ptr);
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 38


 1286              		.loc 1 824 5 is_stmt 1 view .LVU369
 1287              		.loc 1 824 30 is_stmt 0 view .LVU370
 1288 0008 FFF7FEFF 		bl	block_from_ptr
 1289              	.LVL107:
 1290              		.loc 1 824 30 view .LVU371
 1291 000c 0446     		mov	r4, r0
 1292              	.LVL108:
 825:lvgl/src/misc/lv_tlsf.c ****     integrity_t * integ = tlsf_cast(integrity_t *, user);
 1293              		.loc 1 825 5 is_stmt 1 view .LVU372
 826:lvgl/src/misc/lv_tlsf.c ****     const int this_prev_status = block_is_prev_free(block) ? 1 : 0;
 1294              		.loc 1 826 5 view .LVU373
 1295              		.loc 1 826 34 is_stmt 0 view .LVU374
 1296 000e FFF7FEFF 		bl	block_is_prev_free
 1297              	.LVL109:
 1298              		.loc 1 826 64 discriminator 1 view .LVU375
 1299 0012 061E     		subs	r6, r0, #0
 1300 0014 18BF     		it	ne
 1301 0016 0126     		movne	r6, #1
 1302              	.LVL110:
 827:lvgl/src/misc/lv_tlsf.c ****     const int this_status = block_is_free(block) ? 1 : 0;
 1303              		.loc 1 827 5 is_stmt 1 view .LVU376
 1304              		.loc 1 827 29 is_stmt 0 view .LVU377
 1305 0018 2046     		mov	r0, r4
 1306 001a FFF7FEFF 		bl	block_is_free
 1307              	.LVL111:
 1308              		.loc 1 827 54 discriminator 1 view .LVU378
 1309 001e B0F10008 		subs	r8, r0, #0
 1310 0022 18BF     		it	ne
 1311 0024 4FF00108 		movne	r8, #1
 1312              	.LVL112:
 828:lvgl/src/misc/lv_tlsf.c ****     const size_t this_block_size = block_size(block);
 1313              		.loc 1 828 5 is_stmt 1 view .LVU379
 1314              		.loc 1 828 36 is_stmt 0 view .LVU380
 1315 0028 2046     		mov	r0, r4
 1316 002a FFF7FEFF 		bl	block_size
 1317              	.LVL113:
 829:lvgl/src/misc/lv_tlsf.c **** 
 830:lvgl/src/misc/lv_tlsf.c ****     int status = 0;
 1318              		.loc 1 830 5 is_stmt 1 view .LVU381
 831:lvgl/src/misc/lv_tlsf.c ****     LV_UNUSED(used);
 1319              		.loc 1 831 5 view .LVU382
 832:lvgl/src/misc/lv_tlsf.c ****     tlsf_insist(integ->prev_status == this_prev_status && "prev status incorrect");
 1320              		.loc 1 832 5 view .LVU383
 1321              		.loc 1 832 5 view .LVU384
 1322 002e 2B68     		ldr	r3, [r5]
 1323 0030 B342     		cmp	r3, r6
 1324 0032 00D0     		beq	.L79
 1325              	.L80:
 1326              		.loc 1 832 5 discriminator 1 view .LVU385
 1327              		.loc 1 832 5 discriminator 1 view .LVU386
 1328              		.loc 1 832 5 discriminator 1 view .LVU387
 1329              		.loc 1 832 5 discriminator 1 view .LVU388
 1330              		.loc 1 832 5 discriminator 1 view .LVU389
 1331 0034 FEE7     		b	.L80
 1332              	.L79:
 1333              		.loc 1 832 5 discriminator 2 view .LVU390
 1334              		.loc 1 832 5 discriminator 2 view .LVU391
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 39


 1335              		.loc 1 832 83 discriminator 5 view .LVU392
 833:lvgl/src/misc/lv_tlsf.c ****     tlsf_insist(size == this_block_size && "block size incorrect");
 1336              		.loc 1 833 5 view .LVU393
 1337              		.loc 1 833 5 view .LVU394
 1338 0036 B842     		cmp	r0, r7
 1339 0038 00D0     		beq	.L81
 1340              	.L82:
 1341              		.loc 1 833 5 discriminator 1 view .LVU395
 1342              		.loc 1 833 5 discriminator 1 view .LVU396
 1343              		.loc 1 833 5 discriminator 1 view .LVU397
 1344              		.loc 1 833 5 discriminator 1 view .LVU398
 1345              		.loc 1 833 5 discriminator 1 view .LVU399
 1346 003a FEE7     		b	.L82
 1347              	.L81:
 1348              		.loc 1 833 5 discriminator 2 view .LVU400
 1349              		.loc 1 833 5 discriminator 2 view .LVU401
 1350              		.loc 1 833 67 discriminator 5 view .LVU402
 834:lvgl/src/misc/lv_tlsf.c **** 
 835:lvgl/src/misc/lv_tlsf.c ****     integ->prev_status = this_status;
 1351              		.loc 1 835 5 view .LVU403
 1352              		.loc 1 835 24 is_stmt 0 view .LVU404
 1353 003c C5F80080 		str	r8, [r5]
 836:lvgl/src/misc/lv_tlsf.c ****     integ->status += status;
 1354              		.loc 1 836 5 is_stmt 1 view .LVU405
 837:lvgl/src/misc/lv_tlsf.c **** }
 1355              		.loc 1 837 1 is_stmt 0 view .LVU406
 1356 0040 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1357              		.loc 1 837 1 view .LVU407
 1358              		.cfi_endproc
 1359              	.LFE42:
 1361              		.section	.text.default_walker,"ax",%progbits
 1362              		.align	1
 1363              		.syntax unified
 1364              		.thumb
 1365              		.thumb_func
 1367              	default_walker:
 1368              	.LVL114:
 1369              	.LFB44:
 838:lvgl/src/misc/lv_tlsf.c **** 
 839:lvgl/src/misc/lv_tlsf.c **** int lv_tlsf_check(lv_tlsf_t tlsf)
 840:lvgl/src/misc/lv_tlsf.c **** {
 841:lvgl/src/misc/lv_tlsf.c ****     int i, j;
 842:lvgl/src/misc/lv_tlsf.c **** 
 843:lvgl/src/misc/lv_tlsf.c ****     control_t * control = tlsf_cast(control_t *, tlsf);
 844:lvgl/src/misc/lv_tlsf.c ****     int status = 0;
 845:lvgl/src/misc/lv_tlsf.c **** 
 846:lvgl/src/misc/lv_tlsf.c ****     /* Check that the free lists and bitmaps are accurate. */
 847:lvgl/src/misc/lv_tlsf.c ****     for(i = 0; i < FL_INDEX_COUNT; ++i) {
 848:lvgl/src/misc/lv_tlsf.c ****         for(j = 0; j < SL_INDEX_COUNT; ++j) {
 849:lvgl/src/misc/lv_tlsf.c ****             const int fl_map = control->fl_bitmap & (1U << i);
 850:lvgl/src/misc/lv_tlsf.c ****             const int sl_list = control->sl_bitmap[i];
 851:lvgl/src/misc/lv_tlsf.c ****             const int sl_map = sl_list & (1U << j);
 852:lvgl/src/misc/lv_tlsf.c ****             const block_header_t * block = control->blocks[i][j];
 853:lvgl/src/misc/lv_tlsf.c **** 
 854:lvgl/src/misc/lv_tlsf.c ****             /* Check that first- and second-level lists agree. */
 855:lvgl/src/misc/lv_tlsf.c ****             if(!fl_map) {
 856:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(!sl_map && "second-level map must be null");
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 40


 857:lvgl/src/misc/lv_tlsf.c ****             }
 858:lvgl/src/misc/lv_tlsf.c **** 
 859:lvgl/src/misc/lv_tlsf.c ****             if(!sl_map) {
 860:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(block == &control->block_null && "block list must be null");
 861:lvgl/src/misc/lv_tlsf.c ****                 continue;
 862:lvgl/src/misc/lv_tlsf.c ****             }
 863:lvgl/src/misc/lv_tlsf.c **** 
 864:lvgl/src/misc/lv_tlsf.c ****             /* Check that there is at least one free block. */
 865:lvgl/src/misc/lv_tlsf.c ****             tlsf_insist(sl_list && "no free blocks in second-level map");
 866:lvgl/src/misc/lv_tlsf.c ****             tlsf_insist(block != &control->block_null && "block should not be null");
 867:lvgl/src/misc/lv_tlsf.c **** 
 868:lvgl/src/misc/lv_tlsf.c ****             while(block != &control->block_null) {
 869:lvgl/src/misc/lv_tlsf.c ****                 int fli, sli;
 870:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(block_is_free(block) && "block should be free");
 871:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(!block_is_prev_free(block) && "blocks should have coalesced");
 872:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(!block_is_free(block_next(block)) && "blocks should have coalesced");
 873:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(block_is_prev_free(block_next(block)) && "block should be free");
 874:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(block_size(block) >= block_size_min && "block not minimum size");
 875:lvgl/src/misc/lv_tlsf.c **** 
 876:lvgl/src/misc/lv_tlsf.c ****                 mapping_insert(block_size(block), &fli, &sli);
 877:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(fli == i && sli == j && "block size indexed in wrong list");
 878:lvgl/src/misc/lv_tlsf.c ****                 block = block->next_free;
 879:lvgl/src/misc/lv_tlsf.c ****             }
 880:lvgl/src/misc/lv_tlsf.c ****         }
 881:lvgl/src/misc/lv_tlsf.c ****     }
 882:lvgl/src/misc/lv_tlsf.c **** 
 883:lvgl/src/misc/lv_tlsf.c ****     return status;
 884:lvgl/src/misc/lv_tlsf.c **** }
 885:lvgl/src/misc/lv_tlsf.c **** 
 886:lvgl/src/misc/lv_tlsf.c **** #undef tlsf_insist
 887:lvgl/src/misc/lv_tlsf.c **** 
 888:lvgl/src/misc/lv_tlsf.c **** static void default_walker(void * ptr, size_t size, int used, void * user)
 889:lvgl/src/misc/lv_tlsf.c **** {
 1370              		.loc 1 889 1 is_stmt 1 view -0
 1371              		.cfi_startproc
 1372              		@ args = 0, pretend = 0, frame = 0
 1373              		@ frame_needed = 0, uses_anonymous_args = 0
 1374              		@ link register save eliminated.
 890:lvgl/src/misc/lv_tlsf.c ****     LV_UNUSED(user);
 1375              		.loc 1 890 5 view .LVU409
 891:lvgl/src/misc/lv_tlsf.c ****     printf("\t%p %s size: %x (%p)\n", ptr, used ? "used" : "free", (unsigned int)size, (void *)bloc
 1376              		.loc 1 891 5 view .LVU410
 1377              		.loc 1 891 5 view .LVU411
 1378              		.loc 1 891 5 view .LVU412
 892:lvgl/src/misc/lv_tlsf.c **** }
 1379              		.loc 1 892 1 is_stmt 0 view .LVU413
 1380 0000 7047     		bx	lr
 1381              		.cfi_endproc
 1382              	.LFE44:
 1384              		.section	.text.tlsf_fls,"ax",%progbits
 1385              		.align	1
 1386              		.syntax unified
 1387              		.thumb
 1388              		.thumb_func
 1390              	tlsf_fls:
 1391              	.LVL115:
 1392              	.LFB2:
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 41


 102:lvgl/src/misc/lv_tlsf.c ****     const int bit = word ? 32 - __builtin_clz(word) : 0;
 1393              		.loc 1 102 1 is_stmt 1 view -0
 1394              		.cfi_startproc
 1395              		@ args = 0, pretend = 0, frame = 0
 1396              		@ frame_needed = 0, uses_anonymous_args = 0
 1397              		@ link register save eliminated.
 103:lvgl/src/misc/lv_tlsf.c ****     return bit - 1;
 1398              		.loc 1 103 5 view .LVU415
 103:lvgl/src/misc/lv_tlsf.c ****     return bit - 1;
 1399              		.loc 1 103 53 is_stmt 0 view .LVU416
 1400 0000 28B1     		cbz	r0, .L87
 103:lvgl/src/misc/lv_tlsf.c ****     return bit - 1;
 1401              		.loc 1 103 33 discriminator 1 view .LVU417
 1402 0002 B0FA80F0 		clz	r0, r0
 1403              	.LVL116:
 103:lvgl/src/misc/lv_tlsf.c ****     return bit - 1;
 1404              		.loc 1 103 53 discriminator 1 view .LVU418
 1405 0006 C0F12000 		rsb	r0, r0, #32
 1406              	.L86:
 1407              	.LVL117:
 104:lvgl/src/misc/lv_tlsf.c **** }
 1408              		.loc 1 104 5 is_stmt 1 view .LVU419
 105:lvgl/src/misc/lv_tlsf.c **** 
 1409              		.loc 1 105 1 is_stmt 0 view .LVU420
 1410 000a 0138     		subs	r0, r0, #1
 1411              	.LVL118:
 105:lvgl/src/misc/lv_tlsf.c **** 
 1412              		.loc 1 105 1 view .LVU421
 1413 000c 7047     		bx	lr
 1414              	.LVL119:
 1415              	.L87:
 103:lvgl/src/misc/lv_tlsf.c ****     return bit - 1;
 1416              		.loc 1 103 53 discriminator 2 view .LVU422
 1417 000e 0020     		movs	r0, #0
 1418              	.LVL120:
 103:lvgl/src/misc/lv_tlsf.c ****     return bit - 1;
 1419              		.loc 1 103 53 discriminator 2 view .LVU423
 1420 0010 FBE7     		b	.L86
 1421              		.cfi_endproc
 1422              	.LFE2:
 1424              		.section	.text.mapping_insert,"ax",%progbits
 1425              		.align	1
 1426              		.syntax unified
 1427              		.thumb
 1428              		.thumb_func
 1430              	mapping_insert:
 1431              	.LVL121:
 1432              	.LFB24:
 529:lvgl/src/misc/lv_tlsf.c ****     int fl, sl;
 1433              		.loc 1 529 1 is_stmt 1 view -0
 1434              		.cfi_startproc
 1435              		@ args = 0, pretend = 0, frame = 0
 1436              		@ frame_needed = 0, uses_anonymous_args = 0
 529:lvgl/src/misc/lv_tlsf.c ****     int fl, sl;
 1437              		.loc 1 529 1 is_stmt 0 view .LVU425
 1438 0000 70B5     		push	{r4, r5, r6, lr}
 1439              	.LCFI13:
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 42


 1440              		.cfi_def_cfa_offset 16
 1441              		.cfi_offset 4, -16
 1442              		.cfi_offset 5, -12
 1443              		.cfi_offset 6, -8
 1444              		.cfi_offset 14, -4
 1445 0002 0446     		mov	r4, r0
 1446 0004 0D46     		mov	r5, r1
 1447 0006 1646     		mov	r6, r2
 530:lvgl/src/misc/lv_tlsf.c ****     if(size < SMALL_BLOCK_SIZE) {
 1448              		.loc 1 530 5 is_stmt 1 view .LVU426
 531:lvgl/src/misc/lv_tlsf.c ****         /* Store small blocks in first list. */
 1449              		.loc 1 531 5 view .LVU427
 531:lvgl/src/misc/lv_tlsf.c ****         /* Store small blocks in first list. */
 1450              		.loc 1 531 7 is_stmt 0 view .LVU428
 1451 0008 7F28     		cmp	r0, #127
 1452 000a 09D8     		bhi	.L89
 533:lvgl/src/misc/lv_tlsf.c ****         sl = tlsf_cast(int, size) / (SMALL_BLOCK_SIZE / SL_INDEX_COUNT);
 1453              		.loc 1 533 9 is_stmt 1 view .LVU429
 1454              	.LVL122:
 534:lvgl/src/misc/lv_tlsf.c ****     }
 1455              		.loc 1 534 9 view .LVU430
 534:lvgl/src/misc/lv_tlsf.c ****     }
 1456              		.loc 1 534 12 is_stmt 0 view .LVU431
 1457 000c 0346     		mov	r3, r0
 1458 000e 0028     		cmp	r0, #0
 1459 0010 04DB     		blt	.L93
 1460              	.L90:
 534:lvgl/src/misc/lv_tlsf.c ****     }
 1461              		.loc 1 534 12 view .LVU432
 1462 0012 9C10     		asrs	r4, r3, #2
 1463              	.LVL123:
 533:lvgl/src/misc/lv_tlsf.c ****         sl = tlsf_cast(int, size) / (SMALL_BLOCK_SIZE / SL_INDEX_COUNT);
 1464              		.loc 1 533 12 view .LVU433
 1465 0014 0020     		movs	r0, #0
 1466              	.LVL124:
 1467              	.L91:
 541:lvgl/src/misc/lv_tlsf.c ****     *sli = sl;
 1468              		.loc 1 541 5 is_stmt 1 view .LVU434
 541:lvgl/src/misc/lv_tlsf.c ****     *sli = sl;
 1469              		.loc 1 541 10 is_stmt 0 view .LVU435
 1470 0016 2860     		str	r0, [r5]
 542:lvgl/src/misc/lv_tlsf.c **** }
 1471              		.loc 1 542 5 is_stmt 1 view .LVU436
 542:lvgl/src/misc/lv_tlsf.c **** }
 1472              		.loc 1 542 10 is_stmt 0 view .LVU437
 1473 0018 3460     		str	r4, [r6]
 543:lvgl/src/misc/lv_tlsf.c **** 
 1474              		.loc 1 543 1 view .LVU438
 1475 001a 70BD     		pop	{r4, r5, r6, pc}
 1476              	.LVL125:
 1477              	.L93:
 534:lvgl/src/misc/lv_tlsf.c ****     }
 1478              		.loc 1 534 12 view .LVU439
 1479 001c C31C     		adds	r3, r0, #3
 1480 001e F8E7     		b	.L90
 1481              	.LVL126:
 1482              	.L89:
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 43


 537:lvgl/src/misc/lv_tlsf.c ****         sl = tlsf_cast(int, size >> (fl - SL_INDEX_COUNT_LOG2)) ^ (1 << SL_INDEX_COUNT_LOG2);
 1483              		.loc 1 537 9 is_stmt 1 view .LVU440
 537:lvgl/src/misc/lv_tlsf.c ****         sl = tlsf_cast(int, size >> (fl - SL_INDEX_COUNT_LOG2)) ^ (1 << SL_INDEX_COUNT_LOG2);
 1484              		.loc 1 537 14 is_stmt 0 view .LVU441
 1485 0020 FFF7FEFF 		bl	tlsf_fls
 1486              	.LVL127:
 538:lvgl/src/misc/lv_tlsf.c ****         fl -= (FL_INDEX_SHIFT - 1);
 1487              		.loc 1 538 9 is_stmt 1 view .LVU442
 538:lvgl/src/misc/lv_tlsf.c ****         fl -= (FL_INDEX_SHIFT - 1);
 1488              		.loc 1 538 14 is_stmt 0 view .LVU443
 1489 0024 431F     		subs	r3, r0, #5
 1490 0026 DC40     		lsrs	r4, r4, r3
 1491              	.LVL128:
 538:lvgl/src/misc/lv_tlsf.c ****         fl -= (FL_INDEX_SHIFT - 1);
 1492              		.loc 1 538 12 view .LVU444
 1493 0028 84F02004 		eor	r4, r4, #32
 1494              	.LVL129:
 539:lvgl/src/misc/lv_tlsf.c ****     }
 1495              		.loc 1 539 9 is_stmt 1 view .LVU445
 539:lvgl/src/misc/lv_tlsf.c ****     }
 1496              		.loc 1 539 12 is_stmt 0 view .LVU446
 1497 002c 0638     		subs	r0, r0, #6
 1498              	.LVL130:
 539:lvgl/src/misc/lv_tlsf.c ****     }
 1499              		.loc 1 539 12 view .LVU447
 1500 002e F2E7     		b	.L91
 1501              		.cfi_endproc
 1502              	.LFE24:
 1504              		.section	.text.block_insert,"ax",%progbits
 1505              		.align	1
 1506              		.syntax unified
 1507              		.thumb
 1508              		.thumb_func
 1510              	block_insert:
 1511              	.LVL131:
 1512              	.LFB30:
 642:lvgl/src/misc/lv_tlsf.c ****     int fl, sl;
 1513              		.loc 1 642 1 is_stmt 1 view -0
 1514              		.cfi_startproc
 1515              		@ args = 0, pretend = 0, frame = 8
 1516              		@ frame_needed = 0, uses_anonymous_args = 0
 642:lvgl/src/misc/lv_tlsf.c ****     int fl, sl;
 1517              		.loc 1 642 1 is_stmt 0 view .LVU449
 1518 0000 30B5     		push	{r4, r5, lr}
 1519              	.LCFI14:
 1520              		.cfi_def_cfa_offset 12
 1521              		.cfi_offset 4, -12
 1522              		.cfi_offset 5, -8
 1523              		.cfi_offset 14, -4
 1524 0002 83B0     		sub	sp, sp, #12
 1525              	.LCFI15:
 1526              		.cfi_def_cfa_offset 24
 1527 0004 0546     		mov	r5, r0
 1528 0006 0C46     		mov	r4, r1
 643:lvgl/src/misc/lv_tlsf.c ****     mapping_insert(block_size(block), &fl, &sl);
 1529              		.loc 1 643 5 is_stmt 1 view .LVU450
 644:lvgl/src/misc/lv_tlsf.c ****     insert_free_block(control, block, fl, sl);
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 44


 1530              		.loc 1 644 5 view .LVU451
 1531 0008 0846     		mov	r0, r1
 1532              	.LVL132:
 644:lvgl/src/misc/lv_tlsf.c ****     insert_free_block(control, block, fl, sl);
 1533              		.loc 1 644 5 is_stmt 0 view .LVU452
 1534 000a FFF7FEFF 		bl	block_size
 1535              	.LVL133:
 644:lvgl/src/misc/lv_tlsf.c ****     insert_free_block(control, block, fl, sl);
 1536              		.loc 1 644 5 discriminator 1 view .LVU453
 1537 000e 6A46     		mov	r2, sp
 1538 0010 01A9     		add	r1, sp, #4
 1539 0012 FFF7FEFF 		bl	mapping_insert
 1540              	.LVL134:
 645:lvgl/src/misc/lv_tlsf.c **** }
 1541              		.loc 1 645 5 is_stmt 1 view .LVU454
 1542 0016 009B     		ldr	r3, [sp]
 1543 0018 019A     		ldr	r2, [sp, #4]
 1544 001a 2146     		mov	r1, r4
 1545 001c 2846     		mov	r0, r5
 1546 001e FFF7FEFF 		bl	insert_free_block
 1547              	.LVL135:
 646:lvgl/src/misc/lv_tlsf.c **** 
 1548              		.loc 1 646 1 is_stmt 0 view .LVU455
 1549 0022 03B0     		add	sp, sp, #12
 1550              	.LCFI16:
 1551              		.cfi_def_cfa_offset 12
 1552              		@ sp needed
 1553 0024 30BD     		pop	{r4, r5, pc}
 646:lvgl/src/misc/lv_tlsf.c **** 
 1554              		.loc 1 646 1 view .LVU456
 1555              		.cfi_endproc
 1556              	.LFE30:
 1558              		.section	.text.block_trim_free,"ax",%progbits
 1559              		.align	1
 1560              		.syntax unified
 1561              		.thumb
 1562              		.thumb_func
 1564              	block_trim_free:
 1565              	.LVL136:
 1566              	.LFB36:
 716:lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(block_is_free(block) && "block must be free");
 1567              		.loc 1 716 1 is_stmt 1 view -0
 1568              		.cfi_startproc
 1569              		@ args = 0, pretend = 0, frame = 0
 1570              		@ frame_needed = 0, uses_anonymous_args = 0
 716:lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(block_is_free(block) && "block must be free");
 1571              		.loc 1 716 1 is_stmt 0 view .LVU458
 1572 0000 70B5     		push	{r4, r5, r6, lr}
 1573              	.LCFI17:
 1574              		.cfi_def_cfa_offset 16
 1575              		.cfi_offset 4, -16
 1576              		.cfi_offset 5, -12
 1577              		.cfi_offset 6, -8
 1578              		.cfi_offset 14, -4
 1579 0002 0646     		mov	r6, r0
 1580 0004 0C46     		mov	r4, r1
 1581 0006 1546     		mov	r5, r2
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 45


 717:lvgl/src/misc/lv_tlsf.c ****     if(block_can_split(block, size)) {
 1582              		.loc 1 717 5 is_stmt 1 view .LVU459
 717:lvgl/src/misc/lv_tlsf.c ****     if(block_can_split(block, size)) {
 1583              		.loc 1 717 5 view .LVU460
 1584 0008 0846     		mov	r0, r1
 1585              	.LVL137:
 717:lvgl/src/misc/lv_tlsf.c ****     if(block_can_split(block, size)) {
 1586              		.loc 1 717 5 is_stmt 0 view .LVU461
 1587 000a FFF7FEFF 		bl	block_is_free
 1588              	.LVL138:
 717:lvgl/src/misc/lv_tlsf.c ****     if(block_can_split(block, size)) {
 1589              		.loc 1 717 5 discriminator 1 view .LVU462
 1590 000e 00B9     		cbnz	r0, .L97
 1591              	.L98:
 717:lvgl/src/misc/lv_tlsf.c ****     if(block_can_split(block, size)) {
 1592              		.loc 1 717 5 is_stmt 1 discriminator 3 view .LVU463
 717:lvgl/src/misc/lv_tlsf.c ****     if(block_can_split(block, size)) {
 1593              		.loc 1 717 5 discriminator 3 view .LVU464
 717:lvgl/src/misc/lv_tlsf.c ****     if(block_can_split(block, size)) {
 1594              		.loc 1 717 5 discriminator 3 view .LVU465
 717:lvgl/src/misc/lv_tlsf.c ****     if(block_can_split(block, size)) {
 1595              		.loc 1 717 5 discriminator 3 view .LVU466
 717:lvgl/src/misc/lv_tlsf.c ****     if(block_can_split(block, size)) {
 1596              		.loc 1 717 5 discriminator 3 view .LVU467
 1597 0010 FEE7     		b	.L98
 1598              	.L97:
 717:lvgl/src/misc/lv_tlsf.c ****     if(block_can_split(block, size)) {
 1599              		.loc 1 717 5 discriminator 4 view .LVU468
 718:lvgl/src/misc/lv_tlsf.c ****         block_header_t * remaining_block = block_split(block, size);
 1600              		.loc 1 718 5 view .LVU469
 718:lvgl/src/misc/lv_tlsf.c ****         block_header_t * remaining_block = block_split(block, size);
 1601              		.loc 1 718 8 is_stmt 0 view .LVU470
 1602 0012 2946     		mov	r1, r5
 1603 0014 2046     		mov	r0, r4
 1604 0016 FFF7FEFF 		bl	block_can_split
 1605              	.LVL139:
 718:lvgl/src/misc/lv_tlsf.c ****         block_header_t * remaining_block = block_split(block, size);
 1606              		.loc 1 718 7 discriminator 1 view .LVU471
 1607 001a 00B9     		cbnz	r0, .L101
 1608              	.LVL140:
 1609              	.L96:
 724:lvgl/src/misc/lv_tlsf.c **** 
 1610              		.loc 1 724 1 view .LVU472
 1611 001c 70BD     		pop	{r4, r5, r6, pc}
 1612              	.LVL141:
 1613              	.L101:
 1614              	.LBB3:
 719:lvgl/src/misc/lv_tlsf.c ****         block_link_next(block);
 1615              		.loc 1 719 9 is_stmt 1 view .LVU473
 719:lvgl/src/misc/lv_tlsf.c ****         block_link_next(block);
 1616              		.loc 1 719 44 is_stmt 0 view .LVU474
 1617 001e 2946     		mov	r1, r5
 1618 0020 2046     		mov	r0, r4
 1619 0022 FFF7FEFF 		bl	block_split
 1620              	.LVL142:
 1621 0026 0546     		mov	r5, r0
 1622              	.LVL143:
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 46


 720:lvgl/src/misc/lv_tlsf.c ****         block_set_prev_free(remaining_block);
 1623              		.loc 1 720 9 is_stmt 1 view .LVU475
 1624 0028 2046     		mov	r0, r4
 1625              	.LVL144:
 720:lvgl/src/misc/lv_tlsf.c ****         block_set_prev_free(remaining_block);
 1626              		.loc 1 720 9 is_stmt 0 view .LVU476
 1627 002a FFF7FEFF 		bl	block_link_next
 1628              	.LVL145:
 721:lvgl/src/misc/lv_tlsf.c ****         block_insert(control, remaining_block);
 1629              		.loc 1 721 9 is_stmt 1 view .LVU477
 1630 002e 2846     		mov	r0, r5
 1631 0030 FFF7FEFF 		bl	block_set_prev_free
 1632              	.LVL146:
 722:lvgl/src/misc/lv_tlsf.c ****     }
 1633              		.loc 1 722 9 view .LVU478
 1634 0034 2946     		mov	r1, r5
 1635 0036 3046     		mov	r0, r6
 1636 0038 FFF7FEFF 		bl	block_insert
 1637              	.LVL147:
 1638              	.LBE3:
 724:lvgl/src/misc/lv_tlsf.c **** 
 1639              		.loc 1 724 1 is_stmt 0 view .LVU479
 1640 003c EEE7     		b	.L96
 1641              		.cfi_endproc
 1642              	.LFE36:
 1644              		.section	.text.block_prepare_used,"ax",%progbits
 1645              		.align	1
 1646              		.syntax unified
 1647              		.thumb
 1648              		.thumb_func
 1650              	block_prepare_used:
 1651              	.LVL148:
 1652              	.LFB40:
 783:lvgl/src/misc/lv_tlsf.c ****     void * p = 0;
 1653              		.loc 1 783 1 is_stmt 1 view -0
 1654              		.cfi_startproc
 1655              		@ args = 0, pretend = 0, frame = 0
 1656              		@ frame_needed = 0, uses_anonymous_args = 0
 783:lvgl/src/misc/lv_tlsf.c ****     void * p = 0;
 1657              		.loc 1 783 1 is_stmt 0 view .LVU481
 1658 0000 10B5     		push	{r4, lr}
 1659              	.LCFI18:
 1660              		.cfi_def_cfa_offset 8
 1661              		.cfi_offset 4, -8
 1662              		.cfi_offset 14, -4
 784:lvgl/src/misc/lv_tlsf.c ****     if(block) {
 1663              		.loc 1 784 5 is_stmt 1 view .LVU482
 1664              	.LVL149:
 785:lvgl/src/misc/lv_tlsf.c ****         tlsf_assert(size && "size must be non-zero");
 1665              		.loc 1 785 5 view .LVU483
 785:lvgl/src/misc/lv_tlsf.c ****         tlsf_assert(size && "size must be non-zero");
 1666              		.loc 1 785 7 is_stmt 0 view .LVU484
 1667 0002 0C46     		mov	r4, r1
 1668 0004 51B1     		cbz	r1, .L106
 786:lvgl/src/misc/lv_tlsf.c ****         block_trim_free(control, block, size);
 1669              		.loc 1 786 9 is_stmt 1 view .LVU485
 786:lvgl/src/misc/lv_tlsf.c ****         block_trim_free(control, block, size);
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 47


 1670              		.loc 1 786 9 view .LVU486
 1671 0006 02B9     		cbnz	r2, .L104
 1672              	.L105:
 786:lvgl/src/misc/lv_tlsf.c ****         block_trim_free(control, block, size);
 1673              		.loc 1 786 9 discriminator 1 view .LVU487
 786:lvgl/src/misc/lv_tlsf.c ****         block_trim_free(control, block, size);
 1674              		.loc 1 786 9 discriminator 1 view .LVU488
 786:lvgl/src/misc/lv_tlsf.c ****         block_trim_free(control, block, size);
 1675              		.loc 1 786 9 discriminator 1 view .LVU489
 786:lvgl/src/misc/lv_tlsf.c ****         block_trim_free(control, block, size);
 1676              		.loc 1 786 9 discriminator 1 view .LVU490
 786:lvgl/src/misc/lv_tlsf.c ****         block_trim_free(control, block, size);
 1677              		.loc 1 786 9 discriminator 1 view .LVU491
 1678 0008 FEE7     		b	.L105
 1679              	.L104:
 786:lvgl/src/misc/lv_tlsf.c ****         block_trim_free(control, block, size);
 1680              		.loc 1 786 9 discriminator 2 view .LVU492
 787:lvgl/src/misc/lv_tlsf.c ****         block_mark_as_used(block);
 1681              		.loc 1 787 9 view .LVU493
 1682 000a FFF7FEFF 		bl	block_trim_free
 1683              	.LVL150:
 788:lvgl/src/misc/lv_tlsf.c ****         p = block_to_ptr(block);
 1684              		.loc 1 788 9 view .LVU494
 1685 000e 2046     		mov	r0, r4
 1686 0010 FFF7FEFF 		bl	block_mark_as_used
 1687              	.LVL151:
 789:lvgl/src/misc/lv_tlsf.c ****     }
 1688              		.loc 1 789 9 view .LVU495
 789:lvgl/src/misc/lv_tlsf.c ****     }
 1689              		.loc 1 789 13 is_stmt 0 view .LVU496
 1690 0014 2046     		mov	r0, r4
 1691 0016 FFF7FEFF 		bl	block_to_ptr
 1692              	.LVL152:
 1693              	.L102:
 792:lvgl/src/misc/lv_tlsf.c **** 
 1694              		.loc 1 792 1 view .LVU497
 1695 001a 10BD     		pop	{r4, pc}
 1696              	.LVL153:
 1697              	.L106:
 784:lvgl/src/misc/lv_tlsf.c ****     if(block) {
 1698              		.loc 1 784 12 view .LVU498
 1699 001c 0846     		mov	r0, r1
 1700              	.LVL154:
 791:lvgl/src/misc/lv_tlsf.c **** }
 1701              		.loc 1 791 5 is_stmt 1 view .LVU499
 791:lvgl/src/misc/lv_tlsf.c **** }
 1702              		.loc 1 791 12 is_stmt 0 view .LVU500
 1703 001e FCE7     		b	.L102
 1704              		.cfi_endproc
 1705              	.LFE40:
 1707              		.section	.text.block_trim_free_leading,"ax",%progbits
 1708              		.align	1
 1709              		.syntax unified
 1710              		.thumb
 1711              		.thumb_func
 1713              	block_trim_free_leading:
 1714              	.LVL155:
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 48


 1715              	.LFB38:
 741:lvgl/src/misc/lv_tlsf.c ****     block_header_t * remaining_block = block;
 1716              		.loc 1 741 1 is_stmt 1 view -0
 1717              		.cfi_startproc
 1718              		@ args = 0, pretend = 0, frame = 0
 1719              		@ frame_needed = 0, uses_anonymous_args = 0
 741:lvgl/src/misc/lv_tlsf.c ****     block_header_t * remaining_block = block;
 1720              		.loc 1 741 1 is_stmt 0 view .LVU502
 1721 0000 70B5     		push	{r4, r5, r6, lr}
 1722              	.LCFI19:
 1723              		.cfi_def_cfa_offset 16
 1724              		.cfi_offset 4, -16
 1725              		.cfi_offset 5, -12
 1726              		.cfi_offset 6, -8
 1727              		.cfi_offset 14, -4
 1728 0002 0646     		mov	r6, r0
 1729 0004 0C46     		mov	r4, r1
 1730 0006 1546     		mov	r5, r2
 742:lvgl/src/misc/lv_tlsf.c ****     if(block_can_split(block, size)) {
 1731              		.loc 1 742 5 is_stmt 1 view .LVU503
 1732              	.LVL156:
 743:lvgl/src/misc/lv_tlsf.c ****         /* We want the 2nd block. */
 1733              		.loc 1 743 5 view .LVU504
 743:lvgl/src/misc/lv_tlsf.c ****         /* We want the 2nd block. */
 1734              		.loc 1 743 8 is_stmt 0 view .LVU505
 1735 0008 1146     		mov	r1, r2
 1736              	.LVL157:
 743:lvgl/src/misc/lv_tlsf.c ****         /* We want the 2nd block. */
 1737              		.loc 1 743 8 view .LVU506
 1738 000a 2046     		mov	r0, r4
 1739              	.LVL158:
 743:lvgl/src/misc/lv_tlsf.c ****         /* We want the 2nd block. */
 1740              		.loc 1 743 8 view .LVU507
 1741 000c FFF7FEFF 		bl	block_can_split
 1742              	.LVL159:
 743:lvgl/src/misc/lv_tlsf.c ****         /* We want the 2nd block. */
 1743              		.loc 1 743 7 discriminator 1 view .LVU508
 1744 0010 08B9     		cbnz	r0, .L111
 1745              	.LVL160:
 1746              	.L109:
 752:lvgl/src/misc/lv_tlsf.c **** }
 1747              		.loc 1 752 5 is_stmt 1 view .LVU509
 753:lvgl/src/misc/lv_tlsf.c **** 
 1748              		.loc 1 753 1 is_stmt 0 view .LVU510
 1749 0012 2046     		mov	r0, r4
 1750 0014 70BD     		pop	{r4, r5, r6, pc}
 1751              	.LVL161:
 1752              	.L111:
 745:lvgl/src/misc/lv_tlsf.c ****         block_set_prev_free(remaining_block);
 1753              		.loc 1 745 9 is_stmt 1 view .LVU511
 745:lvgl/src/misc/lv_tlsf.c ****         block_set_prev_free(remaining_block);
 1754              		.loc 1 745 27 is_stmt 0 view .LVU512
 1755 0016 291F     		subs	r1, r5, #4
 1756 0018 2046     		mov	r0, r4
 1757 001a FFF7FEFF 		bl	block_split
 1758              	.LVL162:
 1759 001e 0546     		mov	r5, r0
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 49


 1760              	.LVL163:
 746:lvgl/src/misc/lv_tlsf.c **** 
 1761              		.loc 1 746 9 is_stmt 1 view .LVU513
 1762 0020 FFF7FEFF 		bl	block_set_prev_free
 1763              	.LVL164:
 748:lvgl/src/misc/lv_tlsf.c ****         block_insert(control, block);
 1764              		.loc 1 748 9 view .LVU514
 1765 0024 2046     		mov	r0, r4
 1766 0026 FFF7FEFF 		bl	block_link_next
 1767              	.LVL165:
 749:lvgl/src/misc/lv_tlsf.c ****     }
 1768              		.loc 1 749 9 view .LVU515
 1769 002a 2146     		mov	r1, r4
 1770 002c 3046     		mov	r0, r6
 1771 002e FFF7FEFF 		bl	block_insert
 1772              	.LVL166:
 745:lvgl/src/misc/lv_tlsf.c ****         block_set_prev_free(remaining_block);
 1773              		.loc 1 745 27 is_stmt 0 view .LVU516
 1774 0032 2C46     		mov	r4, r5
 1775              	.LVL167:
 745:lvgl/src/misc/lv_tlsf.c ****         block_set_prev_free(remaining_block);
 1776              		.loc 1 745 27 view .LVU517
 1777 0034 EDE7     		b	.L109
 1778              		.cfi_endproc
 1779              	.LFE38:
 1781              		.section	.text.block_remove,"ax",%progbits
 1782              		.align	1
 1783              		.syntax unified
 1784              		.thumb
 1785              		.thumb_func
 1787              	block_remove:
 1788              	.LVL168:
 1789              	.LFB29:
 634:lvgl/src/misc/lv_tlsf.c ****     int fl, sl;
 1790              		.loc 1 634 1 is_stmt 1 view -0
 1791              		.cfi_startproc
 1792              		@ args = 0, pretend = 0, frame = 8
 1793              		@ frame_needed = 0, uses_anonymous_args = 0
 634:lvgl/src/misc/lv_tlsf.c ****     int fl, sl;
 1794              		.loc 1 634 1 is_stmt 0 view .LVU519
 1795 0000 30B5     		push	{r4, r5, lr}
 1796              	.LCFI20:
 1797              		.cfi_def_cfa_offset 12
 1798              		.cfi_offset 4, -12
 1799              		.cfi_offset 5, -8
 1800              		.cfi_offset 14, -4
 1801 0002 83B0     		sub	sp, sp, #12
 1802              	.LCFI21:
 1803              		.cfi_def_cfa_offset 24
 1804 0004 0546     		mov	r5, r0
 1805 0006 0C46     		mov	r4, r1
 635:lvgl/src/misc/lv_tlsf.c ****     mapping_insert(block_size(block), &fl, &sl);
 1806              		.loc 1 635 5 is_stmt 1 view .LVU520
 636:lvgl/src/misc/lv_tlsf.c ****     remove_free_block(control, block, fl, sl);
 1807              		.loc 1 636 5 view .LVU521
 1808 0008 0846     		mov	r0, r1
 1809              	.LVL169:
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 50


 636:lvgl/src/misc/lv_tlsf.c ****     remove_free_block(control, block, fl, sl);
 1810              		.loc 1 636 5 is_stmt 0 view .LVU522
 1811 000a FFF7FEFF 		bl	block_size
 1812              	.LVL170:
 636:lvgl/src/misc/lv_tlsf.c ****     remove_free_block(control, block, fl, sl);
 1813              		.loc 1 636 5 discriminator 1 view .LVU523
 1814 000e 6A46     		mov	r2, sp
 1815 0010 01A9     		add	r1, sp, #4
 1816 0012 FFF7FEFF 		bl	mapping_insert
 1817              	.LVL171:
 637:lvgl/src/misc/lv_tlsf.c **** }
 1818              		.loc 1 637 5 is_stmt 1 view .LVU524
 1819 0016 009B     		ldr	r3, [sp]
 1820 0018 019A     		ldr	r2, [sp, #4]
 1821 001a 2146     		mov	r1, r4
 1822 001c 2846     		mov	r0, r5
 1823 001e FFF7FEFF 		bl	remove_free_block
 1824              	.LVL172:
 638:lvgl/src/misc/lv_tlsf.c **** 
 1825              		.loc 1 638 1 is_stmt 0 view .LVU525
 1826 0022 03B0     		add	sp, sp, #12
 1827              	.LCFI22:
 1828              		.cfi_def_cfa_offset 12
 1829              		@ sp needed
 1830 0024 30BD     		pop	{r4, r5, pc}
 638:lvgl/src/misc/lv_tlsf.c **** 
 1831              		.loc 1 638 1 view .LVU526
 1832              		.cfi_endproc
 1833              	.LFE29:
 1835              		.section	.text.block_merge_prev,"ax",%progbits
 1836              		.align	1
 1837              		.syntax unified
 1838              		.thumb
 1839              		.thumb_func
 1841              	block_merge_prev:
 1842              	.LVL173:
 1843              	.LFB34:
 687:lvgl/src/misc/lv_tlsf.c ****     if(block_is_prev_free(block)) {
 1844              		.loc 1 687 1 is_stmt 1 view -0
 1845              		.cfi_startproc
 1846              		@ args = 0, pretend = 0, frame = 0
 1847              		@ frame_needed = 0, uses_anonymous_args = 0
 687:lvgl/src/misc/lv_tlsf.c ****     if(block_is_prev_free(block)) {
 1848              		.loc 1 687 1 is_stmt 0 view .LVU528
 1849 0000 70B5     		push	{r4, r5, r6, lr}
 1850              	.LCFI23:
 1851              		.cfi_def_cfa_offset 16
 1852              		.cfi_offset 4, -16
 1853              		.cfi_offset 5, -12
 1854              		.cfi_offset 6, -8
 1855              		.cfi_offset 14, -4
 1856 0002 0546     		mov	r5, r0
 1857 0004 0C46     		mov	r4, r1
 688:lvgl/src/misc/lv_tlsf.c ****         block_header_t * prev = block_prev(block);
 1858              		.loc 1 688 5 is_stmt 1 view .LVU529
 688:lvgl/src/misc/lv_tlsf.c ****         block_header_t * prev = block_prev(block);
 1859              		.loc 1 688 8 is_stmt 0 view .LVU530
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 51


 1860 0006 0846     		mov	r0, r1
 1861              	.LVL174:
 688:lvgl/src/misc/lv_tlsf.c ****         block_header_t * prev = block_prev(block);
 1862              		.loc 1 688 8 view .LVU531
 1863 0008 FFF7FEFF 		bl	block_is_prev_free
 1864              	.LVL175:
 688:lvgl/src/misc/lv_tlsf.c ****         block_header_t * prev = block_prev(block);
 1865              		.loc 1 688 7 discriminator 1 view .LVU532
 1866 000c 08B9     		cbnz	r0, .L121
 1867              	.L115:
 696:lvgl/src/misc/lv_tlsf.c **** }
 1868              		.loc 1 696 5 is_stmt 1 view .LVU533
 697:lvgl/src/misc/lv_tlsf.c **** 
 1869              		.loc 1 697 1 is_stmt 0 view .LVU534
 1870 000e 2046     		mov	r0, r4
 1871 0010 70BD     		pop	{r4, r5, r6, pc}
 1872              	.LVL176:
 1873              	.L121:
 1874              	.LBB4:
 689:lvgl/src/misc/lv_tlsf.c ****         tlsf_assert(prev && "prev physical block can't be null");
 1875              		.loc 1 689 9 is_stmt 1 view .LVU535
 689:lvgl/src/misc/lv_tlsf.c ****         tlsf_assert(prev && "prev physical block can't be null");
 1876              		.loc 1 689 33 is_stmt 0 view .LVU536
 1877 0012 2046     		mov	r0, r4
 1878 0014 FFF7FEFF 		bl	block_prev
 1879              	.LVL177:
 690:lvgl/src/misc/lv_tlsf.c ****         tlsf_assert(block_is_free(prev) && "prev block is not free though marked as such");
 1880              		.loc 1 690 9 is_stmt 1 view .LVU537
 690:lvgl/src/misc/lv_tlsf.c ****         tlsf_assert(block_is_free(prev) && "prev block is not free though marked as such");
 1881              		.loc 1 690 9 view .LVU538
 1882 0018 0646     		mov	r6, r0
 1883 001a 18B1     		cbz	r0, .L117
 690:lvgl/src/misc/lv_tlsf.c ****         tlsf_assert(block_is_free(prev) && "prev block is not free though marked as such");
 1884              		.loc 1 690 9 discriminator 2 view .LVU539
 691:lvgl/src/misc/lv_tlsf.c ****         block_remove(control, prev);
 1885              		.loc 1 691 9 view .LVU540
 691:lvgl/src/misc/lv_tlsf.c ****         block_remove(control, prev);
 1886              		.loc 1 691 9 view .LVU541
 1887 001c FFF7FEFF 		bl	block_is_free
 1888              	.LVL178:
 691:lvgl/src/misc/lv_tlsf.c ****         block_remove(control, prev);
 1889              		.loc 1 691 9 is_stmt 0 discriminator 1 view .LVU542
 1890 0020 08B9     		cbnz	r0, .L118
 1891              	.L119:
 691:lvgl/src/misc/lv_tlsf.c ****         block_remove(control, prev);
 1892              		.loc 1 691 9 is_stmt 1 discriminator 3 view .LVU543
 691:lvgl/src/misc/lv_tlsf.c ****         block_remove(control, prev);
 1893              		.loc 1 691 9 discriminator 3 view .LVU544
 691:lvgl/src/misc/lv_tlsf.c ****         block_remove(control, prev);
 1894              		.loc 1 691 9 discriminator 3 view .LVU545
 691:lvgl/src/misc/lv_tlsf.c ****         block_remove(control, prev);
 1895              		.loc 1 691 9 discriminator 3 view .LVU546
 691:lvgl/src/misc/lv_tlsf.c ****         block_remove(control, prev);
 1896              		.loc 1 691 9 discriminator 3 view .LVU547
 1897 0022 FEE7     		b	.L119
 1898              	.LVL179:
 1899              	.L117:
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 52


 690:lvgl/src/misc/lv_tlsf.c ****         tlsf_assert(block_is_free(prev) && "prev block is not free though marked as such");
 1900              		.loc 1 690 9 discriminator 1 view .LVU548
 690:lvgl/src/misc/lv_tlsf.c ****         tlsf_assert(block_is_free(prev) && "prev block is not free though marked as such");
 1901              		.loc 1 690 9 discriminator 1 view .LVU549
 690:lvgl/src/misc/lv_tlsf.c ****         tlsf_assert(block_is_free(prev) && "prev block is not free though marked as such");
 1902              		.loc 1 690 9 discriminator 1 view .LVU550
 690:lvgl/src/misc/lv_tlsf.c ****         tlsf_assert(block_is_free(prev) && "prev block is not free though marked as such");
 1903              		.loc 1 690 9 discriminator 1 view .LVU551
 690:lvgl/src/misc/lv_tlsf.c ****         tlsf_assert(block_is_free(prev) && "prev block is not free though marked as such");
 1904              		.loc 1 690 9 discriminator 1 view .LVU552
 1905 0024 FEE7     		b	.L117
 1906              	.LVL180:
 1907              	.L118:
 691:lvgl/src/misc/lv_tlsf.c ****         block_remove(control, prev);
 1908              		.loc 1 691 9 discriminator 4 view .LVU553
 692:lvgl/src/misc/lv_tlsf.c ****         block = block_absorb(prev, block);
 1909              		.loc 1 692 9 view .LVU554
 1910 0026 3146     		mov	r1, r6
 1911 0028 2846     		mov	r0, r5
 1912 002a FFF7FEFF 		bl	block_remove
 1913              	.LVL181:
 693:lvgl/src/misc/lv_tlsf.c ****     }
 1914              		.loc 1 693 9 view .LVU555
 693:lvgl/src/misc/lv_tlsf.c ****     }
 1915              		.loc 1 693 17 is_stmt 0 view .LVU556
 1916 002e 2146     		mov	r1, r4
 1917 0030 3046     		mov	r0, r6
 1918 0032 FFF7FEFF 		bl	block_absorb
 1919              	.LVL182:
 1920 0036 0446     		mov	r4, r0
 1921              	.LVL183:
 693:lvgl/src/misc/lv_tlsf.c ****     }
 1922              		.loc 1 693 17 view .LVU557
 1923 0038 E9E7     		b	.L115
 1924              	.LBE4:
 1925              		.cfi_endproc
 1926              	.LFE34:
 1928              		.section	.text.block_merge_next,"ax",%progbits
 1929              		.align	1
 1930              		.syntax unified
 1931              		.thumb
 1932              		.thumb_func
 1934              	block_merge_next:
 1935              	.LVL184:
 1936              	.LFB35:
 701:lvgl/src/misc/lv_tlsf.c ****     block_header_t * next = block_next(block);
 1937              		.loc 1 701 1 is_stmt 1 view -0
 1938              		.cfi_startproc
 1939              		@ args = 0, pretend = 0, frame = 0
 1940              		@ frame_needed = 0, uses_anonymous_args = 0
 701:lvgl/src/misc/lv_tlsf.c ****     block_header_t * next = block_next(block);
 1941              		.loc 1 701 1 is_stmt 0 view .LVU559
 1942 0000 70B5     		push	{r4, r5, r6, lr}
 1943              	.LCFI24:
 1944              		.cfi_def_cfa_offset 16
 1945              		.cfi_offset 4, -16
 1946              		.cfi_offset 5, -12
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 53


 1947              		.cfi_offset 6, -8
 1948              		.cfi_offset 14, -4
 1949 0002 0546     		mov	r5, r0
 1950 0004 0C46     		mov	r4, r1
 702:lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(next && "next physical block can't be null");
 1951              		.loc 1 702 5 is_stmt 1 view .LVU560
 702:lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(next && "next physical block can't be null");
 1952              		.loc 1 702 29 is_stmt 0 view .LVU561
 1953 0006 0846     		mov	r0, r1
 1954              	.LVL185:
 702:lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(next && "next physical block can't be null");
 1955              		.loc 1 702 29 view .LVU562
 1956 0008 FFF7FEFF 		bl	block_next
 1957              	.LVL186:
 703:lvgl/src/misc/lv_tlsf.c **** 
 1958              		.loc 1 703 5 is_stmt 1 view .LVU563
 703:lvgl/src/misc/lv_tlsf.c **** 
 1959              		.loc 1 703 5 view .LVU564
 1960 000c 40B1     		cbz	r0, .L124
 1961 000e 0646     		mov	r6, r0
 703:lvgl/src/misc/lv_tlsf.c **** 
 1962              		.loc 1 703 5 discriminator 2 view .LVU565
 705:lvgl/src/misc/lv_tlsf.c ****         tlsf_assert(!block_is_last(block) && "previous block can't be last");
 1963              		.loc 1 705 5 view .LVU566
 705:lvgl/src/misc/lv_tlsf.c ****         tlsf_assert(!block_is_last(block) && "previous block can't be last");
 1964              		.loc 1 705 8 is_stmt 0 view .LVU567
 1965 0010 FFF7FEFF 		bl	block_is_free
 1966              	.LVL187:
 705:lvgl/src/misc/lv_tlsf.c ****         tlsf_assert(!block_is_last(block) && "previous block can't be last");
 1967              		.loc 1 705 7 discriminator 1 view .LVU568
 1968 0014 70B1     		cbz	r0, .L125
 706:lvgl/src/misc/lv_tlsf.c ****         block_remove(control, next);
 1969              		.loc 1 706 9 is_stmt 1 view .LVU569
 706:lvgl/src/misc/lv_tlsf.c ****         block_remove(control, next);
 1970              		.loc 1 706 9 view .LVU570
 1971 0016 2046     		mov	r0, r4
 1972 0018 FFF7FEFF 		bl	block_is_last
 1973              	.LVL188:
 706:lvgl/src/misc/lv_tlsf.c ****         block_remove(control, next);
 1974              		.loc 1 706 9 is_stmt 0 discriminator 1 view .LVU571
 1975 001c 08B1     		cbz	r0, .L126
 1976              	.L127:
 706:lvgl/src/misc/lv_tlsf.c ****         block_remove(control, next);
 1977              		.loc 1 706 9 is_stmt 1 discriminator 1 view .LVU572
 706:lvgl/src/misc/lv_tlsf.c ****         block_remove(control, next);
 1978              		.loc 1 706 9 discriminator 1 view .LVU573
 706:lvgl/src/misc/lv_tlsf.c ****         block_remove(control, next);
 1979              		.loc 1 706 9 discriminator 1 view .LVU574
 706:lvgl/src/misc/lv_tlsf.c ****         block_remove(control, next);
 1980              		.loc 1 706 9 discriminator 1 view .LVU575
 706:lvgl/src/misc/lv_tlsf.c ****         block_remove(control, next);
 1981              		.loc 1 706 9 discriminator 1 view .LVU576
 1982 001e FEE7     		b	.L127
 1983              	.LVL189:
 1984              	.L124:
 703:lvgl/src/misc/lv_tlsf.c **** 
 1985              		.loc 1 703 5 discriminator 1 view .LVU577
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 54


 703:lvgl/src/misc/lv_tlsf.c **** 
 1986              		.loc 1 703 5 discriminator 1 view .LVU578
 703:lvgl/src/misc/lv_tlsf.c **** 
 1987              		.loc 1 703 5 discriminator 1 view .LVU579
 703:lvgl/src/misc/lv_tlsf.c **** 
 1988              		.loc 1 703 5 discriminator 1 view .LVU580
 703:lvgl/src/misc/lv_tlsf.c **** 
 1989              		.loc 1 703 5 discriminator 1 view .LVU581
 1990 0020 FEE7     		b	.L124
 1991              	.LVL190:
 1992              	.L126:
 706:lvgl/src/misc/lv_tlsf.c ****         block_remove(control, next);
 1993              		.loc 1 706 9 discriminator 2 view .LVU582
 707:lvgl/src/misc/lv_tlsf.c ****         block = block_absorb(block, next);
 1994              		.loc 1 707 9 view .LVU583
 1995 0022 3146     		mov	r1, r6
 1996 0024 2846     		mov	r0, r5
 1997 0026 FFF7FEFF 		bl	block_remove
 1998              	.LVL191:
 708:lvgl/src/misc/lv_tlsf.c ****     }
 1999              		.loc 1 708 9 view .LVU584
 708:lvgl/src/misc/lv_tlsf.c ****     }
 2000              		.loc 1 708 17 is_stmt 0 view .LVU585
 2001 002a 3146     		mov	r1, r6
 2002 002c 2046     		mov	r0, r4
 2003 002e FFF7FEFF 		bl	block_absorb
 2004              	.LVL192:
 2005 0032 0446     		mov	r4, r0
 2006              	.LVL193:
 2007              	.L125:
 711:lvgl/src/misc/lv_tlsf.c **** }
 2008              		.loc 1 711 5 is_stmt 1 view .LVU586
 712:lvgl/src/misc/lv_tlsf.c **** 
 2009              		.loc 1 712 1 is_stmt 0 view .LVU587
 2010 0034 2046     		mov	r0, r4
 2011 0036 70BD     		pop	{r4, r5, r6, pc}
 712:lvgl/src/misc/lv_tlsf.c **** 
 2012              		.loc 1 712 1 view .LVU588
 2013              		.cfi_endproc
 2014              	.LFE35:
 2016              		.section	.text.block_trim_used,"ax",%progbits
 2017              		.align	1
 2018              		.syntax unified
 2019              		.thumb
 2020              		.thumb_func
 2022              	block_trim_used:
 2023              	.LVL194:
 2024              	.LFB37:
 728:lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(!block_is_free(block) && "block must be used");
 2025              		.loc 1 728 1 is_stmt 1 view -0
 2026              		.cfi_startproc
 2027              		@ args = 0, pretend = 0, frame = 0
 2028              		@ frame_needed = 0, uses_anonymous_args = 0
 728:lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(!block_is_free(block) && "block must be used");
 2029              		.loc 1 728 1 is_stmt 0 view .LVU590
 2030 0000 70B5     		push	{r4, r5, r6, lr}
 2031              	.LCFI25:
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 55


 2032              		.cfi_def_cfa_offset 16
 2033              		.cfi_offset 4, -16
 2034              		.cfi_offset 5, -12
 2035              		.cfi_offset 6, -8
 2036              		.cfi_offset 14, -4
 2037 0002 0646     		mov	r6, r0
 2038 0004 0C46     		mov	r4, r1
 2039 0006 1546     		mov	r5, r2
 729:lvgl/src/misc/lv_tlsf.c ****     if(block_can_split(block, size)) {
 2040              		.loc 1 729 5 is_stmt 1 view .LVU591
 729:lvgl/src/misc/lv_tlsf.c ****     if(block_can_split(block, size)) {
 2041              		.loc 1 729 5 view .LVU592
 2042 0008 0846     		mov	r0, r1
 2043              	.LVL195:
 729:lvgl/src/misc/lv_tlsf.c ****     if(block_can_split(block, size)) {
 2044              		.loc 1 729 5 is_stmt 0 view .LVU593
 2045 000a FFF7FEFF 		bl	block_is_free
 2046              	.LVL196:
 729:lvgl/src/misc/lv_tlsf.c ****     if(block_can_split(block, size)) {
 2047              		.loc 1 729 5 discriminator 1 view .LVU594
 2048 000e 00B1     		cbz	r0, .L130
 2049              	.L131:
 729:lvgl/src/misc/lv_tlsf.c ****     if(block_can_split(block, size)) {
 2050              		.loc 1 729 5 is_stmt 1 discriminator 1 view .LVU595
 729:lvgl/src/misc/lv_tlsf.c ****     if(block_can_split(block, size)) {
 2051              		.loc 1 729 5 discriminator 1 view .LVU596
 729:lvgl/src/misc/lv_tlsf.c ****     if(block_can_split(block, size)) {
 2052              		.loc 1 729 5 discriminator 1 view .LVU597
 729:lvgl/src/misc/lv_tlsf.c ****     if(block_can_split(block, size)) {
 2053              		.loc 1 729 5 discriminator 1 view .LVU598
 729:lvgl/src/misc/lv_tlsf.c ****     if(block_can_split(block, size)) {
 2054              		.loc 1 729 5 discriminator 1 view .LVU599
 2055 0010 FEE7     		b	.L131
 2056              	.L130:
 729:lvgl/src/misc/lv_tlsf.c ****     if(block_can_split(block, size)) {
 2057              		.loc 1 729 5 discriminator 2 view .LVU600
 730:lvgl/src/misc/lv_tlsf.c ****         /* If the next block is free, we must coalesce. */
 2058              		.loc 1 730 5 view .LVU601
 730:lvgl/src/misc/lv_tlsf.c ****         /* If the next block is free, we must coalesce. */
 2059              		.loc 1 730 8 is_stmt 0 view .LVU602
 2060 0012 2946     		mov	r1, r5
 2061 0014 2046     		mov	r0, r4
 2062 0016 FFF7FEFF 		bl	block_can_split
 2063              	.LVL197:
 730:lvgl/src/misc/lv_tlsf.c ****         /* If the next block is free, we must coalesce. */
 2064              		.loc 1 730 7 discriminator 1 view .LVU603
 2065 001a 00B9     		cbnz	r0, .L134
 2066              	.LVL198:
 2067              	.L129:
 738:lvgl/src/misc/lv_tlsf.c **** 
 2068              		.loc 1 738 1 view .LVU604
 2069 001c 70BD     		pop	{r4, r5, r6, pc}
 2070              	.LVL199:
 2071              	.L134:
 2072              	.LBB5:
 732:lvgl/src/misc/lv_tlsf.c ****         block_set_prev_used(remaining_block);
 2073              		.loc 1 732 9 is_stmt 1 view .LVU605
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 56


 732:lvgl/src/misc/lv_tlsf.c ****         block_set_prev_used(remaining_block);
 2074              		.loc 1 732 44 is_stmt 0 view .LVU606
 2075 001e 2946     		mov	r1, r5
 2076 0020 2046     		mov	r0, r4
 2077 0022 FFF7FEFF 		bl	block_split
 2078              	.LVL200:
 2079 0026 0446     		mov	r4, r0
 2080              	.LVL201:
 733:lvgl/src/misc/lv_tlsf.c **** 
 2081              		.loc 1 733 9 is_stmt 1 view .LVU607
 2082 0028 FFF7FEFF 		bl	block_set_prev_used
 2083              	.LVL202:
 735:lvgl/src/misc/lv_tlsf.c ****         block_insert(control, remaining_block);
 2084              		.loc 1 735 9 view .LVU608
 735:lvgl/src/misc/lv_tlsf.c ****         block_insert(control, remaining_block);
 2085              		.loc 1 735 27 is_stmt 0 view .LVU609
 2086 002c 2146     		mov	r1, r4
 2087 002e 3046     		mov	r0, r6
 2088 0030 FFF7FEFF 		bl	block_merge_next
 2089              	.LVL203:
 2090 0034 0146     		mov	r1, r0
 2091              	.LVL204:
 736:lvgl/src/misc/lv_tlsf.c ****     }
 2092              		.loc 1 736 9 is_stmt 1 view .LVU610
 2093 0036 3046     		mov	r0, r6
 2094              	.LVL205:
 736:lvgl/src/misc/lv_tlsf.c ****     }
 2095              		.loc 1 736 9 is_stmt 0 view .LVU611
 2096 0038 FFF7FEFF 		bl	block_insert
 2097              	.LVL206:
 736:lvgl/src/misc/lv_tlsf.c ****     }
 2098              		.loc 1 736 9 view .LVU612
 2099              	.LBE5:
 738:lvgl/src/misc/lv_tlsf.c **** 
 2100              		.loc 1 738 1 view .LVU613
 2101 003c EEE7     		b	.L129
 2102              		.cfi_endproc
 2103              	.LFE37:
 2105              		.section	.text.mapping_search,"ax",%progbits
 2106              		.align	1
 2107              		.syntax unified
 2108              		.thumb
 2109              		.thumb_func
 2111              	mapping_search:
 2112              	.LVL207:
 2113              	.LFB25:
 547:lvgl/src/misc/lv_tlsf.c ****     if(size >= SMALL_BLOCK_SIZE) {
 2114              		.loc 1 547 1 is_stmt 1 view -0
 2115              		.cfi_startproc
 2116              		@ args = 0, pretend = 0, frame = 0
 2117              		@ frame_needed = 0, uses_anonymous_args = 0
 547:lvgl/src/misc/lv_tlsf.c ****     if(size >= SMALL_BLOCK_SIZE) {
 2118              		.loc 1 547 1 is_stmt 0 view .LVU615
 2119 0000 70B5     		push	{r4, r5, r6, lr}
 2120              	.LCFI26:
 2121              		.cfi_def_cfa_offset 16
 2122              		.cfi_offset 4, -16
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 57


 2123              		.cfi_offset 5, -12
 2124              		.cfi_offset 6, -8
 2125              		.cfi_offset 14, -4
 2126 0002 0446     		mov	r4, r0
 2127 0004 0D46     		mov	r5, r1
 2128 0006 1646     		mov	r6, r2
 548:lvgl/src/misc/lv_tlsf.c ****         const size_t round = (1 << (tlsf_fls_sizet(size) - SL_INDEX_COUNT_LOG2)) - 1;
 2129              		.loc 1 548 5 is_stmt 1 view .LVU616
 548:lvgl/src/misc/lv_tlsf.c ****         const size_t round = (1 << (tlsf_fls_sizet(size) - SL_INDEX_COUNT_LOG2)) - 1;
 2130              		.loc 1 548 7 is_stmt 0 view .LVU617
 2131 0008 7F28     		cmp	r0, #127
 2132 000a 06D9     		bls	.L136
 2133              	.LBB6:
 549:lvgl/src/misc/lv_tlsf.c ****         size += round;
 2134              		.loc 1 549 9 is_stmt 1 view .LVU618
 549:lvgl/src/misc/lv_tlsf.c ****         size += round;
 2135              		.loc 1 549 37 is_stmt 0 view .LVU619
 2136 000c FFF7FEFF 		bl	tlsf_fls
 2137              	.LVL208:
 549:lvgl/src/misc/lv_tlsf.c ****         size += round;
 2138              		.loc 1 549 58 discriminator 1 view .LVU620
 2139 0010 0538     		subs	r0, r0, #5
 549:lvgl/src/misc/lv_tlsf.c ****         size += round;
 2140              		.loc 1 549 33 discriminator 1 view .LVU621
 2141 0012 0123     		movs	r3, #1
 2142 0014 8340     		lsls	r3, r3, r0
 549:lvgl/src/misc/lv_tlsf.c ****         size += round;
 2143              		.loc 1 549 82 discriminator 1 view .LVU622
 2144 0016 013B     		subs	r3, r3, #1
 2145              	.LVL209:
 550:lvgl/src/misc/lv_tlsf.c ****     }
 2146              		.loc 1 550 9 is_stmt 1 view .LVU623
 550:lvgl/src/misc/lv_tlsf.c ****     }
 2147              		.loc 1 550 14 is_stmt 0 view .LVU624
 2148 0018 1C44     		add	r4, r4, r3
 2149              	.LVL210:
 2150              	.L136:
 550:lvgl/src/misc/lv_tlsf.c ****     }
 2151              		.loc 1 550 14 view .LVU625
 2152              	.LBE6:
 552:lvgl/src/misc/lv_tlsf.c **** }
 2153              		.loc 1 552 5 is_stmt 1 view .LVU626
 2154 001a 3246     		mov	r2, r6
 2155 001c 2946     		mov	r1, r5
 2156 001e 2046     		mov	r0, r4
 2157 0020 FFF7FEFF 		bl	mapping_insert
 2158              	.LVL211:
 553:lvgl/src/misc/lv_tlsf.c **** 
 2159              		.loc 1 553 1 is_stmt 0 view .LVU627
 2160 0024 70BD     		pop	{r4, r5, r6, pc}
 553:lvgl/src/misc/lv_tlsf.c **** 
 2161              		.loc 1 553 1 view .LVU628
 2162              		.cfi_endproc
 2163              	.LFE25:
 2165              		.section	.text.tlsf_ffs,"ax",%progbits
 2166              		.align	1
 2167              		.syntax unified
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 58


 2168              		.thumb
 2169              		.thumb_func
 2171              	tlsf_ffs:
 2172              	.LVL212:
 2173              	.LFB1:
  95:lvgl/src/misc/lv_tlsf.c ****     return __builtin_ffs(word) - 1;
 2174              		.loc 1 95 1 is_stmt 1 view -0
 2175              		.cfi_startproc
 2176              		@ args = 0, pretend = 0, frame = 0
 2177              		@ frame_needed = 0, uses_anonymous_args = 0
 2178              		@ link register save eliminated.
  95:lvgl/src/misc/lv_tlsf.c ****     return __builtin_ffs(word) - 1;
 2179              		.loc 1 95 1 is_stmt 0 view .LVU630
 2180 0000 0346     		mov	r3, r0
  96:lvgl/src/misc/lv_tlsf.c **** }
 2181              		.loc 1 96 5 is_stmt 1 view .LVU631
  96:lvgl/src/misc/lv_tlsf.c **** }
 2182              		.loc 1 96 12 is_stmt 0 view .LVU632
 2183 0002 90FAA0F0 		rbit	r0, r0
 2184              	.LVL213:
  96:lvgl/src/misc/lv_tlsf.c **** }
 2185              		.loc 1 96 12 view .LVU633
 2186 0006 B0FA80F0 		clz	r0, r0
 2187 000a 0BB9     		cbnz	r3, .L139
 2188 000c 4FF0FF30 		mov	r0, #-1
 2189              	.L139:
  97:lvgl/src/misc/lv_tlsf.c **** 
 2190              		.loc 1 97 1 view .LVU634
 2191 0010 7047     		bx	lr
 2192              		.cfi_endproc
 2193              	.LFE1:
 2195              		.section	.text.search_suitable_block,"ax",%progbits
 2196              		.align	1
 2197              		.syntax unified
 2198              		.thumb
 2199              		.thumb_func
 2201              	search_suitable_block:
 2202              	.LVL214:
 2203              	.LFB26:
 556:lvgl/src/misc/lv_tlsf.c ****     int fl = *fli;
 2204              		.loc 1 556 1 is_stmt 1 view -0
 2205              		.cfi_startproc
 2206              		@ args = 0, pretend = 0, frame = 0
 2207              		@ frame_needed = 0, uses_anonymous_args = 0
 556:lvgl/src/misc/lv_tlsf.c ****     int fl = *fli;
 2208              		.loc 1 556 1 is_stmt 0 view .LVU636
 2209 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2210              	.LCFI27:
 2211              		.cfi_def_cfa_offset 24
 2212              		.cfi_offset 3, -24
 2213              		.cfi_offset 4, -20
 2214              		.cfi_offset 5, -16
 2215              		.cfi_offset 6, -12
 2216              		.cfi_offset 7, -8
 2217              		.cfi_offset 14, -4
 2218 0002 0546     		mov	r5, r0
 2219 0004 1646     		mov	r6, r2
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 59


 557:lvgl/src/misc/lv_tlsf.c ****     int sl = *sli;
 2220              		.loc 1 557 5 is_stmt 1 view .LVU637
 557:lvgl/src/misc/lv_tlsf.c ****     int sl = *sli;
 2221              		.loc 1 557 9 is_stmt 0 view .LVU638
 2222 0006 0C68     		ldr	r4, [r1]
 2223              	.LVL215:
 558:lvgl/src/misc/lv_tlsf.c **** 
 2224              		.loc 1 558 5 is_stmt 1 view .LVU639
 558:lvgl/src/misc/lv_tlsf.c **** 
 2225              		.loc 1 558 9 is_stmt 0 view .LVU640
 2226 0008 1268     		ldr	r2, [r2]
 2227              	.LVL216:
 564:lvgl/src/misc/lv_tlsf.c ****     if(!sl_map) {
 2228              		.loc 1 564 5 is_stmt 1 view .LVU641
 564:lvgl/src/misc/lv_tlsf.c ****     if(!sl_map) {
 2229              		.loc 1 564 45 is_stmt 0 view .LVU642
 2230 000a 231D     		adds	r3, r4, #4
 2231 000c 00EB8303 		add	r3, r0, r3, lsl #2
 2232 0010 5868     		ldr	r0, [r3, #4]
 2233              	.LVL217:
 564:lvgl/src/misc/lv_tlsf.c ****     if(!sl_map) {
 2234              		.loc 1 564 57 view .LVU643
 2235 0012 4FF0FF33 		mov	r3, #-1
 2236 0016 9340     		lsls	r3, r3, r2
 2237              	.LVL218:
 565:lvgl/src/misc/lv_tlsf.c ****         /* No block exists. Search in the next largest first-level list. */
 2238              		.loc 1 565 5 is_stmt 1 view .LVU644
 565:lvgl/src/misc/lv_tlsf.c ****         /* No block exists. Search in the next largest first-level list. */
 2239              		.loc 1 565 7 is_stmt 0 view .LVU645
 2240 0018 1840     		ands	r0, r0, r3
 2241              	.LVL219:
 565:lvgl/src/misc/lv_tlsf.c ****         /* No block exists. Search in the next largest first-level list. */
 2242              		.loc 1 565 7 view .LVU646
 2243 001a 11D1     		bne	.L141
 2244 001c 0F46     		mov	r7, r1
 2245              	.LBB7:
 567:lvgl/src/misc/lv_tlsf.c ****         if(!fl_map) {
 2246              		.loc 1 567 9 is_stmt 1 view .LVU647
 567:lvgl/src/misc/lv_tlsf.c ****         if(!fl_map) {
 2247              		.loc 1 567 44 is_stmt 0 view .LVU648
 2248 001e 2869     		ldr	r0, [r5, #16]
 2249              	.LVL220:
 567:lvgl/src/misc/lv_tlsf.c ****         if(!fl_map) {
 2250              		.loc 1 567 70 view .LVU649
 2251 0020 0134     		adds	r4, r4, #1
 2252              	.LVL221:
 567:lvgl/src/misc/lv_tlsf.c ****         if(!fl_map) {
 2253              		.loc 1 567 63 view .LVU650
 2254 0022 4FF0FF33 		mov	r3, #-1
 2255              	.LVL222:
 567:lvgl/src/misc/lv_tlsf.c ****         if(!fl_map) {
 2256              		.loc 1 567 63 view .LVU651
 2257 0026 A340     		lsls	r3, r3, r4
 2258              	.LVL223:
 568:lvgl/src/misc/lv_tlsf.c ****             /* No free blocks available, memory has been exhausted. */
 2259              		.loc 1 568 9 is_stmt 1 view .LVU652
 568:lvgl/src/misc/lv_tlsf.c ****             /* No free blocks available, memory has been exhausted. */
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 60


 2260              		.loc 1 568 11 is_stmt 0 view .LVU653
 2261 0028 1840     		ands	r0, r0, r3
 2262              	.LVL224:
 568:lvgl/src/misc/lv_tlsf.c ****             /* No free blocks available, memory has been exhausted. */
 2263              		.loc 1 568 11 view .LVU654
 2264 002a 12D0     		beq	.L144
 573:lvgl/src/misc/lv_tlsf.c ****         *fli = fl;
 2265              		.loc 1 573 9 is_stmt 1 view .LVU655
 573:lvgl/src/misc/lv_tlsf.c ****         *fli = fl;
 2266              		.loc 1 573 14 is_stmt 0 view .LVU656
 2267 002c FFF7FEFF 		bl	tlsf_ffs
 2268              	.LVL225:
 573:lvgl/src/misc/lv_tlsf.c ****         *fli = fl;
 2269              		.loc 1 573 14 view .LVU657
 2270 0030 0446     		mov	r4, r0
 2271              	.LVL226:
 574:lvgl/src/misc/lv_tlsf.c ****         sl_map = control->sl_bitmap[fl];
 2272              		.loc 1 574 9 is_stmt 1 view .LVU658
 574:lvgl/src/misc/lv_tlsf.c ****         sl_map = control->sl_bitmap[fl];
 2273              		.loc 1 574 14 is_stmt 0 view .LVU659
 2274 0032 3860     		str	r0, [r7]
 575:lvgl/src/misc/lv_tlsf.c ****     }
 2275              		.loc 1 575 9 is_stmt 1 view .LVU660
 575:lvgl/src/misc/lv_tlsf.c ****     }
 2276              		.loc 1 575 16 is_stmt 0 view .LVU661
 2277 0034 031D     		adds	r3, r0, #4
 2278 0036 05EB8303 		add	r3, r5, r3, lsl #2
 2279 003a 5868     		ldr	r0, [r3, #4]
 2280              	.LVL227:
 575:lvgl/src/misc/lv_tlsf.c ****     }
 2281              		.loc 1 575 16 view .LVU662
 2282              	.LBE7:
 577:lvgl/src/misc/lv_tlsf.c ****     sl = tlsf_ffs(sl_map);
 2283              		.loc 1 577 5 is_stmt 1 view .LVU663
 577:lvgl/src/misc/lv_tlsf.c ****     sl = tlsf_ffs(sl_map);
 2284              		.loc 1 577 5 view .LVU664
 2285 003c 00B9     		cbnz	r0, .L141
 2286              	.L143:
 577:lvgl/src/misc/lv_tlsf.c ****     sl = tlsf_ffs(sl_map);
 2287              		.loc 1 577 5 discriminator 1 view .LVU665
 577:lvgl/src/misc/lv_tlsf.c ****     sl = tlsf_ffs(sl_map);
 2288              		.loc 1 577 5 discriminator 1 view .LVU666
 577:lvgl/src/misc/lv_tlsf.c ****     sl = tlsf_ffs(sl_map);
 2289              		.loc 1 577 5 discriminator 1 view .LVU667
 577:lvgl/src/misc/lv_tlsf.c ****     sl = tlsf_ffs(sl_map);
 2290              		.loc 1 577 5 discriminator 1 view .LVU668
 577:lvgl/src/misc/lv_tlsf.c ****     sl = tlsf_ffs(sl_map);
 2291              		.loc 1 577 5 discriminator 1 view .LVU669
 2292 003e FEE7     		b	.L143
 2293              	.LVL228:
 2294              	.L141:
 577:lvgl/src/misc/lv_tlsf.c ****     sl = tlsf_ffs(sl_map);
 2295              		.loc 1 577 5 discriminator 2 view .LVU670
 578:lvgl/src/misc/lv_tlsf.c ****     *sli = sl;
 2296              		.loc 1 578 5 view .LVU671
 578:lvgl/src/misc/lv_tlsf.c ****     *sli = sl;
 2297              		.loc 1 578 10 is_stmt 0 view .LVU672
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 61


 2298 0040 FFF7FEFF 		bl	tlsf_ffs
 2299              	.LVL229:
 579:lvgl/src/misc/lv_tlsf.c **** 
 2300              		.loc 1 579 5 is_stmt 1 view .LVU673
 579:lvgl/src/misc/lv_tlsf.c **** 
 2301              		.loc 1 579 10 is_stmt 0 view .LVU674
 2302 0044 3060     		str	r0, [r6]
 582:lvgl/src/misc/lv_tlsf.c **** }
 2303              		.loc 1 582 5 is_stmt 1 view .LVU675
 582:lvgl/src/misc/lv_tlsf.c **** }
 2304              		.loc 1 582 31 is_stmt 0 view .LVU676
 2305 0046 00EB4413 		add	r3, r0, r4, lsl #5
 2306 004a 1233     		adds	r3, r3, #18
 2307 004c 55F82300 		ldr	r0, [r5, r3, lsl #2]
 2308              	.LVL230:
 2309              	.L140:
 583:lvgl/src/misc/lv_tlsf.c **** 
 2310              		.loc 1 583 1 view .LVU677
 2311 0050 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2312              	.LVL231:
 2313              	.L144:
 2314              	.LBB8:
 570:lvgl/src/misc/lv_tlsf.c ****         }
 2315              		.loc 1 570 20 view .LVU678
 2316 0052 0020     		movs	r0, #0
 2317              	.LVL232:
 570:lvgl/src/misc/lv_tlsf.c ****         }
 2318              		.loc 1 570 20 view .LVU679
 2319 0054 FCE7     		b	.L140
 2320              	.LBE8:
 2321              		.cfi_endproc
 2322              	.LFE26:
 2324              		.section	.text.block_locate_free,"ax",%progbits
 2325              		.align	1
 2326              		.syntax unified
 2327              		.thumb
 2328              		.thumb_func
 2330              	block_locate_free:
 2331              	.LVL233:
 2332              	.LFB39:
 756:lvgl/src/misc/lv_tlsf.c ****     int fl = 0, sl = 0;
 2333              		.loc 1 756 1 is_stmt 1 view -0
 2334              		.cfi_startproc
 2335              		@ args = 0, pretend = 0, frame = 8
 2336              		@ frame_needed = 0, uses_anonymous_args = 0
 756:lvgl/src/misc/lv_tlsf.c ****     int fl = 0, sl = 0;
 2337              		.loc 1 756 1 is_stmt 0 view .LVU681
 2338 0000 70B5     		push	{r4, r5, r6, lr}
 2339              	.LCFI28:
 2340              		.cfi_def_cfa_offset 16
 2341              		.cfi_offset 4, -16
 2342              		.cfi_offset 5, -12
 2343              		.cfi_offset 6, -8
 2344              		.cfi_offset 14, -4
 2345 0002 82B0     		sub	sp, sp, #8
 2346              	.LCFI29:
 2347              		.cfi_def_cfa_offset 24
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 62


 757:lvgl/src/misc/lv_tlsf.c ****     block_header_t * block = 0;
 2348              		.loc 1 757 5 is_stmt 1 view .LVU682
 757:lvgl/src/misc/lv_tlsf.c ****     block_header_t * block = 0;
 2349              		.loc 1 757 9 is_stmt 0 view .LVU683
 2350 0004 0023     		movs	r3, #0
 2351 0006 0193     		str	r3, [sp, #4]
 757:lvgl/src/misc/lv_tlsf.c ****     block_header_t * block = 0;
 2352              		.loc 1 757 17 view .LVU684
 2353 0008 0093     		str	r3, [sp]
 758:lvgl/src/misc/lv_tlsf.c **** 
 2354              		.loc 1 758 5 is_stmt 1 view .LVU685
 2355              	.LVL234:
 760:lvgl/src/misc/lv_tlsf.c ****         mapping_search(size, &fl, &sl);
 2356              		.loc 1 760 5 view .LVU686
 760:lvgl/src/misc/lv_tlsf.c ****         mapping_search(size, &fl, &sl);
 2357              		.loc 1 760 7 is_stmt 0 view .LVU687
 2358 000a E1B1     		cbz	r1, .L150
 2359 000c 0446     		mov	r4, r0
 2360 000e 0E46     		mov	r6, r1
 761:lvgl/src/misc/lv_tlsf.c **** 
 2361              		.loc 1 761 9 is_stmt 1 view .LVU688
 2362 0010 6A46     		mov	r2, sp
 2363 0012 01A9     		add	r1, sp, #4
 2364              	.LVL235:
 761:lvgl/src/misc/lv_tlsf.c **** 
 2365              		.loc 1 761 9 is_stmt 0 view .LVU689
 2366 0014 3046     		mov	r0, r6
 2367              	.LVL236:
 761:lvgl/src/misc/lv_tlsf.c **** 
 2368              		.loc 1 761 9 view .LVU690
 2369 0016 FFF7FEFF 		bl	mapping_search
 2370              	.LVL237:
 769:lvgl/src/misc/lv_tlsf.c ****             block = search_suitable_block(control, &fl, &sl);
 2371              		.loc 1 769 9 is_stmt 1 view .LVU691
 769:lvgl/src/misc/lv_tlsf.c ****             block = search_suitable_block(control, &fl, &sl);
 2372              		.loc 1 769 15 is_stmt 0 view .LVU692
 2373 001a 019B     		ldr	r3, [sp, #4]
 769:lvgl/src/misc/lv_tlsf.c ****             block = search_suitable_block(control, &fl, &sl);
 2374              		.loc 1 769 11 view .LVU693
 2375 001c 0C2B     		cmp	r3, #12
 2376 001e 16DC     		bgt	.L151
 770:lvgl/src/misc/lv_tlsf.c ****         }
 2377              		.loc 1 770 13 is_stmt 1 view .LVU694
 770:lvgl/src/misc/lv_tlsf.c ****         }
 2378              		.loc 1 770 21 is_stmt 0 view .LVU695
 2379 0020 6A46     		mov	r2, sp
 2380 0022 01A9     		add	r1, sp, #4
 2381 0024 2046     		mov	r0, r4
 2382 0026 FFF7FEFF 		bl	search_suitable_block
 2383              	.LVL238:
 774:lvgl/src/misc/lv_tlsf.c ****         tlsf_assert(block_size(block) >= size);
 2384              		.loc 1 774 5 is_stmt 1 view .LVU696
 774:lvgl/src/misc/lv_tlsf.c ****         tlsf_assert(block_size(block) >= size);
 2385              		.loc 1 774 7 is_stmt 0 view .LVU697
 2386 002a 0546     		mov	r5, r0
 2387 002c 60B1     		cbz	r0, .L146
 775:lvgl/src/misc/lv_tlsf.c ****         remove_free_block(control, block, fl, sl);
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 63


 2388              		.loc 1 775 9 is_stmt 1 view .LVU698
 775:lvgl/src/misc/lv_tlsf.c ****         remove_free_block(control, block, fl, sl);
 2389              		.loc 1 775 9 view .LVU699
 2390 002e FFF7FEFF 		bl	block_size
 2391              	.LVL239:
 775:lvgl/src/misc/lv_tlsf.c ****         remove_free_block(control, block, fl, sl);
 2392              		.loc 1 775 9 is_stmt 0 discriminator 1 view .LVU700
 2393 0032 B042     		cmp	r0, r6
 2394 0034 00D2     		bcs	.L148
 2395              	.L149:
 775:lvgl/src/misc/lv_tlsf.c ****         remove_free_block(control, block, fl, sl);
 2396              		.loc 1 775 9 is_stmt 1 discriminator 1 view .LVU701
 775:lvgl/src/misc/lv_tlsf.c ****         remove_free_block(control, block, fl, sl);
 2397              		.loc 1 775 9 discriminator 1 view .LVU702
 775:lvgl/src/misc/lv_tlsf.c ****         remove_free_block(control, block, fl, sl);
 2398              		.loc 1 775 9 discriminator 1 view .LVU703
 775:lvgl/src/misc/lv_tlsf.c ****         remove_free_block(control, block, fl, sl);
 2399              		.loc 1 775 9 discriminator 1 view .LVU704
 775:lvgl/src/misc/lv_tlsf.c ****         remove_free_block(control, block, fl, sl);
 2400              		.loc 1 775 9 discriminator 1 view .LVU705
 2401 0036 FEE7     		b	.L149
 2402              	.L148:
 775:lvgl/src/misc/lv_tlsf.c ****         remove_free_block(control, block, fl, sl);
 2403              		.loc 1 775 9 discriminator 2 view .LVU706
 776:lvgl/src/misc/lv_tlsf.c ****     }
 2404              		.loc 1 776 9 view .LVU707
 2405 0038 009B     		ldr	r3, [sp]
 2406 003a 019A     		ldr	r2, [sp, #4]
 2407 003c 2946     		mov	r1, r5
 2408 003e 2046     		mov	r0, r4
 2409 0040 FFF7FEFF 		bl	remove_free_block
 2410              	.LVL240:
 2411 0044 00E0     		b	.L146
 2412              	.LVL241:
 2413              	.L150:
 758:lvgl/src/misc/lv_tlsf.c **** 
 2414              		.loc 1 758 22 is_stmt 0 view .LVU708
 2415 0046 0025     		movs	r5, #0
 2416              	.LVL242:
 2417              	.L146:
 780:lvgl/src/misc/lv_tlsf.c **** 
 2418              		.loc 1 780 1 view .LVU709
 2419 0048 2846     		mov	r0, r5
 2420 004a 02B0     		add	sp, sp, #8
 2421              	.LCFI30:
 2422              		.cfi_remember_state
 2423              		.cfi_def_cfa_offset 16
 2424              		@ sp needed
 2425 004c 70BD     		pop	{r4, r5, r6, pc}
 2426              	.LVL243:
 2427              	.L151:
 2428              	.LCFI31:
 2429              		.cfi_restore_state
 758:lvgl/src/misc/lv_tlsf.c **** 
 2430              		.loc 1 758 22 view .LVU710
 2431 004e 0025     		movs	r5, #0
 2432              	.LVL244:
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 64


 779:lvgl/src/misc/lv_tlsf.c **** }
 2433              		.loc 1 779 5 is_stmt 1 view .LVU711
 779:lvgl/src/misc/lv_tlsf.c **** }
 2434              		.loc 1 779 12 is_stmt 0 view .LVU712
 2435 0050 FAE7     		b	.L146
 2436              		.cfi_endproc
 2437              	.LFE39:
 2439              		.section	.text.lv_tlsf_check,"ax",%progbits
 2440              		.align	1
 2441              		.global	lv_tlsf_check
 2442              		.syntax unified
 2443              		.thumb
 2444              		.thumb_func
 2446              	lv_tlsf_check:
 2447              	.LVL245:
 2448              	.LFB43:
 840:lvgl/src/misc/lv_tlsf.c ****     int i, j;
 2449              		.loc 1 840 1 is_stmt 1 view -0
 2450              		.cfi_startproc
 2451              		@ args = 0, pretend = 0, frame = 8
 2452              		@ frame_needed = 0, uses_anonymous_args = 0
 840:lvgl/src/misc/lv_tlsf.c ****     int i, j;
 2453              		.loc 1 840 1 is_stmt 0 view .LVU714
 2454 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2455              	.LCFI32:
 2456              		.cfi_def_cfa_offset 24
 2457              		.cfi_offset 4, -24
 2458              		.cfi_offset 5, -20
 2459              		.cfi_offset 6, -16
 2460              		.cfi_offset 7, -12
 2461              		.cfi_offset 8, -8
 2462              		.cfi_offset 14, -4
 2463 0004 82B0     		sub	sp, sp, #8
 2464              	.LCFI33:
 2465              		.cfi_def_cfa_offset 32
 2466 0006 0546     		mov	r5, r0
 841:lvgl/src/misc/lv_tlsf.c **** 
 2467              		.loc 1 841 5 is_stmt 1 view .LVU715
 843:lvgl/src/misc/lv_tlsf.c ****     int status = 0;
 2468              		.loc 1 843 5 view .LVU716
 2469              	.LVL246:
 844:lvgl/src/misc/lv_tlsf.c **** 
 2470              		.loc 1 844 5 view .LVU717
 847:lvgl/src/misc/lv_tlsf.c ****         for(j = 0; j < SL_INDEX_COUNT; ++j) {
 2471              		.loc 1 847 5 view .LVU718
 847:lvgl/src/misc/lv_tlsf.c ****         for(j = 0; j < SL_INDEX_COUNT; ++j) {
 2472              		.loc 1 847 11 is_stmt 0 view .LVU719
 2473 0008 0026     		movs	r6, #0
 2474              	.LVL247:
 2475              	.L154:
 847:lvgl/src/misc/lv_tlsf.c ****         for(j = 0; j < SL_INDEX_COUNT; ++j) {
 2476              		.loc 1 847 18 is_stmt 1 discriminator 1 view .LVU720
 2477 000a 0C2E     		cmp	r6, #12
 2478 000c 4FDC     		bgt	.L181
 848:lvgl/src/misc/lv_tlsf.c ****             const int fl_map = control->fl_bitmap & (1U << i);
 2479              		.loc 1 848 15 is_stmt 0 view .LVU721
 2480 000e 0027     		movs	r7, #0
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 65


 2481              	.L178:
 2482              	.LVL248:
 848:lvgl/src/misc/lv_tlsf.c ****             const int fl_map = control->fl_bitmap & (1U << i);
 2483              		.loc 1 848 22 is_stmt 1 discriminator 1 view .LVU722
 2484 0010 1F2F     		cmp	r7, #31
 2485 0012 4ADC     		bgt	.L182
 2486              	.LBB9:
 849:lvgl/src/misc/lv_tlsf.c ****             const int sl_list = control->sl_bitmap[i];
 2487              		.loc 1 849 13 view .LVU723
 849:lvgl/src/misc/lv_tlsf.c ****             const int sl_list = control->sl_bitmap[i];
 2488              		.loc 1 849 39 is_stmt 0 view .LVU724
 2489 0014 2A69     		ldr	r2, [r5, #16]
 849:lvgl/src/misc/lv_tlsf.c ****             const int sl_list = control->sl_bitmap[i];
 2490              		.loc 1 849 57 view .LVU725
 2491 0016 0123     		movs	r3, #1
 2492 0018 03FA06FC 		lsl	ip, r3, r6
 2493              	.LVL249:
 850:lvgl/src/misc/lv_tlsf.c ****             const int sl_map = sl_list & (1U << j);
 2494              		.loc 1 850 13 is_stmt 1 view .LVU726
 850:lvgl/src/misc/lv_tlsf.c ****             const int sl_map = sl_list & (1U << j);
 2495              		.loc 1 850 51 is_stmt 0 view .LVU727
 2496 001c 311D     		adds	r1, r6, #4
 2497 001e 05EB8101 		add	r1, r5, r1, lsl #2
 2498 0022 4868     		ldr	r0, [r1, #4]
 2499              	.LVL250:
 851:lvgl/src/misc/lv_tlsf.c ****             const block_header_t * block = control->blocks[i][j];
 2500              		.loc 1 851 13 is_stmt 1 view .LVU728
 851:lvgl/src/misc/lv_tlsf.c ****             const block_header_t * block = control->blocks[i][j];
 2501              		.loc 1 851 46 is_stmt 0 view .LVU729
 2502 0024 BB40     		lsls	r3, r3, r7
 851:lvgl/src/misc/lv_tlsf.c ****             const block_header_t * block = control->blocks[i][j];
 2503              		.loc 1 851 40 view .LVU730
 2504 0026 0340     		ands	r3, r3, r0
 2505              	.LVL251:
 852:lvgl/src/misc/lv_tlsf.c **** 
 2506              		.loc 1 852 13 is_stmt 1 view .LVU731
 852:lvgl/src/misc/lv_tlsf.c **** 
 2507              		.loc 1 852 36 is_stmt 0 view .LVU732
 2508 0028 07EB4611 		add	r1, r7, r6, lsl #5
 2509 002c 1231     		adds	r1, r1, #18
 2510 002e 55F82140 		ldr	r4, [r5, r1, lsl #2]
 2511              	.LVL252:
 855:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(!sl_map && "second-level map must be null");
 2512              		.loc 1 855 13 is_stmt 1 view .LVU733
 855:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(!sl_map && "second-level map must be null");
 2513              		.loc 1 855 15 is_stmt 0 view .LVU734
 2514 0032 12EA0C0F 		tst	r2, ip
 2515 0036 00D1     		bne	.L155
 856:lvgl/src/misc/lv_tlsf.c ****             }
 2516              		.loc 1 856 17 is_stmt 1 view .LVU735
 856:lvgl/src/misc/lv_tlsf.c ****             }
 2517              		.loc 1 856 17 view .LVU736
 2518 0038 1BB9     		cbnz	r3, .L156
 2519              	.L155:
 856:lvgl/src/misc/lv_tlsf.c ****             }
 2520              		.loc 1 856 72 discriminator 5 view .LVU737
 859:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(block == &control->block_null && "block list must be null");
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 66


 2521              		.loc 1 859 13 view .LVU738
 859:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(block == &control->block_null && "block list must be null");
 2522              		.loc 1 859 15 is_stmt 0 view .LVU739
 2523 003a 1BB9     		cbnz	r3, .L157
 860:lvgl/src/misc/lv_tlsf.c ****                 continue;
 2524              		.loc 1 860 17 is_stmt 1 view .LVU740
 860:lvgl/src/misc/lv_tlsf.c ****                 continue;
 2525              		.loc 1 860 17 view .LVU741
 2526 003c A542     		cmp	r5, r4
 2527 003e 32D0     		beq	.L158
 2528              	.L159:
 860:lvgl/src/misc/lv_tlsf.c ****                 continue;
 2529              		.loc 1 860 17 discriminator 1 view .LVU742
 860:lvgl/src/misc/lv_tlsf.c ****                 continue;
 2530              		.loc 1 860 17 discriminator 1 view .LVU743
 860:lvgl/src/misc/lv_tlsf.c ****                 continue;
 2531              		.loc 1 860 17 discriminator 1 view .LVU744
 860:lvgl/src/misc/lv_tlsf.c ****                 continue;
 2532              		.loc 1 860 17 discriminator 1 view .LVU745
 860:lvgl/src/misc/lv_tlsf.c ****                 continue;
 2533              		.loc 1 860 17 discriminator 1 view .LVU746
 2534 0040 FEE7     		b	.L159
 2535              	.L156:
 856:lvgl/src/misc/lv_tlsf.c ****             }
 2536              		.loc 1 856 17 discriminator 1 view .LVU747
 856:lvgl/src/misc/lv_tlsf.c ****             }
 2537              		.loc 1 856 17 discriminator 1 view .LVU748
 856:lvgl/src/misc/lv_tlsf.c ****             }
 2538              		.loc 1 856 17 discriminator 1 view .LVU749
 856:lvgl/src/misc/lv_tlsf.c ****             }
 2539              		.loc 1 856 17 discriminator 1 view .LVU750
 856:lvgl/src/misc/lv_tlsf.c ****             }
 2540              		.loc 1 856 17 discriminator 1 view .LVU751
 2541 0042 FEE7     		b	.L156
 2542              	.L157:
 865:lvgl/src/misc/lv_tlsf.c ****             tlsf_insist(block != &control->block_null && "block should not be null");
 2543              		.loc 1 865 13 view .LVU752
 865:lvgl/src/misc/lv_tlsf.c ****             tlsf_insist(block != &control->block_null && "block should not be null");
 2544              		.loc 1 865 13 view .LVU753
 2545 0044 38B3     		cbz	r0, .L161
 865:lvgl/src/misc/lv_tlsf.c ****             tlsf_insist(block != &control->block_null && "block should not be null");
 2546              		.loc 1 865 13 discriminator 2 view .LVU754
 865:lvgl/src/misc/lv_tlsf.c ****             tlsf_insist(block != &control->block_null && "block should not be null");
 2547              		.loc 1 865 13 discriminator 2 view .LVU755
 865:lvgl/src/misc/lv_tlsf.c ****             tlsf_insist(block != &control->block_null && "block should not be null");
 2548              		.loc 1 865 73 discriminator 5 view .LVU756
 866:lvgl/src/misc/lv_tlsf.c **** 
 2549              		.loc 1 866 13 view .LVU757
 866:lvgl/src/misc/lv_tlsf.c **** 
 2550              		.loc 1 866 13 view .LVU758
 2551 0046 A542     		cmp	r5, r4
 2552 0048 26D0     		beq	.L163
 2553              	.LVL253:
 2554              	.L162:
 868:lvgl/src/misc/lv_tlsf.c ****                 int fli, sli;
 2555              		.loc 1 868 25 view .LVU759
 2556 004a A542     		cmp	r5, r4
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 67


 2557 004c 2BD0     		beq	.L158
 2558              	.LBB10:
 869:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(block_is_free(block) && "block should be free");
 2559              		.loc 1 869 17 view .LVU760
 870:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(!block_is_prev_free(block) && "blocks should have coalesced");
 2560              		.loc 1 870 17 view .LVU761
 870:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(!block_is_prev_free(block) && "blocks should have coalesced");
 2561              		.loc 1 870 17 view .LVU762
 2562 004e 2046     		mov	r0, r4
 2563 0050 FFF7FEFF 		bl	block_is_free
 2564              	.LVL254:
 870:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(!block_is_prev_free(block) && "blocks should have coalesced");
 2565              		.loc 1 870 17 is_stmt 0 discriminator 1 view .LVU763
 2566 0054 08B3     		cbz	r0, .L165
 870:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(!block_is_prev_free(block) && "blocks should have coalesced");
 2567              		.loc 1 870 17 is_stmt 1 discriminator 4 view .LVU764
 870:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(!block_is_prev_free(block) && "blocks should have coalesced");
 2568              		.loc 1 870 17 discriminator 4 view .LVU765
 870:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(!block_is_prev_free(block) && "blocks should have coalesced");
 2569              		.loc 1 870 76 discriminator 9 view .LVU766
 871:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(!block_is_free(block_next(block)) && "blocks should have coalesced");
 2570              		.loc 1 871 17 view .LVU767
 871:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(!block_is_free(block_next(block)) && "blocks should have coalesced");
 2571              		.loc 1 871 17 view .LVU768
 2572 0056 2046     		mov	r0, r4
 2573 0058 FFF7FEFF 		bl	block_is_prev_free
 2574              	.LVL255:
 871:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(!block_is_free(block_next(block)) && "blocks should have coalesced");
 2575              		.loc 1 871 17 is_stmt 0 discriminator 1 view .LVU769
 2576 005c F0B9     		cbnz	r0, .L167
 871:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(!block_is_free(block_next(block)) && "blocks should have coalesced");
 2577              		.loc 1 871 17 is_stmt 1 discriminator 2 view .LVU770
 871:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(!block_is_free(block_next(block)) && "blocks should have coalesced");
 2578              		.loc 1 871 17 discriminator 2 view .LVU771
 871:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(!block_is_free(block_next(block)) && "blocks should have coalesced");
 2579              		.loc 1 871 90 discriminator 5 view .LVU772
 872:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(block_is_prev_free(block_next(block)) && "block should be free");
 2580              		.loc 1 872 17 view .LVU773
 872:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(block_is_prev_free(block_next(block)) && "block should be free");
 2581              		.loc 1 872 17 view .LVU774
 2582 005e 2046     		mov	r0, r4
 2583 0060 FFF7FEFF 		bl	block_next
 2584              	.LVL256:
 2585 0064 8046     		mov	r8, r0
 872:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(block_is_prev_free(block_next(block)) && "block should be free");
 2586              		.loc 1 872 17 is_stmt 0 discriminator 1 view .LVU775
 2587 0066 FFF7FEFF 		bl	block_is_free
 2588              	.LVL257:
 872:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(block_is_prev_free(block_next(block)) && "block should be free");
 2589              		.loc 1 872 17 discriminator 2 view .LVU776
 2590 006a C0B9     		cbnz	r0, .L169
 872:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(block_is_prev_free(block_next(block)) && "block should be free");
 2591              		.loc 1 872 17 is_stmt 1 discriminator 2 view .LVU777
 872:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(block_is_prev_free(block_next(block)) && "block should be free");
 2592              		.loc 1 872 17 discriminator 2 view .LVU778
 872:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(block_is_prev_free(block_next(block)) && "block should be free");
 2593              		.loc 1 872 97 discriminator 5 view .LVU779
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 68


 873:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(block_size(block) >= block_size_min && "block not minimum size");
 2594              		.loc 1 873 17 view .LVU780
 873:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(block_size(block) >= block_size_min && "block not minimum size");
 2595              		.loc 1 873 17 view .LVU781
 873:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(block_size(block) >= block_size_min && "block not minimum size");
 2596              		.loc 1 873 17 is_stmt 0 discriminator 1 view .LVU782
 2597 006c 4046     		mov	r0, r8
 2598 006e FFF7FEFF 		bl	block_is_prev_free
 2599              	.LVL258:
 873:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(block_size(block) >= block_size_min && "block not minimum size");
 2600              		.loc 1 873 17 discriminator 2 view .LVU783
 2601 0072 A8B1     		cbz	r0, .L171
 873:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(block_size(block) >= block_size_min && "block not minimum size");
 2602              		.loc 1 873 17 is_stmt 1 discriminator 4 view .LVU784
 873:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(block_size(block) >= block_size_min && "block not minimum size");
 2603              		.loc 1 873 17 discriminator 4 view .LVU785
 873:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(block_size(block) >= block_size_min && "block not minimum size");
 2604              		.loc 1 873 93 discriminator 9 view .LVU786
 874:lvgl/src/misc/lv_tlsf.c **** 
 2605              		.loc 1 874 17 view .LVU787
 874:lvgl/src/misc/lv_tlsf.c **** 
 2606              		.loc 1 874 17 view .LVU788
 2607 0074 2046     		mov	r0, r4
 2608 0076 FFF7FEFF 		bl	block_size
 2609              	.LVL259:
 874:lvgl/src/misc/lv_tlsf.c **** 
 2610              		.loc 1 874 17 is_stmt 0 discriminator 1 view .LVU789
 2611 007a 0B28     		cmp	r0, #11
 2612 007c 11D9     		bls	.L173
 874:lvgl/src/misc/lv_tlsf.c **** 
 2613              		.loc 1 874 17 is_stmt 1 discriminator 4 view .LVU790
 874:lvgl/src/misc/lv_tlsf.c **** 
 2614              		.loc 1 874 17 discriminator 4 view .LVU791
 874:lvgl/src/misc/lv_tlsf.c **** 
 2615              		.loc 1 874 93 discriminator 9 view .LVU792
 876:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(fli == i && sli == j && "block size indexed in wrong list");
 2616              		.loc 1 876 17 view .LVU793
 876:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(fli == i && sli == j && "block size indexed in wrong list");
 2617              		.loc 1 876 17 is_stmt 0 discriminator 1 view .LVU794
 2618 007e 01AA     		add	r2, sp, #4
 2619 0080 6946     		mov	r1, sp
 2620 0082 FFF7FEFF 		bl	mapping_insert
 2621              	.LVL260:
 877:lvgl/src/misc/lv_tlsf.c ****                 block = block->next_free;
 2622              		.loc 1 877 17 is_stmt 1 view .LVU795
 877:lvgl/src/misc/lv_tlsf.c ****                 block = block->next_free;
 2623              		.loc 1 877 17 view .LVU796
 2624 0086 009B     		ldr	r3, [sp]
 2625 0088 B342     		cmp	r3, r6
 2626 008a 0BD1     		bne	.L174
 877:lvgl/src/misc/lv_tlsf.c ****                 block = block->next_free;
 2627              		.loc 1 877 17 is_stmt 0 discriminator 2 view .LVU797
 2628 008c 019B     		ldr	r3, [sp, #4]
 2629 008e BB42     		cmp	r3, r7
 2630 0090 08D1     		bne	.L174
 877:lvgl/src/misc/lv_tlsf.c ****                 block = block->next_free;
 2631              		.loc 1 877 17 is_stmt 1 discriminator 4 view .LVU798
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 69


 877:lvgl/src/misc/lv_tlsf.c ****                 block = block->next_free;
 2632              		.loc 1 877 17 discriminator 4 view .LVU799
 877:lvgl/src/misc/lv_tlsf.c ****                 block = block->next_free;
 2633              		.loc 1 877 88 discriminator 9 view .LVU800
 878:lvgl/src/misc/lv_tlsf.c ****             }
 2634              		.loc 1 878 17 view .LVU801
 878:lvgl/src/misc/lv_tlsf.c ****             }
 2635              		.loc 1 878 23 is_stmt 0 view .LVU802
 2636 0092 A468     		ldr	r4, [r4, #8]
 2637              	.LVL261:
 878:lvgl/src/misc/lv_tlsf.c ****             }
 2638              		.loc 1 878 23 view .LVU803
 2639 0094 D9E7     		b	.L162
 2640              	.LVL262:
 2641              	.L161:
 878:lvgl/src/misc/lv_tlsf.c ****             }
 2642              		.loc 1 878 23 view .LVU804
 2643              	.LBE10:
 865:lvgl/src/misc/lv_tlsf.c ****             tlsf_insist(block != &control->block_null && "block should not be null");
 2644              		.loc 1 865 13 is_stmt 1 discriminator 1 view .LVU805
 865:lvgl/src/misc/lv_tlsf.c ****             tlsf_insist(block != &control->block_null && "block should not be null");
 2645              		.loc 1 865 13 discriminator 1 view .LVU806
 865:lvgl/src/misc/lv_tlsf.c ****             tlsf_insist(block != &control->block_null && "block should not be null");
 2646              		.loc 1 865 13 discriminator 1 view .LVU807
 865:lvgl/src/misc/lv_tlsf.c ****             tlsf_insist(block != &control->block_null && "block should not be null");
 2647              		.loc 1 865 13 discriminator 1 view .LVU808
 865:lvgl/src/misc/lv_tlsf.c ****             tlsf_insist(block != &control->block_null && "block should not be null");
 2648              		.loc 1 865 13 discriminator 1 view .LVU809
 2649 0096 FEE7     		b	.L161
 2650              	.L163:
 866:lvgl/src/misc/lv_tlsf.c **** 
 2651              		.loc 1 866 13 discriminator 1 view .LVU810
 866:lvgl/src/misc/lv_tlsf.c **** 
 2652              		.loc 1 866 13 discriminator 1 view .LVU811
 866:lvgl/src/misc/lv_tlsf.c **** 
 2653              		.loc 1 866 13 discriminator 1 view .LVU812
 866:lvgl/src/misc/lv_tlsf.c **** 
 2654              		.loc 1 866 13 discriminator 1 view .LVU813
 866:lvgl/src/misc/lv_tlsf.c **** 
 2655              		.loc 1 866 13 discriminator 1 view .LVU814
 2656 0098 FEE7     		b	.L163
 2657              	.LVL263:
 2658              	.L165:
 2659              	.LBB11:
 870:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(!block_is_prev_free(block) && "blocks should have coalesced");
 2660              		.loc 1 870 17 discriminator 3 view .LVU815
 870:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(!block_is_prev_free(block) && "blocks should have coalesced");
 2661              		.loc 1 870 17 discriminator 3 view .LVU816
 870:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(!block_is_prev_free(block) && "blocks should have coalesced");
 2662              		.loc 1 870 17 discriminator 3 view .LVU817
 870:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(!block_is_prev_free(block) && "blocks should have coalesced");
 2663              		.loc 1 870 17 discriminator 3 view .LVU818
 870:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(!block_is_prev_free(block) && "blocks should have coalesced");
 2664              		.loc 1 870 17 discriminator 3 view .LVU819
 2665 009a FEE7     		b	.L165
 2666              	.L167:
 871:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(!block_is_free(block_next(block)) && "blocks should have coalesced");
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 70


 2667              		.loc 1 871 17 discriminator 1 view .LVU820
 871:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(!block_is_free(block_next(block)) && "blocks should have coalesced");
 2668              		.loc 1 871 17 discriminator 1 view .LVU821
 871:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(!block_is_free(block_next(block)) && "blocks should have coalesced");
 2669              		.loc 1 871 17 discriminator 1 view .LVU822
 871:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(!block_is_free(block_next(block)) && "blocks should have coalesced");
 2670              		.loc 1 871 17 discriminator 1 view .LVU823
 871:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(!block_is_free(block_next(block)) && "blocks should have coalesced");
 2671              		.loc 1 871 17 discriminator 1 view .LVU824
 2672 009c FEE7     		b	.L167
 2673              	.L169:
 872:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(block_is_prev_free(block_next(block)) && "block should be free");
 2674              		.loc 1 872 17 discriminator 1 view .LVU825
 872:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(block_is_prev_free(block_next(block)) && "block should be free");
 2675              		.loc 1 872 17 discriminator 1 view .LVU826
 872:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(block_is_prev_free(block_next(block)) && "block should be free");
 2676              		.loc 1 872 17 discriminator 1 view .LVU827
 872:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(block_is_prev_free(block_next(block)) && "block should be free");
 2677              		.loc 1 872 17 discriminator 1 view .LVU828
 872:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(block_is_prev_free(block_next(block)) && "block should be free");
 2678              		.loc 1 872 17 discriminator 1 view .LVU829
 2679 009e FEE7     		b	.L169
 2680              	.L171:
 873:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(block_size(block) >= block_size_min && "block not minimum size");
 2681              		.loc 1 873 17 discriminator 3 view .LVU830
 873:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(block_size(block) >= block_size_min && "block not minimum size");
 2682              		.loc 1 873 17 discriminator 3 view .LVU831
 873:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(block_size(block) >= block_size_min && "block not minimum size");
 2683              		.loc 1 873 17 discriminator 3 view .LVU832
 873:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(block_size(block) >= block_size_min && "block not minimum size");
 2684              		.loc 1 873 17 discriminator 3 view .LVU833
 873:lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(block_size(block) >= block_size_min && "block not minimum size");
 2685              		.loc 1 873 17 discriminator 3 view .LVU834
 2686 00a0 FEE7     		b	.L171
 2687              	.L173:
 874:lvgl/src/misc/lv_tlsf.c **** 
 2688              		.loc 1 874 17 discriminator 3 view .LVU835
 874:lvgl/src/misc/lv_tlsf.c **** 
 2689              		.loc 1 874 17 discriminator 3 view .LVU836
 874:lvgl/src/misc/lv_tlsf.c **** 
 2690              		.loc 1 874 17 discriminator 3 view .LVU837
 874:lvgl/src/misc/lv_tlsf.c **** 
 2691              		.loc 1 874 17 discriminator 3 view .LVU838
 874:lvgl/src/misc/lv_tlsf.c **** 
 2692              		.loc 1 874 17 discriminator 3 view .LVU839
 2693 00a2 FEE7     		b	.L173
 2694              	.L174:
 877:lvgl/src/misc/lv_tlsf.c ****                 block = block->next_free;
 2695              		.loc 1 877 17 discriminator 3 view .LVU840
 877:lvgl/src/misc/lv_tlsf.c ****                 block = block->next_free;
 2696              		.loc 1 877 17 discriminator 3 view .LVU841
 877:lvgl/src/misc/lv_tlsf.c ****                 block = block->next_free;
 2697              		.loc 1 877 17 discriminator 3 view .LVU842
 877:lvgl/src/misc/lv_tlsf.c ****                 block = block->next_free;
 2698              		.loc 1 877 17 discriminator 3 view .LVU843
 877:lvgl/src/misc/lv_tlsf.c ****                 block = block->next_free;
 2699              		.loc 1 877 17 discriminator 3 view .LVU844
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 71


 2700 00a4 FEE7     		b	.L174
 2701              	.L158:
 877:lvgl/src/misc/lv_tlsf.c ****                 block = block->next_free;
 2702              		.loc 1 877 17 is_stmt 0 discriminator 3 view .LVU845
 2703              	.LBE11:
 2704              	.LBE9:
 848:lvgl/src/misc/lv_tlsf.c ****             const int fl_map = control->fl_bitmap & (1U << i);
 2705              		.loc 1 848 40 is_stmt 1 discriminator 2 view .LVU846
 2706 00a6 0137     		adds	r7, r7, #1
 2707              	.LVL264:
 848:lvgl/src/misc/lv_tlsf.c ****             const int fl_map = control->fl_bitmap & (1U << i);
 2708              		.loc 1 848 40 is_stmt 0 discriminator 2 view .LVU847
 2709 00a8 B2E7     		b	.L178
 2710              	.LVL265:
 2711              	.L182:
 847:lvgl/src/misc/lv_tlsf.c ****         for(j = 0; j < SL_INDEX_COUNT; ++j) {
 2712              		.loc 1 847 36 is_stmt 1 discriminator 2 view .LVU848
 2713 00aa 0136     		adds	r6, r6, #1
 2714              	.LVL266:
 847:lvgl/src/misc/lv_tlsf.c ****         for(j = 0; j < SL_INDEX_COUNT; ++j) {
 2715              		.loc 1 847 36 is_stmt 0 discriminator 2 view .LVU849
 2716 00ac ADE7     		b	.L154
 2717              	.LVL267:
 2718              	.L181:
 883:lvgl/src/misc/lv_tlsf.c **** }
 2719              		.loc 1 883 5 is_stmt 1 view .LVU850
 884:lvgl/src/misc/lv_tlsf.c **** 
 2720              		.loc 1 884 1 is_stmt 0 view .LVU851
 2721 00ae 0020     		movs	r0, #0
 2722 00b0 02B0     		add	sp, sp, #8
 2723              	.LCFI34:
 2724              		.cfi_def_cfa_offset 24
 2725              		@ sp needed
 2726 00b2 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 884:lvgl/src/misc/lv_tlsf.c **** 
 2727              		.loc 1 884 1 view .LVU852
 2728              		.cfi_endproc
 2729              	.LFE43:
 2731              		.section	.text.lv_tlsf_walk_pool,"ax",%progbits
 2732              		.align	1
 2733              		.global	lv_tlsf_walk_pool
 2734              		.syntax unified
 2735              		.thumb
 2736              		.thumb_func
 2738              	lv_tlsf_walk_pool:
 2739              	.LVL268:
 2740              	.LFB45:
 893:lvgl/src/misc/lv_tlsf.c **** 
 894:lvgl/src/misc/lv_tlsf.c **** void lv_tlsf_walk_pool(lv_pool_t pool, lv_tlsf_walker walker, void * user)
 895:lvgl/src/misc/lv_tlsf.c **** {
 2741              		.loc 1 895 1 is_stmt 1 view -0
 2742              		.cfi_startproc
 2743              		@ args = 0, pretend = 0, frame = 0
 2744              		@ frame_needed = 0, uses_anonymous_args = 0
 2745              		.loc 1 895 1 is_stmt 0 view .LVU854
 2746 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2747              	.LCFI35:
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 72


 2748              		.cfi_def_cfa_offset 24
 2749              		.cfi_offset 4, -24
 2750              		.cfi_offset 5, -20
 2751              		.cfi_offset 6, -16
 2752              		.cfi_offset 7, -12
 2753              		.cfi_offset 8, -8
 2754              		.cfi_offset 14, -4
 2755 0004 1746     		mov	r7, r2
 896:lvgl/src/misc/lv_tlsf.c ****     lv_tlsf_walker pool_walker = walker ? walker : default_walker;
 2756              		.loc 1 896 5 is_stmt 1 view .LVU855
 2757              		.loc 1 896 50 is_stmt 0 view .LVU856
 2758 0006 8846     		mov	r8, r1
 2759 0008 29B1     		cbz	r1, .L190
 2760              	.L184:
 2761              	.LVL269:
 897:lvgl/src/misc/lv_tlsf.c ****     block_header_t * block =
 2762              		.loc 1 897 5 is_stmt 1 view .LVU857
 898:lvgl/src/misc/lv_tlsf.c ****         offset_to_block(pool, -(int)block_header_overhead);
 2763              		.loc 1 898 9 is_stmt 0 view .LVU858
 2764 000a 6FF00301 		mvn	r1, #3
 2765              	.LVL270:
 2766              		.loc 1 898 9 view .LVU859
 2767 000e FFF7FEFF 		bl	offset_to_block
 2768              	.LVL271:
 2769              		.loc 1 898 9 view .LVU860
 2770 0012 0446     		mov	r4, r0
 2771              	.LVL272:
 899:lvgl/src/misc/lv_tlsf.c **** 
 900:lvgl/src/misc/lv_tlsf.c ****     while(block && !block_is_last(block)) {
 2772              		.loc 1 900 5 is_stmt 1 view .LVU861
 2773              		.loc 1 900 10 is_stmt 0 view .LVU862
 2774 0014 18E0     		b	.L185
 2775              	.LVL273:
 2776              	.L190:
 896:lvgl/src/misc/lv_tlsf.c ****     block_header_t * block =
 2777              		.loc 1 896 50 discriminator 2 view .LVU863
 2778 0016 DFF84080 		ldr	r8, .L191
 2779 001a F6E7     		b	.L184
 2780              	.LVL274:
 2781              	.L187:
 901:lvgl/src/misc/lv_tlsf.c ****         pool_walker(
 2782              		.loc 1 901 9 is_stmt 1 view .LVU864
 2783 001c 2046     		mov	r0, r4
 2784 001e FFF7FEFF 		bl	block_to_ptr
 2785              	.LVL275:
 2786 0022 0546     		mov	r5, r0
 2787              		.loc 1 901 9 is_stmt 0 discriminator 1 view .LVU865
 2788 0024 2046     		mov	r0, r4
 2789 0026 FFF7FEFF 		bl	block_size
 2790              	.LVL276:
 2791 002a 0646     		mov	r6, r0
 902:lvgl/src/misc/lv_tlsf.c ****             block_to_ptr(block),
 903:lvgl/src/misc/lv_tlsf.c ****             block_size(block),
 904:lvgl/src/misc/lv_tlsf.c ****             !block_is_free(block),
 2792              		.loc 1 904 14 view .LVU866
 2793 002c 2046     		mov	r0, r4
 2794 002e FFF7FEFF 		bl	block_is_free
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 73


 2795              	.LVL277:
 901:lvgl/src/misc/lv_tlsf.c ****         pool_walker(
 2796              		.loc 1 901 9 view .LVU867
 2797 0032 3B46     		mov	r3, r7
 2798 0034 B0FA80F2 		clz	r2, r0
 2799 0038 5209     		lsrs	r2, r2, #5
 2800 003a 3146     		mov	r1, r6
 2801 003c 2846     		mov	r0, r5
 2802 003e C047     		blx	r8
 2803              	.LVL278:
 905:lvgl/src/misc/lv_tlsf.c ****             user);
 906:lvgl/src/misc/lv_tlsf.c ****         block = block_next(block);
 2804              		.loc 1 906 9 is_stmt 1 view .LVU868
 2805              		.loc 1 906 17 is_stmt 0 view .LVU869
 2806 0040 2046     		mov	r0, r4
 2807 0042 FFF7FEFF 		bl	block_next
 2808              	.LVL279:
 2809 0046 0446     		mov	r4, r0
 2810              	.LVL280:
 2811              	.L185:
 900:lvgl/src/misc/lv_tlsf.c ****         pool_walker(
 2812              		.loc 1 900 17 is_stmt 1 view .LVU870
 2813 0048 24B1     		cbz	r4, .L183
 900:lvgl/src/misc/lv_tlsf.c ****         pool_walker(
 2814              		.loc 1 900 21 is_stmt 0 discriminator 1 view .LVU871
 2815 004a 2046     		mov	r0, r4
 900:lvgl/src/misc/lv_tlsf.c ****         pool_walker(
 2816              		.loc 1 900 21 discriminator 1 view .LVU872
 2817 004c FFF7FEFF 		bl	block_is_last
 2818              	.LVL281:
 900:lvgl/src/misc/lv_tlsf.c ****         pool_walker(
 2819              		.loc 1 900 17 discriminator 1 view .LVU873
 2820 0050 0028     		cmp	r0, #0
 2821 0052 E3D0     		beq	.L187
 2822              	.L183:
 907:lvgl/src/misc/lv_tlsf.c ****     }
 908:lvgl/src/misc/lv_tlsf.c **** }
 2823              		.loc 1 908 1 view .LVU874
 2824 0054 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2825              	.LVL282:
 2826              	.L192:
 2827              		.loc 1 908 1 view .LVU875
 2828              		.align	2
 2829              	.L191:
 2830 0058 00000000 		.word	default_walker
 2831              		.cfi_endproc
 2832              	.LFE45:
 2834              		.section	.text.lv_tlsf_block_size,"ax",%progbits
 2835              		.align	1
 2836              		.global	lv_tlsf_block_size
 2837              		.syntax unified
 2838              		.thumb
 2839              		.thumb_func
 2841              	lv_tlsf_block_size:
 2842              	.LVL283:
 2843              	.LFB46:
 909:lvgl/src/misc/lv_tlsf.c **** 
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 74


 910:lvgl/src/misc/lv_tlsf.c **** size_t lv_tlsf_block_size(void * ptr)
 911:lvgl/src/misc/lv_tlsf.c **** {
 2844              		.loc 1 911 1 is_stmt 1 view -0
 2845              		.cfi_startproc
 2846              		@ args = 0, pretend = 0, frame = 0
 2847              		@ frame_needed = 0, uses_anonymous_args = 0
 912:lvgl/src/misc/lv_tlsf.c ****     size_t size = 0;
 2848              		.loc 1 912 5 view .LVU877
 913:lvgl/src/misc/lv_tlsf.c ****     if(ptr) {
 2849              		.loc 1 913 5 view .LVU878
 2850              		.loc 1 913 7 is_stmt 0 view .LVU879
 2851 0000 28B1     		cbz	r0, .L195
 911:lvgl/src/misc/lv_tlsf.c ****     size_t size = 0;
 2852              		.loc 1 911 1 view .LVU880
 2853 0002 08B5     		push	{r3, lr}
 2854              	.LCFI36:
 2855              		.cfi_def_cfa_offset 8
 2856              		.cfi_offset 3, -8
 2857              		.cfi_offset 14, -4
 2858              	.LBB12:
 914:lvgl/src/misc/lv_tlsf.c ****         const block_header_t * block = block_from_ptr(ptr);
 2859              		.loc 1 914 9 is_stmt 1 view .LVU881
 2860              		.loc 1 914 40 is_stmt 0 view .LVU882
 2861 0004 FFF7FEFF 		bl	block_from_ptr
 2862              	.LVL284:
 915:lvgl/src/misc/lv_tlsf.c ****         size = block_size(block);
 2863              		.loc 1 915 9 is_stmt 1 view .LVU883
 2864              		.loc 1 915 16 is_stmt 0 view .LVU884
 2865 0008 FFF7FEFF 		bl	block_size
 2866              	.LVL285:
 2867              		.loc 1 915 16 view .LVU885
 2868              	.LBE12:
 916:lvgl/src/misc/lv_tlsf.c ****     }
 917:lvgl/src/misc/lv_tlsf.c ****     return size;
 918:lvgl/src/misc/lv_tlsf.c **** }
 2869              		.loc 1 918 1 view .LVU886
 2870 000c 08BD     		pop	{r3, pc}
 2871              	.LVL286:
 2872              	.L195:
 2873              	.LCFI37:
 2874              		.cfi_def_cfa_offset 0
 2875              		.cfi_restore 3
 2876              		.cfi_restore 14
 912:lvgl/src/misc/lv_tlsf.c ****     if(ptr) {
 2877              		.loc 1 912 12 view .LVU887
 2878 000e 0020     		movs	r0, #0
 2879              	.LVL287:
 917:lvgl/src/misc/lv_tlsf.c **** }
 2880              		.loc 1 917 5 is_stmt 1 view .LVU888
 2881              		.loc 1 918 1 is_stmt 0 view .LVU889
 2882 0010 7047     		bx	lr
 2883              		.cfi_endproc
 2884              	.LFE46:
 2886              		.section	.text.lv_tlsf_check_pool,"ax",%progbits
 2887              		.align	1
 2888              		.global	lv_tlsf_check_pool
 2889              		.syntax unified
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 75


 2890              		.thumb
 2891              		.thumb_func
 2893              	lv_tlsf_check_pool:
 2894              	.LVL288:
 2895              	.LFB47:
 919:lvgl/src/misc/lv_tlsf.c **** 
 920:lvgl/src/misc/lv_tlsf.c **** int lv_tlsf_check_pool(lv_pool_t pool)
 921:lvgl/src/misc/lv_tlsf.c **** {
 2896              		.loc 1 921 1 is_stmt 1 view -0
 2897              		.cfi_startproc
 2898              		@ args = 0, pretend = 0, frame = 8
 2899              		@ frame_needed = 0, uses_anonymous_args = 0
 2900              		.loc 1 921 1 is_stmt 0 view .LVU891
 2901 0000 00B5     		push	{lr}
 2902              	.LCFI38:
 2903              		.cfi_def_cfa_offset 4
 2904              		.cfi_offset 14, -4
 2905 0002 83B0     		sub	sp, sp, #12
 2906              	.LCFI39:
 2907              		.cfi_def_cfa_offset 16
 922:lvgl/src/misc/lv_tlsf.c ****     /* Check that the blocks are physically correct. */
 923:lvgl/src/misc/lv_tlsf.c ****     integrity_t integ = { 0, 0 };
 2908              		.loc 1 923 5 is_stmt 1 view .LVU892
 2909              		.loc 1 923 17 is_stmt 0 view .LVU893
 2910 0004 0023     		movs	r3, #0
 2911 0006 0093     		str	r3, [sp]
 2912 0008 0193     		str	r3, [sp, #4]
 924:lvgl/src/misc/lv_tlsf.c ****     lv_tlsf_walk_pool(pool, integrity_walker, &integ);
 2913              		.loc 1 924 5 is_stmt 1 view .LVU894
 2914 000a 6A46     		mov	r2, sp
 2915 000c 0349     		ldr	r1, .L202
 2916 000e FFF7FEFF 		bl	lv_tlsf_walk_pool
 2917              	.LVL289:
 925:lvgl/src/misc/lv_tlsf.c **** 
 926:lvgl/src/misc/lv_tlsf.c ****     return integ.status;
 2918              		.loc 1 926 5 view .LVU895
 927:lvgl/src/misc/lv_tlsf.c **** }
 2919              		.loc 1 927 1 is_stmt 0 view .LVU896
 2920 0012 0198     		ldr	r0, [sp, #4]
 2921 0014 03B0     		add	sp, sp, #12
 2922              	.LCFI40:
 2923              		.cfi_def_cfa_offset 4
 2924              		@ sp needed
 2925 0016 5DF804FB 		ldr	pc, [sp], #4
 2926              	.L203:
 2927 001a 00BF     		.align	2
 2928              	.L202:
 2929 001c 00000000 		.word	integrity_walker
 2930              		.cfi_endproc
 2931              	.LFE47:
 2933              		.section	.text.lv_tlsf_size,"ax",%progbits
 2934              		.align	1
 2935              		.global	lv_tlsf_size
 2936              		.syntax unified
 2937              		.thumb
 2938              		.thumb_func
 2940              	lv_tlsf_size:
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 76


 2941              	.LFB48:
 928:lvgl/src/misc/lv_tlsf.c **** 
 929:lvgl/src/misc/lv_tlsf.c **** /*
 930:lvgl/src/misc/lv_tlsf.c **** ** Size of the TLSF structures in a given memory block passed to
 931:lvgl/src/misc/lv_tlsf.c **** ** lv_tlsf_create, equal to the size of a control_t
 932:lvgl/src/misc/lv_tlsf.c **** */
 933:lvgl/src/misc/lv_tlsf.c **** size_t lv_tlsf_size(void)
 934:lvgl/src/misc/lv_tlsf.c **** {
 2942              		.loc 1 934 1 is_stmt 1 view -0
 2943              		.cfi_startproc
 2944              		@ args = 0, pretend = 0, frame = 0
 2945              		@ frame_needed = 0, uses_anonymous_args = 0
 2946              		@ link register save eliminated.
 935:lvgl/src/misc/lv_tlsf.c ****     return sizeof(control_t);
 2947              		.loc 1 935 5 view .LVU898
 936:lvgl/src/misc/lv_tlsf.c **** }
 2948              		.loc 1 936 1 is_stmt 0 view .LVU899
 2949 0000 4FF4D960 		mov	r0, #1736
 2950 0004 7047     		bx	lr
 2951              		.cfi_endproc
 2952              	.LFE48:
 2954              		.section	.text.lv_tlsf_align_size,"ax",%progbits
 2955              		.align	1
 2956              		.global	lv_tlsf_align_size
 2957              		.syntax unified
 2958              		.thumb
 2959              		.thumb_func
 2961              	lv_tlsf_align_size:
 2962              	.LFB49:
 937:lvgl/src/misc/lv_tlsf.c **** 
 938:lvgl/src/misc/lv_tlsf.c **** size_t lv_tlsf_align_size(void)
 939:lvgl/src/misc/lv_tlsf.c **** {
 2963              		.loc 1 939 1 is_stmt 1 view -0
 2964              		.cfi_startproc
 2965              		@ args = 0, pretend = 0, frame = 0
 2966              		@ frame_needed = 0, uses_anonymous_args = 0
 2967              		@ link register save eliminated.
 940:lvgl/src/misc/lv_tlsf.c ****     return ALIGN_SIZE;
 2968              		.loc 1 940 5 view .LVU901
 941:lvgl/src/misc/lv_tlsf.c **** }
 2969              		.loc 1 941 1 is_stmt 0 view .LVU902
 2970 0000 0420     		movs	r0, #4
 2971 0002 7047     		bx	lr
 2972              		.cfi_endproc
 2973              	.LFE49:
 2975              		.section	.text.lv_tlsf_block_size_min,"ax",%progbits
 2976              		.align	1
 2977              		.global	lv_tlsf_block_size_min
 2978              		.syntax unified
 2979              		.thumb
 2980              		.thumb_func
 2982              	lv_tlsf_block_size_min:
 2983              	.LFB50:
 942:lvgl/src/misc/lv_tlsf.c **** 
 943:lvgl/src/misc/lv_tlsf.c **** size_t lv_tlsf_block_size_min(void)
 944:lvgl/src/misc/lv_tlsf.c **** {
 2984              		.loc 1 944 1 is_stmt 1 view -0
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 77


 2985              		.cfi_startproc
 2986              		@ args = 0, pretend = 0, frame = 0
 2987              		@ frame_needed = 0, uses_anonymous_args = 0
 2988              		@ link register save eliminated.
 945:lvgl/src/misc/lv_tlsf.c ****     return block_size_min;
 2989              		.loc 1 945 5 view .LVU904
 946:lvgl/src/misc/lv_tlsf.c **** }
 2990              		.loc 1 946 1 is_stmt 0 view .LVU905
 2991 0000 0C20     		movs	r0, #12
 2992 0002 7047     		bx	lr
 2993              		.cfi_endproc
 2994              	.LFE50:
 2996              		.section	.text.lv_tlsf_block_size_max,"ax",%progbits
 2997              		.align	1
 2998              		.global	lv_tlsf_block_size_max
 2999              		.syntax unified
 3000              		.thumb
 3001              		.thumb_func
 3003              	lv_tlsf_block_size_max:
 3004              	.LFB51:
 947:lvgl/src/misc/lv_tlsf.c **** 
 948:lvgl/src/misc/lv_tlsf.c **** size_t lv_tlsf_block_size_max(void)
 949:lvgl/src/misc/lv_tlsf.c **** {
 3005              		.loc 1 949 1 is_stmt 1 view -0
 3006              		.cfi_startproc
 3007              		@ args = 0, pretend = 0, frame = 0
 3008              		@ frame_needed = 0, uses_anonymous_args = 0
 3009              		@ link register save eliminated.
 950:lvgl/src/misc/lv_tlsf.c ****     return block_size_max;
 3010              		.loc 1 950 5 view .LVU907
 951:lvgl/src/misc/lv_tlsf.c **** }
 3011              		.loc 1 951 1 is_stmt 0 view .LVU908
 3012 0000 4FF40020 		mov	r0, #524288
 3013 0004 7047     		bx	lr
 3014              		.cfi_endproc
 3015              	.LFE51:
 3017              		.section	.text.lv_tlsf_pool_overhead,"ax",%progbits
 3018              		.align	1
 3019              		.global	lv_tlsf_pool_overhead
 3020              		.syntax unified
 3021              		.thumb
 3022              		.thumb_func
 3024              	lv_tlsf_pool_overhead:
 3025              	.LFB52:
 952:lvgl/src/misc/lv_tlsf.c **** 
 953:lvgl/src/misc/lv_tlsf.c **** /*
 954:lvgl/src/misc/lv_tlsf.c **** ** Overhead of the TLSF structures in a given memory block passed to
 955:lvgl/src/misc/lv_tlsf.c **** ** lv_tlsf_add_pool, equal to the overhead of a free block and the
 956:lvgl/src/misc/lv_tlsf.c **** ** sentinel block.
 957:lvgl/src/misc/lv_tlsf.c **** */
 958:lvgl/src/misc/lv_tlsf.c **** size_t lv_tlsf_pool_overhead(void)
 959:lvgl/src/misc/lv_tlsf.c **** {
 3026              		.loc 1 959 1 is_stmt 1 view -0
 3027              		.cfi_startproc
 3028              		@ args = 0, pretend = 0, frame = 0
 3029              		@ frame_needed = 0, uses_anonymous_args = 0
 3030              		@ link register save eliminated.
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 78


 960:lvgl/src/misc/lv_tlsf.c ****     return 2 * block_header_overhead;
 3031              		.loc 1 960 5 view .LVU910
 961:lvgl/src/misc/lv_tlsf.c **** }
 3032              		.loc 1 961 1 is_stmt 0 view .LVU911
 3033 0000 0820     		movs	r0, #8
 3034 0002 7047     		bx	lr
 3035              		.cfi_endproc
 3036              	.LFE52:
 3038              		.section	.text.lv_tlsf_alloc_overhead,"ax",%progbits
 3039              		.align	1
 3040              		.global	lv_tlsf_alloc_overhead
 3041              		.syntax unified
 3042              		.thumb
 3043              		.thumb_func
 3045              	lv_tlsf_alloc_overhead:
 3046              	.LFB53:
 962:lvgl/src/misc/lv_tlsf.c **** 
 963:lvgl/src/misc/lv_tlsf.c **** size_t lv_tlsf_alloc_overhead(void)
 964:lvgl/src/misc/lv_tlsf.c **** {
 3047              		.loc 1 964 1 is_stmt 1 view -0
 3048              		.cfi_startproc
 3049              		@ args = 0, pretend = 0, frame = 0
 3050              		@ frame_needed = 0, uses_anonymous_args = 0
 3051              		@ link register save eliminated.
 965:lvgl/src/misc/lv_tlsf.c ****     return block_header_overhead;
 3052              		.loc 1 965 5 view .LVU913
 966:lvgl/src/misc/lv_tlsf.c **** }
 3053              		.loc 1 966 1 is_stmt 0 view .LVU914
 3054 0000 0420     		movs	r0, #4
 3055 0002 7047     		bx	lr
 3056              		.cfi_endproc
 3057              	.LFE53:
 3059              		.section	.text.lv_tlsf_add_pool,"ax",%progbits
 3060              		.align	1
 3061              		.global	lv_tlsf_add_pool
 3062              		.syntax unified
 3063              		.thumb
 3064              		.thumb_func
 3066              	lv_tlsf_add_pool:
 3067              	.LVL290:
 3068              	.LFB54:
 967:lvgl/src/misc/lv_tlsf.c **** 
 968:lvgl/src/misc/lv_tlsf.c **** lv_pool_t lv_tlsf_add_pool(lv_tlsf_t tlsf, void * mem, size_t bytes)
 969:lvgl/src/misc/lv_tlsf.c **** {
 3069              		.loc 1 969 1 is_stmt 1 view -0
 3070              		.cfi_startproc
 3071              		@ args = 0, pretend = 0, frame = 0
 3072              		@ frame_needed = 0, uses_anonymous_args = 0
 3073              		.loc 1 969 1 is_stmt 0 view .LVU916
 3074 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3075              	.LCFI41:
 3076              		.cfi_def_cfa_offset 24
 3077              		.cfi_offset 3, -24
 3078              		.cfi_offset 4, -20
 3079              		.cfi_offset 5, -16
 3080              		.cfi_offset 6, -12
 3081              		.cfi_offset 7, -8
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 79


 3082              		.cfi_offset 14, -4
 3083 0002 0746     		mov	r7, r0
 3084 0004 0C46     		mov	r4, r1
 3085 0006 1546     		mov	r5, r2
 970:lvgl/src/misc/lv_tlsf.c ****     block_header_t * block;
 3086              		.loc 1 970 5 is_stmt 1 view .LVU917
 971:lvgl/src/misc/lv_tlsf.c ****     block_header_t * next;
 3087              		.loc 1 971 5 view .LVU918
 972:lvgl/src/misc/lv_tlsf.c **** 
 973:lvgl/src/misc/lv_tlsf.c ****     const size_t pool_overhead = lv_tlsf_pool_overhead();
 3088              		.loc 1 973 5 view .LVU919
 3089              		.loc 1 973 34 is_stmt 0 view .LVU920
 3090 0008 FFF7FEFF 		bl	lv_tlsf_pool_overhead
 3091              	.LVL291:
 974:lvgl/src/misc/lv_tlsf.c ****     const size_t pool_bytes = align_down(bytes - pool_overhead, ALIGN_SIZE);
 3092              		.loc 1 974 5 is_stmt 1 view .LVU921
 3093              		.loc 1 974 31 is_stmt 0 view .LVU922
 3094 000c 0421     		movs	r1, #4
 3095 000e 281A     		subs	r0, r5, r0
 3096              	.LVL292:
 3097              		.loc 1 974 31 view .LVU923
 3098 0010 FFF7FEFF 		bl	align_down
 3099              	.LVL293:
 975:lvgl/src/misc/lv_tlsf.c **** 
 976:lvgl/src/misc/lv_tlsf.c ****     if(((ptrdiff_t)mem % ALIGN_SIZE) != 0) {
 3100              		.loc 1 976 5 is_stmt 1 view .LVU924
 3101              		.loc 1 976 7 is_stmt 0 view .LVU925
 3102 0014 14F0030F 		tst	r4, #3
 3103 0018 27D1     		bne	.L212
 3104 001a 0546     		mov	r5, r0
 3105              	.LVL294:
 977:lvgl/src/misc/lv_tlsf.c ****         printf("lv_tlsf_add_pool: Memory must be aligned by %u bytes.\n",
 978:lvgl/src/misc/lv_tlsf.c ****                (unsigned int)ALIGN_SIZE);
 979:lvgl/src/misc/lv_tlsf.c ****         return 0;
 980:lvgl/src/misc/lv_tlsf.c ****     }
 981:lvgl/src/misc/lv_tlsf.c **** 
 982:lvgl/src/misc/lv_tlsf.c ****     if(pool_bytes < block_size_min || pool_bytes > block_size_max) {
 3106              		.loc 1 982 5 is_stmt 1 view .LVU926
 3107              		.loc 1 982 36 is_stmt 0 view .LVU927
 3108 001c A0F10C02 		sub	r2, r0, #12
 3109              		.loc 1 982 7 view .LVU928
 3110 0020 144B     		ldr	r3, .L215
 3111 0022 9A42     		cmp	r2, r3
 3112 0024 23D8     		bhi	.L213
 983:lvgl/src/misc/lv_tlsf.c **** #if defined (TLSF_64BIT)
 984:lvgl/src/misc/lv_tlsf.c ****         printf("lv_tlsf_add_pool: Memory size must be between 0x%x and 0x%x00 bytes.\n",
 985:lvgl/src/misc/lv_tlsf.c ****                (unsigned int)(pool_overhead + block_size_min),
 986:lvgl/src/misc/lv_tlsf.c ****                (unsigned int)((pool_overhead + block_size_max) / 256));
 987:lvgl/src/misc/lv_tlsf.c **** #else
 988:lvgl/src/misc/lv_tlsf.c ****         printf("lv_tlsf_add_pool: Memory size must be between %u and %u bytes.\n",
 989:lvgl/src/misc/lv_tlsf.c ****                (unsigned int)(pool_overhead + block_size_min),
 990:lvgl/src/misc/lv_tlsf.c ****                (unsigned int)(pool_overhead + block_size_max));
 991:lvgl/src/misc/lv_tlsf.c **** #endif
 992:lvgl/src/misc/lv_tlsf.c ****         return 0;
 993:lvgl/src/misc/lv_tlsf.c ****     }
 994:lvgl/src/misc/lv_tlsf.c **** 
 995:lvgl/src/misc/lv_tlsf.c ****     /*
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 80


 996:lvgl/src/misc/lv_tlsf.c ****     ** Create the main free block. Offset the start of the block slightly
 997:lvgl/src/misc/lv_tlsf.c ****     ** so that the prev_phys_block field falls outside of the pool -
 998:lvgl/src/misc/lv_tlsf.c ****     ** it will never be used.
 999:lvgl/src/misc/lv_tlsf.c ****     */
1000:lvgl/src/misc/lv_tlsf.c ****     block = offset_to_block(mem, -(tlsfptr_t)block_header_overhead);
 3113              		.loc 1 1000 5 is_stmt 1 view .LVU929
 3114              		.loc 1 1000 13 is_stmt 0 view .LVU930
 3115 0026 6FF00301 		mvn	r1, #3
 3116 002a 2046     		mov	r0, r4
 3117              	.LVL295:
 3118              		.loc 1 1000 13 view .LVU931
 3119 002c FFF7FEFF 		bl	offset_to_block
 3120              	.LVL296:
 3121 0030 0646     		mov	r6, r0
 3122              	.LVL297:
1001:lvgl/src/misc/lv_tlsf.c ****     block_set_size(block, pool_bytes);
 3123              		.loc 1 1001 5 is_stmt 1 view .LVU932
 3124 0032 2946     		mov	r1, r5
 3125 0034 FFF7FEFF 		bl	block_set_size
 3126              	.LVL298:
1002:lvgl/src/misc/lv_tlsf.c ****     block_set_free(block);
 3127              		.loc 1 1002 5 view .LVU933
 3128 0038 3046     		mov	r0, r6
 3129 003a FFF7FEFF 		bl	block_set_free
 3130              	.LVL299:
1003:lvgl/src/misc/lv_tlsf.c ****     block_set_prev_used(block);
 3131              		.loc 1 1003 5 view .LVU934
 3132 003e 3046     		mov	r0, r6
 3133 0040 FFF7FEFF 		bl	block_set_prev_used
 3134              	.LVL300:
1004:lvgl/src/misc/lv_tlsf.c ****     block_insert(tlsf_cast(control_t *, tlsf), block);
 3135              		.loc 1 1004 5 view .LVU935
 3136 0044 3146     		mov	r1, r6
 3137 0046 3846     		mov	r0, r7
 3138 0048 FFF7FEFF 		bl	block_insert
 3139              	.LVL301:
1005:lvgl/src/misc/lv_tlsf.c **** 
1006:lvgl/src/misc/lv_tlsf.c ****     /* Split the block to create a zero-size sentinel block. */
1007:lvgl/src/misc/lv_tlsf.c ****     next = block_link_next(block);
 3140              		.loc 1 1007 5 view .LVU936
 3141              		.loc 1 1007 12 is_stmt 0 view .LVU937
 3142 004c 3046     		mov	r0, r6
 3143 004e FFF7FEFF 		bl	block_link_next
 3144              	.LVL302:
 3145 0052 0546     		mov	r5, r0
 3146              	.LVL303:
1008:lvgl/src/misc/lv_tlsf.c ****     block_set_size(next, 0);
 3147              		.loc 1 1008 5 is_stmt 1 view .LVU938
 3148 0054 0021     		movs	r1, #0
 3149 0056 FFF7FEFF 		bl	block_set_size
 3150              	.LVL304:
1009:lvgl/src/misc/lv_tlsf.c ****     block_set_used(next);
 3151              		.loc 1 1009 5 view .LVU939
 3152 005a 2846     		mov	r0, r5
 3153 005c FFF7FEFF 		bl	block_set_used
 3154              	.LVL305:
1010:lvgl/src/misc/lv_tlsf.c ****     block_set_prev_free(next);
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 81


 3155              		.loc 1 1010 5 view .LVU940
 3156 0060 2846     		mov	r0, r5
 3157 0062 FFF7FEFF 		bl	block_set_prev_free
 3158              	.LVL306:
1011:lvgl/src/misc/lv_tlsf.c **** 
1012:lvgl/src/misc/lv_tlsf.c ****     return mem;
 3159              		.loc 1 1012 5 view .LVU941
 3160              		.loc 1 1012 12 is_stmt 0 view .LVU942
 3161 0066 2046     		mov	r0, r4
 3162              	.LVL307:
 3163              	.L210:
1013:lvgl/src/misc/lv_tlsf.c **** }
 3164              		.loc 1 1013 1 view .LVU943
 3165 0068 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3166              	.LVL308:
 3167              	.L212:
 979:lvgl/src/misc/lv_tlsf.c ****     }
 3168              		.loc 1 979 16 view .LVU944
 3169 006a 0020     		movs	r0, #0
 3170              	.LVL309:
 979:lvgl/src/misc/lv_tlsf.c ****     }
 3171              		.loc 1 979 16 view .LVU945
 3172 006c FCE7     		b	.L210
 3173              	.LVL310:
 3174              	.L213:
 992:lvgl/src/misc/lv_tlsf.c ****     }
 3175              		.loc 1 992 16 view .LVU946
 3176 006e 0020     		movs	r0, #0
 3177              	.LVL311:
 992:lvgl/src/misc/lv_tlsf.c ****     }
 3178              		.loc 1 992 16 view .LVU947
 3179 0070 FAE7     		b	.L210
 3180              	.L216:
 3181 0072 00BF     		.align	2
 3182              	.L215:
 3183 0074 F4FF0700 		.word	524276
 3184              		.cfi_endproc
 3185              	.LFE54:
 3187              		.section	.text.lv_tlsf_remove_pool,"ax",%progbits
 3188              		.align	1
 3189              		.global	lv_tlsf_remove_pool
 3190              		.syntax unified
 3191              		.thumb
 3192              		.thumb_func
 3194              	lv_tlsf_remove_pool:
 3195              	.LVL312:
 3196              	.LFB55:
1014:lvgl/src/misc/lv_tlsf.c **** 
1015:lvgl/src/misc/lv_tlsf.c **** void lv_tlsf_remove_pool(lv_tlsf_t tlsf, lv_pool_t pool)
1016:lvgl/src/misc/lv_tlsf.c **** {
 3197              		.loc 1 1016 1 is_stmt 1 view -0
 3198              		.cfi_startproc
 3199              		@ args = 0, pretend = 0, frame = 8
 3200              		@ frame_needed = 0, uses_anonymous_args = 0
 3201              		.loc 1 1016 1 is_stmt 0 view .LVU949
 3202 0000 70B5     		push	{r4, r5, r6, lr}
 3203              	.LCFI42:
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 82


 3204              		.cfi_def_cfa_offset 16
 3205              		.cfi_offset 4, -16
 3206              		.cfi_offset 5, -12
 3207              		.cfi_offset 6, -8
 3208              		.cfi_offset 14, -4
 3209 0002 82B0     		sub	sp, sp, #8
 3210              	.LCFI43:
 3211              		.cfi_def_cfa_offset 24
 3212 0004 0546     		mov	r5, r0
 3213 0006 0846     		mov	r0, r1
 3214              	.LVL313:
1017:lvgl/src/misc/lv_tlsf.c ****     control_t * control = tlsf_cast(control_t *, tlsf);
 3215              		.loc 1 1017 5 is_stmt 1 view .LVU950
1018:lvgl/src/misc/lv_tlsf.c ****     block_header_t * block = offset_to_block(pool, -(int)block_header_overhead);
 3216              		.loc 1 1018 5 view .LVU951
 3217              		.loc 1 1018 30 is_stmt 0 view .LVU952
 3218 0008 6FF00301 		mvn	r1, #3
 3219              	.LVL314:
 3220              		.loc 1 1018 30 view .LVU953
 3221 000c FFF7FEFF 		bl	offset_to_block
 3222              	.LVL315:
 3223              		.loc 1 1018 30 view .LVU954
 3224 0010 0446     		mov	r4, r0
 3225              	.LVL316:
1019:lvgl/src/misc/lv_tlsf.c **** 
1020:lvgl/src/misc/lv_tlsf.c ****     int fl = 0, sl = 0;
 3226              		.loc 1 1020 5 is_stmt 1 view .LVU955
 3227              		.loc 1 1020 9 is_stmt 0 view .LVU956
 3228 0012 0023     		movs	r3, #0
 3229 0014 0193     		str	r3, [sp, #4]
 3230              		.loc 1 1020 17 view .LVU957
 3231 0016 0093     		str	r3, [sp]
1021:lvgl/src/misc/lv_tlsf.c **** 
1022:lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(block_is_free(block) && "block should be free");
 3232              		.loc 1 1022 5 is_stmt 1 view .LVU958
 3233              		.loc 1 1022 5 view .LVU959
 3234 0018 FFF7FEFF 		bl	block_is_free
 3235              	.LVL317:
 3236              		.loc 1 1022 5 is_stmt 0 discriminator 1 view .LVU960
 3237 001c 00B9     		cbnz	r0, .L218
 3238              	.L219:
 3239              		.loc 1 1022 5 is_stmt 1 discriminator 3 view .LVU961
 3240              		.loc 1 1022 5 discriminator 3 view .LVU962
 3241              		.loc 1 1022 5 discriminator 3 view .LVU963
 3242              		.loc 1 1022 5 discriminator 3 view .LVU964
 3243              		.loc 1 1022 5 discriminator 3 view .LVU965
 3244 001e FEE7     		b	.L219
 3245              	.L218:
 3246              		.loc 1 1022 5 discriminator 4 view .LVU966
1023:lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(!block_is_free(block_next(block)) && "next block should not be free");
 3247              		.loc 1 1023 5 view .LVU967
 3248              		.loc 1 1023 5 view .LVU968
 3249 0020 2046     		mov	r0, r4
 3250 0022 FFF7FEFF 		bl	block_next
 3251              	.LVL318:
 3252 0026 0646     		mov	r6, r0
 3253              		.loc 1 1023 5 is_stmt 0 discriminator 1 view .LVU969
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 83


 3254 0028 FFF7FEFF 		bl	block_is_free
 3255              	.LVL319:
 3256              		.loc 1 1023 5 discriminator 2 view .LVU970
 3257 002c 00B1     		cbz	r0, .L220
 3258              	.L221:
 3259              		.loc 1 1023 5 is_stmt 1 discriminator 1 view .LVU971
 3260              		.loc 1 1023 5 discriminator 1 view .LVU972
 3261              		.loc 1 1023 5 discriminator 1 view .LVU973
 3262              		.loc 1 1023 5 discriminator 1 view .LVU974
 3263              		.loc 1 1023 5 discriminator 1 view .LVU975
 3264 002e FEE7     		b	.L221
 3265              	.L220:
 3266              		.loc 1 1023 5 discriminator 2 view .LVU976
1024:lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(block_size(block_next(block)) == 0 && "next block size should be zero");
 3267              		.loc 1 1024 5 view .LVU977
 3268              		.loc 1 1024 5 view .LVU978
 3269              		.loc 1 1024 5 is_stmt 0 discriminator 1 view .LVU979
 3270 0030 3046     		mov	r0, r6
 3271 0032 FFF7FEFF 		bl	block_size
 3272              	.LVL320:
 3273              		.loc 1 1024 5 discriminator 2 view .LVU980
 3274 0036 00B1     		cbz	r0, .L222
 3275              	.L223:
 3276              		.loc 1 1024 5 is_stmt 1 discriminator 1 view .LVU981
 3277              		.loc 1 1024 5 discriminator 1 view .LVU982
 3278              		.loc 1 1024 5 discriminator 1 view .LVU983
 3279              		.loc 1 1024 5 discriminator 1 view .LVU984
 3280              		.loc 1 1024 5 discriminator 1 view .LVU985
 3281 0038 FEE7     		b	.L223
 3282              	.L222:
 3283              		.loc 1 1024 5 discriminator 2 view .LVU986
1025:lvgl/src/misc/lv_tlsf.c **** 
1026:lvgl/src/misc/lv_tlsf.c ****     mapping_insert(block_size(block), &fl, &sl);
 3284              		.loc 1 1026 5 view .LVU987
 3285 003a 2046     		mov	r0, r4
 3286 003c FFF7FEFF 		bl	block_size
 3287              	.LVL321:
 3288              		.loc 1 1026 5 is_stmt 0 discriminator 1 view .LVU988
 3289 0040 6A46     		mov	r2, sp
 3290 0042 01A9     		add	r1, sp, #4
 3291 0044 FFF7FEFF 		bl	mapping_insert
 3292              	.LVL322:
1027:lvgl/src/misc/lv_tlsf.c ****     remove_free_block(control, block, fl, sl);
 3293              		.loc 1 1027 5 is_stmt 1 view .LVU989
 3294 0048 009B     		ldr	r3, [sp]
 3295 004a 019A     		ldr	r2, [sp, #4]
 3296 004c 2146     		mov	r1, r4
 3297 004e 2846     		mov	r0, r5
 3298 0050 FFF7FEFF 		bl	remove_free_block
 3299              	.LVL323:
1028:lvgl/src/misc/lv_tlsf.c **** }
 3300              		.loc 1 1028 1 is_stmt 0 view .LVU990
 3301 0054 02B0     		add	sp, sp, #8
 3302              	.LCFI44:
 3303              		.cfi_def_cfa_offset 16
 3304              		@ sp needed
 3305 0056 70BD     		pop	{r4, r5, r6, pc}
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 84


 3306              		.loc 1 1028 1 view .LVU991
 3307              		.cfi_endproc
 3308              	.LFE55:
 3310              		.section	.text.lv_tlsf_create,"ax",%progbits
 3311              		.align	1
 3312              		.global	lv_tlsf_create
 3313              		.syntax unified
 3314              		.thumb
 3315              		.thumb_func
 3317              	lv_tlsf_create:
 3318              	.LVL324:
 3319              	.LFB56:
1029:lvgl/src/misc/lv_tlsf.c **** 
1030:lvgl/src/misc/lv_tlsf.c **** /*
1031:lvgl/src/misc/lv_tlsf.c **** ** TLSF main interface.
1032:lvgl/src/misc/lv_tlsf.c **** */
1033:lvgl/src/misc/lv_tlsf.c **** 
1034:lvgl/src/misc/lv_tlsf.c **** #if _DEBUG
1035:lvgl/src/misc/lv_tlsf.c **** int test_ffs_fls()
1036:lvgl/src/misc/lv_tlsf.c **** {
1037:lvgl/src/misc/lv_tlsf.c ****     /* Verify ffs/fls work properly. */
1038:lvgl/src/misc/lv_tlsf.c ****     int rv = 0;
1039:lvgl/src/misc/lv_tlsf.c ****     rv += (tlsf_ffs(0) == -1) ? 0 : 0x1;
1040:lvgl/src/misc/lv_tlsf.c ****     rv += (tlsf_fls(0) == -1) ? 0 : 0x2;
1041:lvgl/src/misc/lv_tlsf.c ****     rv += (tlsf_ffs(1) == 0) ? 0 : 0x4;
1042:lvgl/src/misc/lv_tlsf.c ****     rv += (tlsf_fls(1) == 0) ? 0 : 0x8;
1043:lvgl/src/misc/lv_tlsf.c ****     rv += (tlsf_ffs(0x80000000) == 31) ? 0 : 0x10;
1044:lvgl/src/misc/lv_tlsf.c ****     rv += (tlsf_ffs(0x80008000) == 15) ? 0 : 0x20;
1045:lvgl/src/misc/lv_tlsf.c ****     rv += (tlsf_fls(0x80000008) == 31) ? 0 : 0x40;
1046:lvgl/src/misc/lv_tlsf.c ****     rv += (tlsf_fls(0x7FFFFFFF) == 30) ? 0 : 0x80;
1047:lvgl/src/misc/lv_tlsf.c **** 
1048:lvgl/src/misc/lv_tlsf.c **** #if defined (TLSF_64BIT)
1049:lvgl/src/misc/lv_tlsf.c ****     rv += (tlsf_fls_sizet(0x80000000) == 31) ? 0 : 0x100;
1050:lvgl/src/misc/lv_tlsf.c ****     rv += (tlsf_fls_sizet(0x100000000) == 32) ? 0 : 0x200;
1051:lvgl/src/misc/lv_tlsf.c ****     rv += (tlsf_fls_sizet(0xffffffffffffffff) == 63) ? 0 : 0x400;
1052:lvgl/src/misc/lv_tlsf.c **** #endif
1053:lvgl/src/misc/lv_tlsf.c **** 
1054:lvgl/src/misc/lv_tlsf.c ****     if(rv) {
1055:lvgl/src/misc/lv_tlsf.c ****         printf("test_ffs_fls: %x ffs/fls tests failed.\n", rv);
1056:lvgl/src/misc/lv_tlsf.c ****     }
1057:lvgl/src/misc/lv_tlsf.c ****     return rv;
1058:lvgl/src/misc/lv_tlsf.c **** }
1059:lvgl/src/misc/lv_tlsf.c **** #endif
1060:lvgl/src/misc/lv_tlsf.c **** 
1061:lvgl/src/misc/lv_tlsf.c **** lv_tlsf_t lv_tlsf_create(void * mem)
1062:lvgl/src/misc/lv_tlsf.c **** {
 3320              		.loc 1 1062 1 is_stmt 1 view -0
 3321              		.cfi_startproc
 3322              		@ args = 0, pretend = 0, frame = 0
 3323              		@ frame_needed = 0, uses_anonymous_args = 0
1063:lvgl/src/misc/lv_tlsf.c **** #if _DEBUG
1064:lvgl/src/misc/lv_tlsf.c ****     if(test_ffs_fls()) {
1065:lvgl/src/misc/lv_tlsf.c ****         return 0;
1066:lvgl/src/misc/lv_tlsf.c ****     }
1067:lvgl/src/misc/lv_tlsf.c **** #endif
1068:lvgl/src/misc/lv_tlsf.c **** 
1069:lvgl/src/misc/lv_tlsf.c ****     if(((tlsfptr_t)mem % ALIGN_SIZE) != 0) {
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 85


 3324              		.loc 1 1069 5 view .LVU993
 3325              		.loc 1 1069 7 is_stmt 0 view .LVU994
 3326 0000 10F0030F 		tst	r0, #3
 3327 0004 05D1     		bne	.L227
1062:lvgl/src/misc/lv_tlsf.c **** #if _DEBUG
 3328              		.loc 1 1062 1 view .LVU995
 3329 0006 10B5     		push	{r4, lr}
 3330              	.LCFI45:
 3331              		.cfi_def_cfa_offset 8
 3332              		.cfi_offset 4, -8
 3333              		.cfi_offset 14, -4
 3334 0008 0446     		mov	r4, r0
1070:lvgl/src/misc/lv_tlsf.c ****         printf("lv_tlsf_create: Memory must be aligned to %u bytes.\n",
1071:lvgl/src/misc/lv_tlsf.c ****                (unsigned int)ALIGN_SIZE);
1072:lvgl/src/misc/lv_tlsf.c ****         return 0;
1073:lvgl/src/misc/lv_tlsf.c ****     }
1074:lvgl/src/misc/lv_tlsf.c **** 
1075:lvgl/src/misc/lv_tlsf.c ****     control_constructor(tlsf_cast(control_t *, mem));
 3335              		.loc 1 1075 5 is_stmt 1 view .LVU996
 3336 000a FFF7FEFF 		bl	control_constructor
 3337              	.LVL325:
1076:lvgl/src/misc/lv_tlsf.c **** 
1077:lvgl/src/misc/lv_tlsf.c ****     return tlsf_cast(lv_tlsf_t, mem);
 3338              		.loc 1 1077 5 view .LVU997
 3339              		.loc 1 1077 12 is_stmt 0 view .LVU998
 3340 000e 2046     		mov	r0, r4
1078:lvgl/src/misc/lv_tlsf.c **** }
 3341              		.loc 1 1078 1 view .LVU999
 3342 0010 10BD     		pop	{r4, pc}
 3343              	.LVL326:
 3344              	.L227:
 3345              	.LCFI46:
 3346              		.cfi_def_cfa_offset 0
 3347              		.cfi_restore 4
 3348              		.cfi_restore 14
1072:lvgl/src/misc/lv_tlsf.c ****     }
 3349              		.loc 1 1072 16 view .LVU1000
 3350 0012 0020     		movs	r0, #0
 3351              	.LVL327:
 3352              		.loc 1 1078 1 view .LVU1001
 3353 0014 7047     		bx	lr
 3354              		.cfi_endproc
 3355              	.LFE56:
 3357              		.section	.text.lv_tlsf_create_with_pool,"ax",%progbits
 3358              		.align	1
 3359              		.global	lv_tlsf_create_with_pool
 3360              		.syntax unified
 3361              		.thumb
 3362              		.thumb_func
 3364              	lv_tlsf_create_with_pool:
 3365              	.LVL328:
 3366              	.LFB57:
1079:lvgl/src/misc/lv_tlsf.c **** 
1080:lvgl/src/misc/lv_tlsf.c **** lv_tlsf_t lv_tlsf_create_with_pool(void * mem, size_t bytes)
1081:lvgl/src/misc/lv_tlsf.c **** {
 3367              		.loc 1 1081 1 is_stmt 1 view -0
 3368              		.cfi_startproc
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 86


 3369              		@ args = 0, pretend = 0, frame = 0
 3370              		@ frame_needed = 0, uses_anonymous_args = 0
 3371              		.loc 1 1081 1 is_stmt 0 view .LVU1003
 3372 0000 70B5     		push	{r4, r5, r6, lr}
 3373              	.LCFI47:
 3374              		.cfi_def_cfa_offset 16
 3375              		.cfi_offset 4, -16
 3376              		.cfi_offset 5, -12
 3377              		.cfi_offset 6, -8
 3378              		.cfi_offset 14, -4
 3379 0002 0546     		mov	r5, r0
 3380 0004 0E46     		mov	r6, r1
1082:lvgl/src/misc/lv_tlsf.c ****     lv_tlsf_t tlsf = lv_tlsf_create(mem);
 3381              		.loc 1 1082 5 is_stmt 1 view .LVU1004
 3382              		.loc 1 1082 22 is_stmt 0 view .LVU1005
 3383 0006 FFF7FEFF 		bl	lv_tlsf_create
 3384              	.LVL329:
 3385              		.loc 1 1082 22 view .LVU1006
 3386 000a 0446     		mov	r4, r0
 3387              	.LVL330:
1083:lvgl/src/misc/lv_tlsf.c ****     lv_tlsf_add_pool(tlsf, (char *)mem + lv_tlsf_size(), bytes - lv_tlsf_size());
 3388              		.loc 1 1083 5 is_stmt 1 view .LVU1007
 3389              		.loc 1 1083 42 is_stmt 0 view .LVU1008
 3390 000c FFF7FEFF 		bl	lv_tlsf_size
 3391              	.LVL331:
 3392              		.loc 1 1083 5 discriminator 2 view .LVU1009
 3393 0010 321A     		subs	r2, r6, r0
 3394 0012 2918     		adds	r1, r5, r0
 3395 0014 2046     		mov	r0, r4
 3396 0016 FFF7FEFF 		bl	lv_tlsf_add_pool
 3397              	.LVL332:
1084:lvgl/src/misc/lv_tlsf.c ****     return tlsf;
 3398              		.loc 1 1084 5 is_stmt 1 view .LVU1010
1085:lvgl/src/misc/lv_tlsf.c **** }
 3399              		.loc 1 1085 1 is_stmt 0 view .LVU1011
 3400 001a 2046     		mov	r0, r4
 3401 001c 70BD     		pop	{r4, r5, r6, pc}
 3402              		.loc 1 1085 1 view .LVU1012
 3403              		.cfi_endproc
 3404              	.LFE57:
 3406              		.section	.text.lv_tlsf_destroy,"ax",%progbits
 3407              		.align	1
 3408              		.global	lv_tlsf_destroy
 3409              		.syntax unified
 3410              		.thumb
 3411              		.thumb_func
 3413              	lv_tlsf_destroy:
 3414              	.LVL333:
 3415              	.LFB58:
1086:lvgl/src/misc/lv_tlsf.c **** 
1087:lvgl/src/misc/lv_tlsf.c **** void lv_tlsf_destroy(lv_tlsf_t tlsf)
1088:lvgl/src/misc/lv_tlsf.c **** {
 3416              		.loc 1 1088 1 is_stmt 1 view -0
 3417              		.cfi_startproc
 3418              		@ args = 0, pretend = 0, frame = 0
 3419              		@ frame_needed = 0, uses_anonymous_args = 0
 3420              		@ link register save eliminated.
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 87


1089:lvgl/src/misc/lv_tlsf.c ****     /* Nothing to do. */
1090:lvgl/src/misc/lv_tlsf.c ****     LV_UNUSED(tlsf);
 3421              		.loc 1 1090 5 view .LVU1014
1091:lvgl/src/misc/lv_tlsf.c **** }
 3422              		.loc 1 1091 1 is_stmt 0 view .LVU1015
 3423 0000 7047     		bx	lr
 3424              		.cfi_endproc
 3425              	.LFE58:
 3427              		.section	.text.lv_tlsf_get_pool,"ax",%progbits
 3428              		.align	1
 3429              		.global	lv_tlsf_get_pool
 3430              		.syntax unified
 3431              		.thumb
 3432              		.thumb_func
 3434              	lv_tlsf_get_pool:
 3435              	.LVL334:
 3436              	.LFB59:
1092:lvgl/src/misc/lv_tlsf.c **** 
1093:lvgl/src/misc/lv_tlsf.c **** lv_pool_t lv_tlsf_get_pool(lv_tlsf_t tlsf)
1094:lvgl/src/misc/lv_tlsf.c **** {
 3437              		.loc 1 1094 1 is_stmt 1 view -0
 3438              		.cfi_startproc
 3439              		@ args = 0, pretend = 0, frame = 0
 3440              		@ frame_needed = 0, uses_anonymous_args = 0
 3441              		.loc 1 1094 1 is_stmt 0 view .LVU1017
 3442 0000 10B5     		push	{r4, lr}
 3443              	.LCFI48:
 3444              		.cfi_def_cfa_offset 8
 3445              		.cfi_offset 4, -8
 3446              		.cfi_offset 14, -4
 3447 0002 0446     		mov	r4, r0
1095:lvgl/src/misc/lv_tlsf.c ****     return tlsf_cast(lv_pool_t, (char *)tlsf + lv_tlsf_size());
 3448              		.loc 1 1095 5 is_stmt 1 view .LVU1018
 3449              		.loc 1 1095 12 is_stmt 0 view .LVU1019
 3450 0004 FFF7FEFF 		bl	lv_tlsf_size
 3451              	.LVL335:
1096:lvgl/src/misc/lv_tlsf.c **** }
 3452              		.loc 1 1096 1 view .LVU1020
 3453 0008 2044     		add	r0, r0, r4
 3454 000a 10BD     		pop	{r4, pc}
 3455              		.loc 1 1096 1 view .LVU1021
 3456              		.cfi_endproc
 3457              	.LFE59:
 3459              		.section	.text.lv_tlsf_malloc,"ax",%progbits
 3460              		.align	1
 3461              		.global	lv_tlsf_malloc
 3462              		.syntax unified
 3463              		.thumb
 3464              		.thumb_func
 3466              	lv_tlsf_malloc:
 3467              	.LVL336:
 3468              	.LFB60:
1097:lvgl/src/misc/lv_tlsf.c **** 
1098:lvgl/src/misc/lv_tlsf.c **** void * lv_tlsf_malloc(lv_tlsf_t tlsf, size_t size)
1099:lvgl/src/misc/lv_tlsf.c **** {
 3469              		.loc 1 1099 1 is_stmt 1 view -0
 3470              		.cfi_startproc
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 88


 3471              		@ args = 0, pretend = 0, frame = 0
 3472              		@ frame_needed = 0, uses_anonymous_args = 0
 3473              		.loc 1 1099 1 is_stmt 0 view .LVU1023
 3474 0000 38B5     		push	{r3, r4, r5, lr}
 3475              	.LCFI49:
 3476              		.cfi_def_cfa_offset 16
 3477              		.cfi_offset 3, -16
 3478              		.cfi_offset 4, -12
 3479              		.cfi_offset 5, -8
 3480              		.cfi_offset 14, -4
 3481 0002 0446     		mov	r4, r0
 3482 0004 0846     		mov	r0, r1
 3483              	.LVL337:
1100:lvgl/src/misc/lv_tlsf.c ****     control_t * control = tlsf_cast(control_t *, tlsf);
 3484              		.loc 1 1100 5 is_stmt 1 view .LVU1024
1101:lvgl/src/misc/lv_tlsf.c ****     const size_t adjust = adjust_request_size(size, ALIGN_SIZE);
 3485              		.loc 1 1101 5 view .LVU1025
 3486              		.loc 1 1101 27 is_stmt 0 view .LVU1026
 3487 0006 0421     		movs	r1, #4
 3488              	.LVL338:
 3489              		.loc 1 1101 27 view .LVU1027
 3490 0008 FFF7FEFF 		bl	adjust_request_size
 3491              	.LVL339:
 3492              		.loc 1 1101 27 view .LVU1028
 3493 000c 0546     		mov	r5, r0
 3494              	.LVL340:
1102:lvgl/src/misc/lv_tlsf.c ****     block_header_t * block = block_locate_free(control, adjust);
 3495              		.loc 1 1102 5 is_stmt 1 view .LVU1029
 3496              		.loc 1 1102 30 is_stmt 0 view .LVU1030
 3497 000e 0146     		mov	r1, r0
 3498 0010 2046     		mov	r0, r4
 3499              	.LVL341:
 3500              		.loc 1 1102 30 view .LVU1031
 3501 0012 FFF7FEFF 		bl	block_locate_free
 3502              	.LVL342:
 3503              		.loc 1 1102 30 view .LVU1032
 3504 0016 0146     		mov	r1, r0
 3505              	.LVL343:
1103:lvgl/src/misc/lv_tlsf.c ****     return block_prepare_used(control, block, adjust);
 3506              		.loc 1 1103 5 is_stmt 1 view .LVU1033
 3507              		.loc 1 1103 12 is_stmt 0 view .LVU1034
 3508 0018 2A46     		mov	r2, r5
 3509 001a 2046     		mov	r0, r4
 3510              	.LVL344:
 3511              		.loc 1 1103 12 view .LVU1035
 3512 001c FFF7FEFF 		bl	block_prepare_used
 3513              	.LVL345:
1104:lvgl/src/misc/lv_tlsf.c **** }
 3514              		.loc 1 1104 1 view .LVU1036
 3515 0020 38BD     		pop	{r3, r4, r5, pc}
 3516              		.loc 1 1104 1 view .LVU1037
 3517              		.cfi_endproc
 3518              	.LFE60:
 3520              		.section	.text.lv_tlsf_memalign,"ax",%progbits
 3521              		.align	1
 3522              		.global	lv_tlsf_memalign
 3523              		.syntax unified
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 89


 3524              		.thumb
 3525              		.thumb_func
 3527              	lv_tlsf_memalign:
 3528              	.LVL346:
 3529              	.LFB61:
1105:lvgl/src/misc/lv_tlsf.c **** 
1106:lvgl/src/misc/lv_tlsf.c **** void * lv_tlsf_memalign(lv_tlsf_t tlsf, size_t align, size_t size)
1107:lvgl/src/misc/lv_tlsf.c **** {
 3530              		.loc 1 1107 1 is_stmt 1 view -0
 3531              		.cfi_startproc
 3532              		@ args = 0, pretend = 0, frame = 0
 3533              		@ frame_needed = 0, uses_anonymous_args = 0
 3534              		.loc 1 1107 1 is_stmt 0 view .LVU1039
 3535 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 3536              	.LCFI50:
 3537              		.cfi_def_cfa_offset 24
 3538              		.cfi_offset 4, -24
 3539              		.cfi_offset 5, -20
 3540              		.cfi_offset 6, -16
 3541              		.cfi_offset 7, -12
 3542              		.cfi_offset 8, -8
 3543              		.cfi_offset 14, -4
 3544 0004 0646     		mov	r6, r0
 3545 0006 0C46     		mov	r4, r1
1108:lvgl/src/misc/lv_tlsf.c ****     control_t * control = tlsf_cast(control_t *, tlsf);
 3546              		.loc 1 1108 5 is_stmt 1 view .LVU1040
 3547              	.LVL347:
1109:lvgl/src/misc/lv_tlsf.c ****     const size_t adjust = adjust_request_size(size, ALIGN_SIZE);
 3548              		.loc 1 1109 5 view .LVU1041
 3549              		.loc 1 1109 27 is_stmt 0 view .LVU1042
 3550 0008 0421     		movs	r1, #4
 3551              	.LVL348:
 3552              		.loc 1 1109 27 view .LVU1043
 3553 000a 1046     		mov	r0, r2
 3554              	.LVL349:
 3555              		.loc 1 1109 27 view .LVU1044
 3556 000c FFF7FEFF 		bl	adjust_request_size
 3557              	.LVL350:
 3558              		.loc 1 1109 27 view .LVU1045
 3559 0010 0546     		mov	r5, r0
 3560              	.LVL351:
1110:lvgl/src/misc/lv_tlsf.c **** 
1111:lvgl/src/misc/lv_tlsf.c ****     /*
1112:lvgl/src/misc/lv_tlsf.c ****     ** We must allocate an additional minimum block size bytes so that if
1113:lvgl/src/misc/lv_tlsf.c ****     ** our free block will leave an alignment gap which is smaller, we can
1114:lvgl/src/misc/lv_tlsf.c ****     ** trim a leading free block and release it back to the pool. We must
1115:lvgl/src/misc/lv_tlsf.c ****     ** do this because the previous physical block is in use, therefore
1116:lvgl/src/misc/lv_tlsf.c ****     ** the prev_phys_block field is not valid, and we can't simply adjust
1117:lvgl/src/misc/lv_tlsf.c ****     ** the size of that block.
1118:lvgl/src/misc/lv_tlsf.c ****     */
1119:lvgl/src/misc/lv_tlsf.c ****     const size_t gap_minimum = sizeof(block_header_t);
 3561              		.loc 1 1119 5 is_stmt 1 view .LVU1046
1120:lvgl/src/misc/lv_tlsf.c ****     const size_t size_with_gap = adjust_request_size(adjust + align + gap_minimum, align);
 3562              		.loc 1 1120 5 view .LVU1047
 3563              		.loc 1 1120 61 is_stmt 0 view .LVU1048
 3564 0012 2044     		add	r0, r0, r4
 3565              	.LVL352:
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 90


 3566              		.loc 1 1120 34 view .LVU1049
 3567 0014 2146     		mov	r1, r4
 3568 0016 1030     		adds	r0, r0, #16
 3569 0018 FFF7FEFF 		bl	adjust_request_size
 3570              	.LVL353:
 3571 001c 0146     		mov	r1, r0
 3572              	.LVL354:
1121:lvgl/src/misc/lv_tlsf.c **** 
1122:lvgl/src/misc/lv_tlsf.c ****     /*
1123:lvgl/src/misc/lv_tlsf.c ****     ** If alignment is less than or equals base alignment, we're done.
1124:lvgl/src/misc/lv_tlsf.c ****     ** If we requested 0 bytes, return null, as lv_tlsf_malloc(0) does.
1125:lvgl/src/misc/lv_tlsf.c ****     */
1126:lvgl/src/misc/lv_tlsf.c ****     const size_t aligned_size = (adjust && align > ALIGN_SIZE) ? size_with_gap : adjust;
 3573              		.loc 1 1126 5 is_stmt 1 view .LVU1050
 3574              		.loc 1 1126 80 is_stmt 0 view .LVU1051
 3575 001e 002D     		cmp	r5, #0
 3576 0020 18BF     		it	ne
 3577 0022 042C     		cmpne	r4, #4
 3578 0024 00D8     		bhi	.L240
 3579              		.loc 1 1126 80 discriminator 2 view .LVU1052
 3580 0026 2946     		mov	r1, r5
 3581              	.L240:
 3582              	.LVL355:
1127:lvgl/src/misc/lv_tlsf.c **** 
1128:lvgl/src/misc/lv_tlsf.c ****     block_header_t * block = block_locate_free(control, aligned_size);
 3583              		.loc 1 1128 5 is_stmt 1 view .LVU1053
 3584              		.loc 1 1128 30 is_stmt 0 view .LVU1054
 3585 0028 3046     		mov	r0, r6
 3586              	.LVL356:
 3587              		.loc 1 1128 30 view .LVU1055
 3588 002a FFF7FEFF 		bl	block_locate_free
 3589              	.LVL357:
1129:lvgl/src/misc/lv_tlsf.c **** 
1130:lvgl/src/misc/lv_tlsf.c ****     /* This can't be a static assert. */
1131:lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(sizeof(block_header_t) == block_size_min + block_header_overhead);
 3590              		.loc 1 1131 5 is_stmt 1 view .LVU1056
 3591              		.loc 1 1131 5 view .LVU1057
 3592              		.loc 1 1131 5 discriminator 2 view .LVU1058
1132:lvgl/src/misc/lv_tlsf.c **** 
1133:lvgl/src/misc/lv_tlsf.c ****     if(block) {
 3593              		.loc 1 1133 5 view .LVU1059
 3594              		.loc 1 1133 7 is_stmt 0 view .LVU1060
 3595 002e 0746     		mov	r7, r0
 3596 0030 F8B1     		cbz	r0, .L241
 3597              	.LBB13:
1134:lvgl/src/misc/lv_tlsf.c ****         void * ptr = block_to_ptr(block);
 3598              		.loc 1 1134 9 is_stmt 1 view .LVU1061
 3599              		.loc 1 1134 22 is_stmt 0 view .LVU1062
 3600 0032 FFF7FEFF 		bl	block_to_ptr
 3601              	.LVL358:
 3602              		.loc 1 1134 22 view .LVU1063
 3603 0036 8046     		mov	r8, r0
 3604              	.LVL359:
1135:lvgl/src/misc/lv_tlsf.c ****         void * aligned = align_ptr(ptr, align);
 3605              		.loc 1 1135 9 is_stmt 1 view .LVU1064
 3606              		.loc 1 1135 26 is_stmt 0 view .LVU1065
 3607 0038 2146     		mov	r1, r4
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 91


 3608 003a FFF7FEFF 		bl	align_ptr
 3609              	.LVL360:
1136:lvgl/src/misc/lv_tlsf.c ****         size_t gap = tlsf_cast(size_t,
 3610              		.loc 1 1136 9 is_stmt 1 view .LVU1066
 3611              		.loc 1 1136 22 is_stmt 0 view .LVU1067
 3612 003e A0EB0802 		sub	r2, r0, r8
 3613              	.LVL361:
1137:lvgl/src/misc/lv_tlsf.c ****                                tlsf_cast(tlsfptr_t, aligned) - tlsf_cast(tlsfptr_t, ptr));
1138:lvgl/src/misc/lv_tlsf.c **** 
1139:lvgl/src/misc/lv_tlsf.c ****         /* If gap size is too small, offset to next aligned boundary. */
1140:lvgl/src/misc/lv_tlsf.c ****         if(gap && gap < gap_minimum) {
 3614              		.loc 1 1140 9 is_stmt 1 view .LVU1068
 3615              		.loc 1 1140 16 is_stmt 0 view .LVU1069
 3616 0042 531E     		subs	r3, r2, #1
 3617              		.loc 1 1140 11 view .LVU1070
 3618 0044 0E2B     		cmp	r3, #14
 3619 0046 03D9     		bls	.L247
 3620              	.L242:
1141:lvgl/src/misc/lv_tlsf.c ****             const size_t gap_remain = gap_minimum - gap;
1142:lvgl/src/misc/lv_tlsf.c ****             const size_t offset = tlsf_max(gap_remain, align);
1143:lvgl/src/misc/lv_tlsf.c ****             const void * next_aligned = tlsf_cast(void *,
1144:lvgl/src/misc/lv_tlsf.c ****                                                   tlsf_cast(tlsfptr_t, aligned) + offset);
1145:lvgl/src/misc/lv_tlsf.c **** 
1146:lvgl/src/misc/lv_tlsf.c ****             aligned = align_ptr(next_aligned, align);
1147:lvgl/src/misc/lv_tlsf.c ****             gap = tlsf_cast(size_t,
1148:lvgl/src/misc/lv_tlsf.c ****                             tlsf_cast(tlsfptr_t, aligned) - tlsf_cast(tlsfptr_t, ptr));
1149:lvgl/src/misc/lv_tlsf.c ****         }
1150:lvgl/src/misc/lv_tlsf.c **** 
1151:lvgl/src/misc/lv_tlsf.c ****         if(gap) {
 3621              		.loc 1 1151 9 is_stmt 1 view .LVU1071
 3622              		.loc 1 1151 11 is_stmt 0 view .LVU1072
 3623 0048 9AB1     		cbz	r2, .L241
1152:lvgl/src/misc/lv_tlsf.c ****             tlsf_assert(gap >= gap_minimum && "gap size too small");
 3624              		.loc 1 1152 13 is_stmt 1 view .LVU1073
 3625              		.loc 1 1152 13 view .LVU1074
 3626 004a 0F2A     		cmp	r2, #15
 3627 004c 0CD8     		bhi	.L243
 3628              	.L244:
 3629              		.loc 1 1152 13 discriminator 1 view .LVU1075
 3630              		.loc 1 1152 13 discriminator 1 view .LVU1076
 3631              		.loc 1 1152 13 discriminator 1 view .LVU1077
 3632              		.loc 1 1152 13 discriminator 1 view .LVU1078
 3633              		.loc 1 1152 13 discriminator 1 view .LVU1079
 3634 004e FEE7     		b	.L244
 3635              	.L247:
 3636              	.LBB14:
1141:lvgl/src/misc/lv_tlsf.c ****             const size_t gap_remain = gap_minimum - gap;
 3637              		.loc 1 1141 13 view .LVU1080
1141:lvgl/src/misc/lv_tlsf.c ****             const size_t gap_remain = gap_minimum - gap;
 3638              		.loc 1 1141 26 is_stmt 0 view .LVU1081
 3639 0050 C2F11002 		rsb	r2, r2, #16
 3640              	.LVL362:
1142:lvgl/src/misc/lv_tlsf.c ****             const void * next_aligned = tlsf_cast(void *,
 3641              		.loc 1 1142 13 is_stmt 1 view .LVU1082
1143:lvgl/src/misc/lv_tlsf.c ****                                                   tlsf_cast(tlsfptr_t, aligned) + offset);
 3642              		.loc 1 1143 13 view .LVU1083
1146:lvgl/src/misc/lv_tlsf.c ****             gap = tlsf_cast(size_t,
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 92


 3643              		.loc 1 1146 13 view .LVU1084
1146:lvgl/src/misc/lv_tlsf.c ****             gap = tlsf_cast(size_t,
 3644              		.loc 1 1146 23 is_stmt 0 view .LVU1085
 3645 0054 2146     		mov	r1, r4
 3646 0056 9442     		cmp	r4, r2
 3647 0058 2CBF     		ite	cs
 3648 005a 0019     		addcs	r0, r0, r4
 3649 005c 8018     		addcc	r0, r0, r2
 3650              	.LVL363:
1146:lvgl/src/misc/lv_tlsf.c ****             gap = tlsf_cast(size_t,
 3651              		.loc 1 1146 23 view .LVU1086
 3652 005e FFF7FEFF 		bl	align_ptr
 3653              	.LVL364:
1147:lvgl/src/misc/lv_tlsf.c ****                             tlsf_cast(tlsfptr_t, aligned) - tlsf_cast(tlsfptr_t, ptr));
 3654              		.loc 1 1147 13 is_stmt 1 view .LVU1087
1147:lvgl/src/misc/lv_tlsf.c ****                             tlsf_cast(tlsfptr_t, aligned) - tlsf_cast(tlsfptr_t, ptr));
 3655              		.loc 1 1147 19 is_stmt 0 view .LVU1088
 3656 0062 A0EB0802 		sub	r2, r0, r8
 3657              	.LVL365:
1147:lvgl/src/misc/lv_tlsf.c ****                             tlsf_cast(tlsfptr_t, aligned) - tlsf_cast(tlsfptr_t, ptr));
 3658              		.loc 1 1147 19 view .LVU1089
 3659 0066 EFE7     		b	.L242
 3660              	.LVL366:
 3661              	.L243:
1147:lvgl/src/misc/lv_tlsf.c ****                             tlsf_cast(tlsfptr_t, aligned) - tlsf_cast(tlsfptr_t, ptr));
 3662              		.loc 1 1147 19 view .LVU1090
 3663              	.LBE14:
 3664              		.loc 1 1152 13 is_stmt 1 discriminator 2 view .LVU1091
1153:lvgl/src/misc/lv_tlsf.c ****             block = block_trim_free_leading(control, block, gap);
 3665              		.loc 1 1153 13 view .LVU1092
 3666              		.loc 1 1153 21 is_stmt 0 view .LVU1093
 3667 0068 3946     		mov	r1, r7
 3668 006a 3046     		mov	r0, r6
 3669              	.LVL367:
 3670              		.loc 1 1153 21 view .LVU1094
 3671 006c FFF7FEFF 		bl	block_trim_free_leading
 3672              	.LVL368:
 3673              		.loc 1 1153 21 view .LVU1095
 3674 0070 0746     		mov	r7, r0
 3675              	.LVL369:
 3676              	.L241:
 3677              		.loc 1 1153 21 view .LVU1096
 3678              	.LBE13:
1154:lvgl/src/misc/lv_tlsf.c ****         }
1155:lvgl/src/misc/lv_tlsf.c ****     }
1156:lvgl/src/misc/lv_tlsf.c **** 
1157:lvgl/src/misc/lv_tlsf.c ****     return block_prepare_used(control, block, adjust);
 3679              		.loc 1 1157 5 is_stmt 1 view .LVU1097
 3680              		.loc 1 1157 12 is_stmt 0 view .LVU1098
 3681 0072 2A46     		mov	r2, r5
 3682 0074 3946     		mov	r1, r7
 3683 0076 3046     		mov	r0, r6
 3684 0078 FFF7FEFF 		bl	block_prepare_used
 3685              	.LVL370:
1158:lvgl/src/misc/lv_tlsf.c **** }
 3686              		.loc 1 1158 1 view .LVU1099
 3687 007c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 93


 3688              		.loc 1 1158 1 view .LVU1100
 3689              		.cfi_endproc
 3690              	.LFE61:
 3692              		.section	.text.lv_tlsf_free,"ax",%progbits
 3693              		.align	1
 3694              		.global	lv_tlsf_free
 3695              		.syntax unified
 3696              		.thumb
 3697              		.thumb_func
 3699              	lv_tlsf_free:
 3700              	.LVL371:
 3701              	.LFB62:
1159:lvgl/src/misc/lv_tlsf.c **** 
1160:lvgl/src/misc/lv_tlsf.c **** void lv_tlsf_free(lv_tlsf_t tlsf, const void * ptr)
1161:lvgl/src/misc/lv_tlsf.c **** {
 3702              		.loc 1 1161 1 is_stmt 1 view -0
 3703              		.cfi_startproc
 3704              		@ args = 0, pretend = 0, frame = 0
 3705              		@ frame_needed = 0, uses_anonymous_args = 0
1162:lvgl/src/misc/lv_tlsf.c ****     /* Don't attempt to free a NULL pointer. */
1163:lvgl/src/misc/lv_tlsf.c ****     if(ptr) {
 3706              		.loc 1 1163 5 view .LVU1102
 3707              		.loc 1 1163 7 is_stmt 0 view .LVU1103
 3708 0000 C9B1     		cbz	r1, .L253
1161:lvgl/src/misc/lv_tlsf.c ****     /* Don't attempt to free a NULL pointer. */
 3709              		.loc 1 1161 1 view .LVU1104
 3710 0002 38B5     		push	{r3, r4, r5, lr}
 3711              	.LCFI51:
 3712              		.cfi_def_cfa_offset 16
 3713              		.cfi_offset 3, -16
 3714              		.cfi_offset 4, -12
 3715              		.cfi_offset 5, -8
 3716              		.cfi_offset 14, -4
 3717 0004 0446     		mov	r4, r0
 3718 0006 0846     		mov	r0, r1
 3719              	.LVL372:
 3720              	.LBB15:
1164:lvgl/src/misc/lv_tlsf.c ****         control_t * control = tlsf_cast(control_t *, tlsf);
 3721              		.loc 1 1164 9 is_stmt 1 view .LVU1105
1165:lvgl/src/misc/lv_tlsf.c ****         block_header_t * block = block_from_ptr(ptr);
 3722              		.loc 1 1165 9 view .LVU1106
 3723              		.loc 1 1165 34 is_stmt 0 view .LVU1107
 3724 0008 FFF7FEFF 		bl	block_from_ptr
 3725              	.LVL373:
 3726              		.loc 1 1165 34 view .LVU1108
 3727 000c 0546     		mov	r5, r0
 3728              	.LVL374:
1166:lvgl/src/misc/lv_tlsf.c ****         tlsf_assert(!block_is_free(block) && "block already marked as free");
 3729              		.loc 1 1166 9 is_stmt 1 view .LVU1109
 3730              		.loc 1 1166 9 view .LVU1110
 3731 000e FFF7FEFF 		bl	block_is_free
 3732              	.LVL375:
 3733              		.loc 1 1166 9 is_stmt 0 discriminator 1 view .LVU1111
 3734 0012 00B1     		cbz	r0, .L250
 3735              	.L251:
 3736              		.loc 1 1166 9 is_stmt 1 discriminator 1 view .LVU1112
 3737              		.loc 1 1166 9 discriminator 1 view .LVU1113
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 94


 3738              		.loc 1 1166 9 discriminator 1 view .LVU1114
 3739              		.loc 1 1166 9 discriminator 1 view .LVU1115
 3740              		.loc 1 1166 9 discriminator 1 view .LVU1116
 3741 0014 FEE7     		b	.L251
 3742              	.L250:
 3743              		.loc 1 1166 9 discriminator 2 view .LVU1117
1167:lvgl/src/misc/lv_tlsf.c ****         block_mark_as_free(block);
 3744              		.loc 1 1167 9 view .LVU1118
 3745 0016 2846     		mov	r0, r5
 3746 0018 FFF7FEFF 		bl	block_mark_as_free
 3747              	.LVL376:
1168:lvgl/src/misc/lv_tlsf.c ****         block = block_merge_prev(control, block);
 3748              		.loc 1 1168 9 view .LVU1119
 3749              		.loc 1 1168 17 is_stmt 0 view .LVU1120
 3750 001c 2946     		mov	r1, r5
 3751 001e 2046     		mov	r0, r4
 3752 0020 FFF7FEFF 		bl	block_merge_prev
 3753              	.LVL377:
 3754 0024 0146     		mov	r1, r0
 3755              	.LVL378:
1169:lvgl/src/misc/lv_tlsf.c ****         block = block_merge_next(control, block);
 3756              		.loc 1 1169 9 is_stmt 1 view .LVU1121
 3757              		.loc 1 1169 17 is_stmt 0 view .LVU1122
 3758 0026 2046     		mov	r0, r4
 3759              	.LVL379:
 3760              		.loc 1 1169 17 view .LVU1123
 3761 0028 FFF7FEFF 		bl	block_merge_next
 3762              	.LVL380:
 3763              		.loc 1 1169 17 view .LVU1124
 3764 002c 0146     		mov	r1, r0
 3765              	.LVL381:
1170:lvgl/src/misc/lv_tlsf.c ****         block_insert(control, block);
 3766              		.loc 1 1170 9 is_stmt 1 view .LVU1125
 3767 002e 2046     		mov	r0, r4
 3768              	.LVL382:
 3769              		.loc 1 1170 9 is_stmt 0 view .LVU1126
 3770 0030 FFF7FEFF 		bl	block_insert
 3771              	.LVL383:
 3772              		.loc 1 1170 9 view .LVU1127
 3773              	.LBE15:
1171:lvgl/src/misc/lv_tlsf.c ****     }
1172:lvgl/src/misc/lv_tlsf.c **** }
 3774              		.loc 1 1172 1 view .LVU1128
 3775 0034 38BD     		pop	{r3, r4, r5, pc}
 3776              	.LVL384:
 3777              	.L253:
 3778              	.LCFI52:
 3779              		.cfi_def_cfa_offset 0
 3780              		.cfi_restore 3
 3781              		.cfi_restore 4
 3782              		.cfi_restore 5
 3783              		.cfi_restore 14
 3784              		.loc 1 1172 1 view .LVU1129
 3785 0036 7047     		bx	lr
 3786              		.cfi_endproc
 3787              	.LFE62:
 3789              		.section	.text.lv_tlsf_realloc,"ax",%progbits
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 95


 3790              		.align	1
 3791              		.global	lv_tlsf_realloc
 3792              		.syntax unified
 3793              		.thumb
 3794              		.thumb_func
 3796              	lv_tlsf_realloc:
 3797              	.LVL385:
 3798              	.LFB63:
1173:lvgl/src/misc/lv_tlsf.c **** 
1174:lvgl/src/misc/lv_tlsf.c **** /*
1175:lvgl/src/misc/lv_tlsf.c **** ** The TLSF block information provides us with enough information to
1176:lvgl/src/misc/lv_tlsf.c **** ** provide a reasonably intelligent implementation of realloc, growing or
1177:lvgl/src/misc/lv_tlsf.c **** ** shrinking the currently allocated block as required.
1178:lvgl/src/misc/lv_tlsf.c **** **
1179:lvgl/src/misc/lv_tlsf.c **** ** This routine handles the somewhat esoteric edge cases of realloc:
1180:lvgl/src/misc/lv_tlsf.c **** ** - a non-zero size with a null pointer will behave like malloc
1181:lvgl/src/misc/lv_tlsf.c **** ** - a zero size with a non-null pointer will behave like free
1182:lvgl/src/misc/lv_tlsf.c **** ** - a request that cannot be satisfied will leave the original buffer
1183:lvgl/src/misc/lv_tlsf.c **** **   untouched
1184:lvgl/src/misc/lv_tlsf.c **** ** - an extended buffer size will leave the newly-allocated area with
1185:lvgl/src/misc/lv_tlsf.c **** **   contents undefined
1186:lvgl/src/misc/lv_tlsf.c **** */
1187:lvgl/src/misc/lv_tlsf.c **** void * lv_tlsf_realloc(lv_tlsf_t tlsf, void * ptr, size_t size)
1188:lvgl/src/misc/lv_tlsf.c **** {
 3799              		.loc 1 1188 1 is_stmt 1 view -0
 3800              		.cfi_startproc
 3801              		@ args = 0, pretend = 0, frame = 0
 3802              		@ frame_needed = 0, uses_anonymous_args = 0
 3803              		.loc 1 1188 1 is_stmt 0 view .LVU1131
 3804 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 3805              	.LCFI53:
 3806              		.cfi_def_cfa_offset 40
 3807              		.cfi_offset 3, -40
 3808              		.cfi_offset 4, -36
 3809              		.cfi_offset 5, -32
 3810              		.cfi_offset 6, -28
 3811              		.cfi_offset 7, -24
 3812              		.cfi_offset 8, -20
 3813              		.cfi_offset 9, -16
 3814              		.cfi_offset 10, -12
 3815              		.cfi_offset 11, -8
 3816              		.cfi_offset 14, -4
 3817 0004 0446     		mov	r4, r0
1189:lvgl/src/misc/lv_tlsf.c ****     control_t * control = tlsf_cast(control_t *, tlsf);
 3818              		.loc 1 1189 5 is_stmt 1 view .LVU1132
 3819              	.LVL386:
1190:lvgl/src/misc/lv_tlsf.c ****     void * p = 0;
 3820              		.loc 1 1190 5 view .LVU1133
1191:lvgl/src/misc/lv_tlsf.c **** 
1192:lvgl/src/misc/lv_tlsf.c ****     /* Zero-size requests are treated as free. */
1193:lvgl/src/misc/lv_tlsf.c ****     if(ptr && size == 0) {
 3821              		.loc 1 1193 5 view .LVU1134
 3822              		.loc 1 1193 8 is_stmt 0 view .LVU1135
 3823 0006 0E46     		mov	r6, r1
 3824              		.loc 1 1193 12 view .LVU1136
 3825 0008 0039     		subs	r1, r1, #0
 3826              	.LVL387:
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 96


 3827              		.loc 1 1193 12 view .LVU1137
 3828 000a 18BF     		it	ne
 3829 000c 0121     		movne	r1, #1
 3830 000e 002A     		cmp	r2, #0
 3831 0010 18BF     		it	ne
 3832 0012 0021     		movne	r1, #0
 3833              		.loc 1 1193 7 view .LVU1138
 3834 0014 E9B9     		cbnz	r1, .L266
 3835 0016 9046     		mov	r8, r2
1194:lvgl/src/misc/lv_tlsf.c ****         lv_tlsf_free(tlsf, ptr);
1195:lvgl/src/misc/lv_tlsf.c ****     }
1196:lvgl/src/misc/lv_tlsf.c ****     /* Requests with NULL pointers are treated as malloc. */
1197:lvgl/src/misc/lv_tlsf.c ****     else if(!ptr) {
 3836              		.loc 1 1197 10 is_stmt 1 view .LVU1139
 3837              		.loc 1 1197 12 is_stmt 0 view .LVU1140
 3838 0018 06B3     		cbz	r6, .L267
 3839              	.LBB16:
1198:lvgl/src/misc/lv_tlsf.c ****         p = lv_tlsf_malloc(tlsf, size);
1199:lvgl/src/misc/lv_tlsf.c ****     }
1200:lvgl/src/misc/lv_tlsf.c ****     else {
1201:lvgl/src/misc/lv_tlsf.c ****         block_header_t * block = block_from_ptr(ptr);
 3840              		.loc 1 1201 9 is_stmt 1 view .LVU1141
 3841              		.loc 1 1201 34 is_stmt 0 view .LVU1142
 3842 001a 3046     		mov	r0, r6
 3843              	.LVL388:
 3844              		.loc 1 1201 34 view .LVU1143
 3845 001c FFF7FEFF 		bl	block_from_ptr
 3846              	.LVL389:
 3847              		.loc 1 1201 34 view .LVU1144
 3848 0020 0546     		mov	r5, r0
 3849              	.LVL390:
1202:lvgl/src/misc/lv_tlsf.c ****         block_header_t * next = block_next(block);
 3850              		.loc 1 1202 9 is_stmt 1 view .LVU1145
 3851              		.loc 1 1202 33 is_stmt 0 view .LVU1146
 3852 0022 FFF7FEFF 		bl	block_next
 3853              	.LVL391:
 3854              		.loc 1 1202 33 view .LVU1147
 3855 0026 8246     		mov	r10, r0
 3856              	.LVL392:
1203:lvgl/src/misc/lv_tlsf.c **** 
1204:lvgl/src/misc/lv_tlsf.c ****         const size_t cursize = block_size(block);
 3857              		.loc 1 1204 9 is_stmt 1 view .LVU1148
 3858              		.loc 1 1204 32 is_stmt 0 view .LVU1149
 3859 0028 2846     		mov	r0, r5
 3860              	.LVL393:
 3861              		.loc 1 1204 32 view .LVU1150
 3862 002a FFF7FEFF 		bl	block_size
 3863              	.LVL394:
 3864 002e 8146     		mov	r9, r0
 3865              	.LVL395:
1205:lvgl/src/misc/lv_tlsf.c ****         const size_t combined = cursize + block_size(next) + block_header_overhead;
 3866              		.loc 1 1205 9 is_stmt 1 view .LVU1151
 3867              		.loc 1 1205 43 is_stmt 0 view .LVU1152
 3868 0030 5046     		mov	r0, r10
 3869              	.LVL396:
 3870              		.loc 1 1205 43 view .LVU1153
 3871 0032 FFF7FEFF 		bl	block_size
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 97


 3872              	.LVL397:
 3873              		.loc 1 1205 41 discriminator 1 view .LVU1154
 3874 0036 00EB0903 		add	r3, r0, r9
 3875              		.loc 1 1205 22 discriminator 1 view .LVU1155
 3876 003a 03F1040B 		add	fp, r3, #4
 3877              	.LVL398:
1206:lvgl/src/misc/lv_tlsf.c ****         const size_t adjust = adjust_request_size(size, ALIGN_SIZE);
 3878              		.loc 1 1206 9 is_stmt 1 view .LVU1156
 3879              		.loc 1 1206 31 is_stmt 0 view .LVU1157
 3880 003e 0421     		movs	r1, #4
 3881 0040 4046     		mov	r0, r8
 3882 0042 FFF7FEFF 		bl	adjust_request_size
 3883              	.LVL399:
 3884 0046 0746     		mov	r7, r0
 3885              	.LVL400:
1207:lvgl/src/misc/lv_tlsf.c **** 
1208:lvgl/src/misc/lv_tlsf.c ****         tlsf_assert(!block_is_free(block) && "block already marked as free");
 3886              		.loc 1 1208 9 is_stmt 1 view .LVU1158
 3887              		.loc 1 1208 9 view .LVU1159
 3888 0048 2846     		mov	r0, r5
 3889              	.LVL401:
 3890              		.loc 1 1208 9 is_stmt 0 view .LVU1160
 3891 004a FFF7FEFF 		bl	block_is_free
 3892              	.LVL402:
 3893              		.loc 1 1208 9 discriminator 1 view .LVU1161
 3894 004e 60B1     		cbz	r0, .L260
 3895              	.L261:
 3896              		.loc 1 1208 9 is_stmt 1 discriminator 1 view .LVU1162
 3897              		.loc 1 1208 9 discriminator 1 view .LVU1163
 3898              		.loc 1 1208 9 discriminator 1 view .LVU1164
 3899              		.loc 1 1208 9 discriminator 1 view .LVU1165
 3900              		.loc 1 1208 9 discriminator 1 view .LVU1166
 3901 0050 FEE7     		b	.L261
 3902              	.LVL403:
 3903              	.L266:
 3904              		.loc 1 1208 9 is_stmt 0 discriminator 1 view .LVU1167
 3905              	.LBE16:
1194:lvgl/src/misc/lv_tlsf.c ****     }
 3906              		.loc 1 1194 9 is_stmt 1 view .LVU1168
 3907 0052 3146     		mov	r1, r6
 3908 0054 FFF7FEFF 		bl	lv_tlsf_free
 3909              	.LVL404:
1190:lvgl/src/misc/lv_tlsf.c **** 
 3910              		.loc 1 1190 12 is_stmt 0 view .LVU1169
 3911 0058 0025     		movs	r5, #0
 3912 005a 03E0     		b	.L256
 3913              	.LVL405:
 3914              	.L267:
1198:lvgl/src/misc/lv_tlsf.c ****     }
 3915              		.loc 1 1198 9 is_stmt 1 view .LVU1170
1198:lvgl/src/misc/lv_tlsf.c ****     }
 3916              		.loc 1 1198 13 is_stmt 0 view .LVU1171
 3917 005c 1146     		mov	r1, r2
 3918 005e FFF7FEFF 		bl	lv_tlsf_malloc
 3919              	.LVL406:
1198:lvgl/src/misc/lv_tlsf.c ****     }
 3920              		.loc 1 1198 13 view .LVU1172
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 98


 3921 0062 0546     		mov	r5, r0
 3922              	.LVL407:
 3923              	.L256:
1209:lvgl/src/misc/lv_tlsf.c **** 
1210:lvgl/src/misc/lv_tlsf.c ****         /*
1211:lvgl/src/misc/lv_tlsf.c ****         ** If the next block is used, or when combined with the current
1212:lvgl/src/misc/lv_tlsf.c ****         ** block, does not offer enough space, we must reallocate and copy.
1213:lvgl/src/misc/lv_tlsf.c ****         */
1214:lvgl/src/misc/lv_tlsf.c ****         if(adjust > cursize && (!block_is_free(next) || adjust > combined)) {
1215:lvgl/src/misc/lv_tlsf.c ****             p = lv_tlsf_malloc(tlsf, size);
1216:lvgl/src/misc/lv_tlsf.c ****             if(p) {
1217:lvgl/src/misc/lv_tlsf.c ****                 const size_t minsize = tlsf_min(cursize, size);
1218:lvgl/src/misc/lv_tlsf.c ****                 lv_memcpy(p, ptr, minsize);
1219:lvgl/src/misc/lv_tlsf.c ****                 lv_tlsf_free(tlsf, ptr);
1220:lvgl/src/misc/lv_tlsf.c ****             }
1221:lvgl/src/misc/lv_tlsf.c ****         }
1222:lvgl/src/misc/lv_tlsf.c ****         else {
1223:lvgl/src/misc/lv_tlsf.c ****             /* Do we need to expand to the next block? */
1224:lvgl/src/misc/lv_tlsf.c ****             if(adjust > cursize) {
1225:lvgl/src/misc/lv_tlsf.c ****                 block_merge_next(control, block);
1226:lvgl/src/misc/lv_tlsf.c ****                 block_mark_as_used(block);
1227:lvgl/src/misc/lv_tlsf.c ****             }
1228:lvgl/src/misc/lv_tlsf.c **** 
1229:lvgl/src/misc/lv_tlsf.c ****             /* Trim the resulting block and return the original pointer. */
1230:lvgl/src/misc/lv_tlsf.c ****             block_trim_used(control, block, adjust);
1231:lvgl/src/misc/lv_tlsf.c ****             p = ptr;
1232:lvgl/src/misc/lv_tlsf.c ****         }
1233:lvgl/src/misc/lv_tlsf.c ****     }
1234:lvgl/src/misc/lv_tlsf.c **** 
1235:lvgl/src/misc/lv_tlsf.c ****     return p;
1236:lvgl/src/misc/lv_tlsf.c **** }
 3924              		.loc 1 1236 1 view .LVU1173
 3925 0064 2846     		mov	r0, r5
 3926 0066 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3927              	.LVL408:
 3928              	.L260:
 3929              	.LBB18:
1208:lvgl/src/misc/lv_tlsf.c **** 
 3930              		.loc 1 1208 9 is_stmt 1 discriminator 2 view .LVU1174
1214:lvgl/src/misc/lv_tlsf.c ****             p = lv_tlsf_malloc(tlsf, size);
 3931              		.loc 1 1214 9 view .LVU1175
1214:lvgl/src/misc/lv_tlsf.c ****             p = lv_tlsf_malloc(tlsf, size);
 3932              		.loc 1 1214 11 is_stmt 0 view .LVU1176
 3933 006a B945     		cmp	r9, r7
 3934 006c 18D2     		bcs	.L262
1214:lvgl/src/misc/lv_tlsf.c ****             p = lv_tlsf_malloc(tlsf, size);
 3935              		.loc 1 1214 34 discriminator 1 view .LVU1177
 3936 006e 5046     		mov	r0, r10
 3937 0070 FFF7FEFF 		bl	block_is_free
 3938              	.LVL409:
1214:lvgl/src/misc/lv_tlsf.c ****             p = lv_tlsf_malloc(tlsf, size);
 3939              		.loc 1 1214 29 discriminator 1 view .LVU1178
 3940 0074 08B1     		cbz	r0, .L263
1214:lvgl/src/misc/lv_tlsf.c ****             p = lv_tlsf_malloc(tlsf, size);
 3941              		.loc 1 1214 54 discriminator 2 view .LVU1179
 3942 0076 BB45     		cmp	fp, r7
 3943 0078 12D2     		bcs	.L262
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 99


 3944              	.L263:
1215:lvgl/src/misc/lv_tlsf.c ****             if(p) {
 3945              		.loc 1 1215 13 is_stmt 1 view .LVU1180
1215:lvgl/src/misc/lv_tlsf.c ****             if(p) {
 3946              		.loc 1 1215 17 is_stmt 0 view .LVU1181
 3947 007a 4146     		mov	r1, r8
 3948 007c 2046     		mov	r0, r4
 3949 007e FFF7FEFF 		bl	lv_tlsf_malloc
 3950              	.LVL410:
1216:lvgl/src/misc/lv_tlsf.c ****                 const size_t minsize = tlsf_min(cursize, size);
 3951              		.loc 1 1216 13 is_stmt 1 view .LVU1182
1216:lvgl/src/misc/lv_tlsf.c ****                 const size_t minsize = tlsf_min(cursize, size);
 3952              		.loc 1 1216 15 is_stmt 0 view .LVU1183
 3953 0082 0546     		mov	r5, r0
 3954              	.LVL411:
1216:lvgl/src/misc/lv_tlsf.c ****                 const size_t minsize = tlsf_min(cursize, size);
 3955              		.loc 1 1216 15 view .LVU1184
 3956 0084 0028     		cmp	r0, #0
 3957 0086 EDD0     		beq	.L256
 3958              	.LBB17:
1217:lvgl/src/misc/lv_tlsf.c ****                 lv_memcpy(p, ptr, minsize);
 3959              		.loc 1 1217 17 is_stmt 1 view .LVU1185
 3960              	.LVL412:
1218:lvgl/src/misc/lv_tlsf.c ****                 lv_tlsf_free(tlsf, ptr);
 3961              		.loc 1 1218 17 view .LVU1186
 3962 0088 4246     		mov	r2, r8
 3963 008a C845     		cmp	r8, r9
 3964 008c 28BF     		it	cs
 3965 008e 4A46     		movcs	r2, r9
 3966 0090 3146     		mov	r1, r6
 3967 0092 FFF7FEFF 		bl	lv_memcpy
 3968              	.LVL413:
1219:lvgl/src/misc/lv_tlsf.c ****             }
 3969              		.loc 1 1219 17 view .LVU1187
 3970 0096 3146     		mov	r1, r6
 3971 0098 2046     		mov	r0, r4
 3972 009a FFF7FEFF 		bl	lv_tlsf_free
 3973              	.LVL414:
 3974 009e E1E7     		b	.L256
 3975              	.LVL415:
 3976              	.L262:
1219:lvgl/src/misc/lv_tlsf.c ****             }
 3977              		.loc 1 1219 17 is_stmt 0 view .LVU1188
 3978              	.LBE17:
1224:lvgl/src/misc/lv_tlsf.c ****                 block_merge_next(control, block);
 3979              		.loc 1 1224 13 is_stmt 1 view .LVU1189
1224:lvgl/src/misc/lv_tlsf.c ****                 block_merge_next(control, block);
 3980              		.loc 1 1224 15 is_stmt 0 view .LVU1190
 3981 00a0 B945     		cmp	r9, r7
 3982 00a2 06D3     		bcc	.L268
 3983              	.L264:
1230:lvgl/src/misc/lv_tlsf.c ****             p = ptr;
 3984              		.loc 1 1230 13 is_stmt 1 view .LVU1191
 3985 00a4 3A46     		mov	r2, r7
 3986 00a6 2946     		mov	r1, r5
 3987 00a8 2046     		mov	r0, r4
 3988 00aa FFF7FEFF 		bl	block_trim_used
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 100


 3989              	.LVL416:
1231:lvgl/src/misc/lv_tlsf.c ****         }
 3990              		.loc 1 1231 13 view .LVU1192
1231:lvgl/src/misc/lv_tlsf.c ****         }
 3991              		.loc 1 1231 15 is_stmt 0 view .LVU1193
 3992 00ae 3546     		mov	r5, r6
 3993              	.LVL417:
1231:lvgl/src/misc/lv_tlsf.c ****         }
 3994              		.loc 1 1231 15 view .LVU1194
 3995              	.LBE18:
1235:lvgl/src/misc/lv_tlsf.c **** }
 3996              		.loc 1 1235 5 is_stmt 1 view .LVU1195
1235:lvgl/src/misc/lv_tlsf.c **** }
 3997              		.loc 1 1235 12 is_stmt 0 view .LVU1196
 3998 00b0 D8E7     		b	.L256
 3999              	.LVL418:
 4000              	.L268:
 4001              	.LBB19:
1225:lvgl/src/misc/lv_tlsf.c ****                 block_mark_as_used(block);
 4002              		.loc 1 1225 17 is_stmt 1 view .LVU1197
 4003 00b2 2946     		mov	r1, r5
 4004 00b4 2046     		mov	r0, r4
 4005 00b6 FFF7FEFF 		bl	block_merge_next
 4006              	.LVL419:
1226:lvgl/src/misc/lv_tlsf.c ****             }
 4007              		.loc 1 1226 17 view .LVU1198
 4008 00ba 2846     		mov	r0, r5
 4009 00bc FFF7FEFF 		bl	block_mark_as_used
 4010              	.LVL420:
 4011 00c0 F0E7     		b	.L264
 4012              	.LBE19:
 4013              		.cfi_endproc
 4014              	.LFE63:
 4016              		.text
 4017              	.Letext0:
 4018              		.file 2 "D:/armtoolchain/arm-gnu-toolchain-13.3.rel1-mingw-w64-i686-arm-none-eabi/lib/gcc/arm-none
 4019              		.file 3 "lvgl/src/misc/lv_tlsf.h"
 4020              		.file 4 "lvgl/src/misc/lv_mem.h"
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 101


DEFINED SYMBOLS
                            *ABS*:00000000 lv_tlsf.c
C:\usertemp\cc0gL4jD.s:20     .text.block_size:00000000 $t
C:\usertemp\cc0gL4jD.s:25     .text.block_size:00000000 block_size
C:\usertemp\cc0gL4jD.s:44     .text.block_set_size:00000000 $t
C:\usertemp\cc0gL4jD.s:49     .text.block_set_size:00000000 block_set_size
C:\usertemp\cc0gL4jD.s:76     .text.block_is_last:00000000 $t
C:\usertemp\cc0gL4jD.s:81     .text.block_is_last:00000000 block_is_last
C:\usertemp\cc0gL4jD.s:106    .text.block_is_free:00000000 $t
C:\usertemp\cc0gL4jD.s:111    .text.block_is_free:00000000 block_is_free
C:\usertemp\cc0gL4jD.s:130    .text.block_set_free:00000000 $t
C:\usertemp\cc0gL4jD.s:135    .text.block_set_free:00000000 block_set_free
C:\usertemp\cc0gL4jD.s:155    .text.block_set_used:00000000 $t
C:\usertemp\cc0gL4jD.s:160    .text.block_set_used:00000000 block_set_used
C:\usertemp\cc0gL4jD.s:180    .text.block_is_prev_free:00000000 $t
C:\usertemp\cc0gL4jD.s:185    .text.block_is_prev_free:00000000 block_is_prev_free
C:\usertemp\cc0gL4jD.s:204    .text.block_set_prev_free:00000000 $t
C:\usertemp\cc0gL4jD.s:209    .text.block_set_prev_free:00000000 block_set_prev_free
C:\usertemp\cc0gL4jD.s:229    .text.block_set_prev_used:00000000 $t
C:\usertemp\cc0gL4jD.s:234    .text.block_set_prev_used:00000000 block_set_prev_used
C:\usertemp\cc0gL4jD.s:254    .text.block_from_ptr:00000000 $t
C:\usertemp\cc0gL4jD.s:259    .text.block_from_ptr:00000000 block_from_ptr
C:\usertemp\cc0gL4jD.s:277    .text.block_to_ptr:00000000 $t
C:\usertemp\cc0gL4jD.s:282    .text.block_to_ptr:00000000 block_to_ptr
C:\usertemp\cc0gL4jD.s:300    .text.offset_to_block:00000000 $t
C:\usertemp\cc0gL4jD.s:305    .text.offset_to_block:00000000 offset_to_block
C:\usertemp\cc0gL4jD.s:323    .text.block_prev:00000000 $t
C:\usertemp\cc0gL4jD.s:328    .text.block_prev:00000000 block_prev
C:\usertemp\cc0gL4jD.s:366    .text.block_next:00000000 $t
C:\usertemp\cc0gL4jD.s:371    .text.block_next:00000000 block_next
C:\usertemp\cc0gL4jD.s:429    .text.block_link_next:00000000 $t
C:\usertemp\cc0gL4jD.s:434    .text.block_link_next:00000000 block_link_next
C:\usertemp\cc0gL4jD.s:463    .text.block_mark_as_free:00000000 $t
C:\usertemp\cc0gL4jD.s:468    .text.block_mark_as_free:00000000 block_mark_as_free
C:\usertemp\cc0gL4jD.s:500    .text.block_mark_as_used:00000000 $t
C:\usertemp\cc0gL4jD.s:505    .text.block_mark_as_used:00000000 block_mark_as_used
C:\usertemp\cc0gL4jD.s:537    .text.align_up:00000000 $t
C:\usertemp\cc0gL4jD.s:542    .text.align_up:00000000 align_up
C:\usertemp\cc0gL4jD.s:580    .text.align_down:00000000 $t
C:\usertemp\cc0gL4jD.s:585    .text.align_down:00000000 align_down
C:\usertemp\cc0gL4jD.s:620    .text.align_ptr:00000000 $t
C:\usertemp\cc0gL4jD.s:625    .text.align_ptr:00000000 align_ptr
C:\usertemp\cc0gL4jD.s:665    .text.adjust_request_size:00000000 $t
C:\usertemp\cc0gL4jD.s:670    .text.adjust_request_size:00000000 adjust_request_size
C:\usertemp\cc0gL4jD.s:725    .text.remove_free_block:00000000 $t
C:\usertemp\cc0gL4jD.s:730    .text.remove_free_block:00000000 remove_free_block
C:\usertemp\cc0gL4jD.s:842    .text.insert_free_block:00000000 $t
C:\usertemp\cc0gL4jD.s:847    .text.insert_free_block:00000000 insert_free_block
C:\usertemp\cc0gL4jD.s:969    .text.block_can_split:00000000 $t
C:\usertemp\cc0gL4jD.s:974    .text.block_can_split:00000000 block_can_split
C:\usertemp\cc0gL4jD.s:1006   .text.block_split:00000000 $t
C:\usertemp\cc0gL4jD.s:1011   .text.block_split:00000000 block_split
C:\usertemp\cc0gL4jD.s:1133   .text.block_absorb:00000000 $t
C:\usertemp\cc0gL4jD.s:1138   .text.block_absorb:00000000 block_absorb
C:\usertemp\cc0gL4jD.s:1195   .text.control_constructor:00000000 $t
C:\usertemp\cc0gL4jD.s:1200   .text.control_constructor:00000000 control_constructor
C:\usertemp\cc0gL4jD.s:1262   .text.integrity_walker:00000000 $t
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 102


C:\usertemp\cc0gL4jD.s:1267   .text.integrity_walker:00000000 integrity_walker
C:\usertemp\cc0gL4jD.s:1362   .text.default_walker:00000000 $t
C:\usertemp\cc0gL4jD.s:1367   .text.default_walker:00000000 default_walker
C:\usertemp\cc0gL4jD.s:1385   .text.tlsf_fls:00000000 $t
C:\usertemp\cc0gL4jD.s:1390   .text.tlsf_fls:00000000 tlsf_fls
C:\usertemp\cc0gL4jD.s:1425   .text.mapping_insert:00000000 $t
C:\usertemp\cc0gL4jD.s:1430   .text.mapping_insert:00000000 mapping_insert
C:\usertemp\cc0gL4jD.s:1505   .text.block_insert:00000000 $t
C:\usertemp\cc0gL4jD.s:1510   .text.block_insert:00000000 block_insert
C:\usertemp\cc0gL4jD.s:1559   .text.block_trim_free:00000000 $t
C:\usertemp\cc0gL4jD.s:1564   .text.block_trim_free:00000000 block_trim_free
C:\usertemp\cc0gL4jD.s:1645   .text.block_prepare_used:00000000 $t
C:\usertemp\cc0gL4jD.s:1650   .text.block_prepare_used:00000000 block_prepare_used
C:\usertemp\cc0gL4jD.s:1708   .text.block_trim_free_leading:00000000 $t
C:\usertemp\cc0gL4jD.s:1713   .text.block_trim_free_leading:00000000 block_trim_free_leading
C:\usertemp\cc0gL4jD.s:1782   .text.block_remove:00000000 $t
C:\usertemp\cc0gL4jD.s:1787   .text.block_remove:00000000 block_remove
C:\usertemp\cc0gL4jD.s:1836   .text.block_merge_prev:00000000 $t
C:\usertemp\cc0gL4jD.s:1841   .text.block_merge_prev:00000000 block_merge_prev
C:\usertemp\cc0gL4jD.s:1929   .text.block_merge_next:00000000 $t
C:\usertemp\cc0gL4jD.s:1934   .text.block_merge_next:00000000 block_merge_next
C:\usertemp\cc0gL4jD.s:2017   .text.block_trim_used:00000000 $t
C:\usertemp\cc0gL4jD.s:2022   .text.block_trim_used:00000000 block_trim_used
C:\usertemp\cc0gL4jD.s:2106   .text.mapping_search:00000000 $t
C:\usertemp\cc0gL4jD.s:2111   .text.mapping_search:00000000 mapping_search
C:\usertemp\cc0gL4jD.s:2166   .text.tlsf_ffs:00000000 $t
C:\usertemp\cc0gL4jD.s:2171   .text.tlsf_ffs:00000000 tlsf_ffs
C:\usertemp\cc0gL4jD.s:2196   .text.search_suitable_block:00000000 $t
C:\usertemp\cc0gL4jD.s:2201   .text.search_suitable_block:00000000 search_suitable_block
C:\usertemp\cc0gL4jD.s:2325   .text.block_locate_free:00000000 $t
C:\usertemp\cc0gL4jD.s:2330   .text.block_locate_free:00000000 block_locate_free
C:\usertemp\cc0gL4jD.s:2440   .text.lv_tlsf_check:00000000 $t
C:\usertemp\cc0gL4jD.s:2446   .text.lv_tlsf_check:00000000 lv_tlsf_check
C:\usertemp\cc0gL4jD.s:2732   .text.lv_tlsf_walk_pool:00000000 $t
C:\usertemp\cc0gL4jD.s:2738   .text.lv_tlsf_walk_pool:00000000 lv_tlsf_walk_pool
C:\usertemp\cc0gL4jD.s:2830   .text.lv_tlsf_walk_pool:00000058 $d
C:\usertemp\cc0gL4jD.s:2835   .text.lv_tlsf_block_size:00000000 $t
C:\usertemp\cc0gL4jD.s:2841   .text.lv_tlsf_block_size:00000000 lv_tlsf_block_size
C:\usertemp\cc0gL4jD.s:2887   .text.lv_tlsf_check_pool:00000000 $t
C:\usertemp\cc0gL4jD.s:2893   .text.lv_tlsf_check_pool:00000000 lv_tlsf_check_pool
C:\usertemp\cc0gL4jD.s:2929   .text.lv_tlsf_check_pool:0000001c $d
C:\usertemp\cc0gL4jD.s:2934   .text.lv_tlsf_size:00000000 $t
C:\usertemp\cc0gL4jD.s:2940   .text.lv_tlsf_size:00000000 lv_tlsf_size
C:\usertemp\cc0gL4jD.s:2955   .text.lv_tlsf_align_size:00000000 $t
C:\usertemp\cc0gL4jD.s:2961   .text.lv_tlsf_align_size:00000000 lv_tlsf_align_size
C:\usertemp\cc0gL4jD.s:2976   .text.lv_tlsf_block_size_min:00000000 $t
C:\usertemp\cc0gL4jD.s:2982   .text.lv_tlsf_block_size_min:00000000 lv_tlsf_block_size_min
C:\usertemp\cc0gL4jD.s:2997   .text.lv_tlsf_block_size_max:00000000 $t
C:\usertemp\cc0gL4jD.s:3003   .text.lv_tlsf_block_size_max:00000000 lv_tlsf_block_size_max
C:\usertemp\cc0gL4jD.s:3018   .text.lv_tlsf_pool_overhead:00000000 $t
C:\usertemp\cc0gL4jD.s:3024   .text.lv_tlsf_pool_overhead:00000000 lv_tlsf_pool_overhead
C:\usertemp\cc0gL4jD.s:3039   .text.lv_tlsf_alloc_overhead:00000000 $t
C:\usertemp\cc0gL4jD.s:3045   .text.lv_tlsf_alloc_overhead:00000000 lv_tlsf_alloc_overhead
C:\usertemp\cc0gL4jD.s:3060   .text.lv_tlsf_add_pool:00000000 $t
C:\usertemp\cc0gL4jD.s:3066   .text.lv_tlsf_add_pool:00000000 lv_tlsf_add_pool
C:\usertemp\cc0gL4jD.s:3183   .text.lv_tlsf_add_pool:00000074 $d
C:\usertemp\cc0gL4jD.s:3188   .text.lv_tlsf_remove_pool:00000000 $t
ARM GAS  C:\usertemp\cc0gL4jD.s 			page 103


C:\usertemp\cc0gL4jD.s:3194   .text.lv_tlsf_remove_pool:00000000 lv_tlsf_remove_pool
C:\usertemp\cc0gL4jD.s:3311   .text.lv_tlsf_create:00000000 $t
C:\usertemp\cc0gL4jD.s:3317   .text.lv_tlsf_create:00000000 lv_tlsf_create
C:\usertemp\cc0gL4jD.s:3358   .text.lv_tlsf_create_with_pool:00000000 $t
C:\usertemp\cc0gL4jD.s:3364   .text.lv_tlsf_create_with_pool:00000000 lv_tlsf_create_with_pool
C:\usertemp\cc0gL4jD.s:3407   .text.lv_tlsf_destroy:00000000 $t
C:\usertemp\cc0gL4jD.s:3413   .text.lv_tlsf_destroy:00000000 lv_tlsf_destroy
C:\usertemp\cc0gL4jD.s:3428   .text.lv_tlsf_get_pool:00000000 $t
C:\usertemp\cc0gL4jD.s:3434   .text.lv_tlsf_get_pool:00000000 lv_tlsf_get_pool
C:\usertemp\cc0gL4jD.s:3460   .text.lv_tlsf_malloc:00000000 $t
C:\usertemp\cc0gL4jD.s:3466   .text.lv_tlsf_malloc:00000000 lv_tlsf_malloc
C:\usertemp\cc0gL4jD.s:3521   .text.lv_tlsf_memalign:00000000 $t
C:\usertemp\cc0gL4jD.s:3527   .text.lv_tlsf_memalign:00000000 lv_tlsf_memalign
C:\usertemp\cc0gL4jD.s:3693   .text.lv_tlsf_free:00000000 $t
C:\usertemp\cc0gL4jD.s:3699   .text.lv_tlsf_free:00000000 lv_tlsf_free
C:\usertemp\cc0gL4jD.s:3790   .text.lv_tlsf_realloc:00000000 $t
C:\usertemp\cc0gL4jD.s:3796   .text.lv_tlsf_realloc:00000000 lv_tlsf_realloc

UNDEFINED SYMBOLS
lv_memcpy
