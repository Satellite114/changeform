ARM GAS  C:\usertemp\ccFesu0W.s 			page 1


   1              		.cpu cortex-m7
   2              		.arch armv7e-m
   3              		.fpu fpv5-d16
   4              		.eabi_attribute 28, 1
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.file	"lv_img_buf.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.file 1 "lvgl/src/draw/lv_img_buf.c"
  19              		.section	.text.lv_color_to32,"ax",%progbits
  20              		.align	1
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  25              	lv_color_to32:
  26              	.LVL0:
  27              	.LFB5:
  28              		.file 2 "lvgl/src/draw/../misc/lv_color.h"
   1:lvgl/src/draw/../misc/lv_color.h **** /**
   2:lvgl/src/draw/../misc/lv_color.h ****  * @file lv_color.h
   3:lvgl/src/draw/../misc/lv_color.h ****  *
   4:lvgl/src/draw/../misc/lv_color.h ****  */
   5:lvgl/src/draw/../misc/lv_color.h **** 
   6:lvgl/src/draw/../misc/lv_color.h **** #ifndef LV_COLOR_H
   7:lvgl/src/draw/../misc/lv_color.h **** #define LV_COLOR_H
   8:lvgl/src/draw/../misc/lv_color.h **** 
   9:lvgl/src/draw/../misc/lv_color.h **** #ifdef __cplusplus
  10:lvgl/src/draw/../misc/lv_color.h **** extern "C" {
  11:lvgl/src/draw/../misc/lv_color.h **** #endif
  12:lvgl/src/draw/../misc/lv_color.h **** 
  13:lvgl/src/draw/../misc/lv_color.h **** /*********************
  14:lvgl/src/draw/../misc/lv_color.h ****  *      INCLUDES
  15:lvgl/src/draw/../misc/lv_color.h ****  *********************/
  16:lvgl/src/draw/../misc/lv_color.h **** #include "../lv_conf_internal.h"
  17:lvgl/src/draw/../misc/lv_color.h **** #include "lv_assert.h"
  18:lvgl/src/draw/../misc/lv_color.h **** #include "lv_math.h"
  19:lvgl/src/draw/../misc/lv_color.h **** #include "lv_types.h"
  20:lvgl/src/draw/../misc/lv_color.h **** 
  21:lvgl/src/draw/../misc/lv_color.h **** /*Error checking*/
  22:lvgl/src/draw/../misc/lv_color.h **** #if LV_COLOR_DEPTH == 24
  23:lvgl/src/draw/../misc/lv_color.h **** #error "LV_COLOR_DEPTH 24 is deprecated. Use LV_COLOR_DEPTH 32 instead (lv_conf.h)"
  24:lvgl/src/draw/../misc/lv_color.h **** #endif
  25:lvgl/src/draw/../misc/lv_color.h **** 
  26:lvgl/src/draw/../misc/lv_color.h **** #if LV_COLOR_DEPTH != 32 && LV_COLOR_SCREEN_TRANSP != 0
  27:lvgl/src/draw/../misc/lv_color.h **** #error "LV_COLOR_SCREEN_TRANSP requires LV_COLOR_DEPTH == 32. Set it in lv_conf.h"
  28:lvgl/src/draw/../misc/lv_color.h **** #endif
  29:lvgl/src/draw/../misc/lv_color.h **** 
  30:lvgl/src/draw/../misc/lv_color.h **** #if LV_COLOR_DEPTH != 16 && LV_COLOR_16_SWAP != 0
ARM GAS  C:\usertemp\ccFesu0W.s 			page 2


  31:lvgl/src/draw/../misc/lv_color.h **** #error "LV_COLOR_16_SWAP requires LV_COLOR_DEPTH == 16. Set it in lv_conf.h"
  32:lvgl/src/draw/../misc/lv_color.h **** #endif
  33:lvgl/src/draw/../misc/lv_color.h **** 
  34:lvgl/src/draw/../misc/lv_color.h **** #include <stdint.h>
  35:lvgl/src/draw/../misc/lv_color.h **** 
  36:lvgl/src/draw/../misc/lv_color.h **** /*********************
  37:lvgl/src/draw/../misc/lv_color.h ****  *      DEFINES
  38:lvgl/src/draw/../misc/lv_color.h ****  *********************/
  39:lvgl/src/draw/../misc/lv_color.h **** LV_EXPORT_CONST_INT(LV_COLOR_DEPTH);
  40:lvgl/src/draw/../misc/lv_color.h **** LV_EXPORT_CONST_INT(LV_COLOR_16_SWAP);
  41:lvgl/src/draw/../misc/lv_color.h **** 
  42:lvgl/src/draw/../misc/lv_color.h **** /**
  43:lvgl/src/draw/../misc/lv_color.h ****  * Opacity percentages.
  44:lvgl/src/draw/../misc/lv_color.h ****  */
  45:lvgl/src/draw/../misc/lv_color.h **** enum {
  46:lvgl/src/draw/../misc/lv_color.h ****     LV_OPA_TRANSP = 0,
  47:lvgl/src/draw/../misc/lv_color.h ****     LV_OPA_0      = 0,
  48:lvgl/src/draw/../misc/lv_color.h ****     LV_OPA_10     = 25,
  49:lvgl/src/draw/../misc/lv_color.h ****     LV_OPA_20     = 51,
  50:lvgl/src/draw/../misc/lv_color.h ****     LV_OPA_30     = 76,
  51:lvgl/src/draw/../misc/lv_color.h ****     LV_OPA_40     = 102,
  52:lvgl/src/draw/../misc/lv_color.h ****     LV_OPA_50     = 127,
  53:lvgl/src/draw/../misc/lv_color.h ****     LV_OPA_60     = 153,
  54:lvgl/src/draw/../misc/lv_color.h ****     LV_OPA_70     = 178,
  55:lvgl/src/draw/../misc/lv_color.h ****     LV_OPA_80     = 204,
  56:lvgl/src/draw/../misc/lv_color.h ****     LV_OPA_90     = 229,
  57:lvgl/src/draw/../misc/lv_color.h ****     LV_OPA_100    = 255,
  58:lvgl/src/draw/../misc/lv_color.h ****     LV_OPA_COVER  = 255,
  59:lvgl/src/draw/../misc/lv_color.h **** };
  60:lvgl/src/draw/../misc/lv_color.h **** 
  61:lvgl/src/draw/../misc/lv_color.h **** #define LV_OPA_MIN 2    /*Opacities below this will be transparent*/
  62:lvgl/src/draw/../misc/lv_color.h **** #define LV_OPA_MAX 253  /*Opacities above this will fully cover*/
  63:lvgl/src/draw/../misc/lv_color.h **** 
  64:lvgl/src/draw/../misc/lv_color.h **** #if LV_COLOR_DEPTH == 1
  65:lvgl/src/draw/../misc/lv_color.h **** #define LV_COLOR_SIZE 8
  66:lvgl/src/draw/../misc/lv_color.h **** #elif LV_COLOR_DEPTH == 8
  67:lvgl/src/draw/../misc/lv_color.h **** #define LV_COLOR_SIZE 8
  68:lvgl/src/draw/../misc/lv_color.h **** #elif LV_COLOR_DEPTH == 16
  69:lvgl/src/draw/../misc/lv_color.h **** #define LV_COLOR_SIZE 16
  70:lvgl/src/draw/../misc/lv_color.h **** #elif LV_COLOR_DEPTH == 32
  71:lvgl/src/draw/../misc/lv_color.h **** #define LV_COLOR_SIZE 32
  72:lvgl/src/draw/../misc/lv_color.h **** #else
  73:lvgl/src/draw/../misc/lv_color.h **** #error "Invalid LV_COLOR_DEPTH in lv_conf.h! Set it to 1, 8, 16 or 32!"
  74:lvgl/src/draw/../misc/lv_color.h **** #endif
  75:lvgl/src/draw/../misc/lv_color.h **** 
  76:lvgl/src/draw/../misc/lv_color.h **** #if defined(__cplusplus) && !defined(_LV_COLOR_HAS_MODERN_CPP)
  77:lvgl/src/draw/../misc/lv_color.h **** /**
  78:lvgl/src/draw/../misc/lv_color.h **** * MSVC compiler's definition of the __cplusplus indicating 199711L regardless to C++ standard versi
  79:lvgl/src/draw/../misc/lv_color.h **** * see https://devblogs.microsoft.com/cppblog/msvc-now-correctly-reports-cplusplus
  80:lvgl/src/draw/../misc/lv_color.h **** * so we use _MSC_VER macro instead of __cplusplus
  81:lvgl/src/draw/../misc/lv_color.h **** */
  82:lvgl/src/draw/../misc/lv_color.h **** #ifdef _MSC_VER
  83:lvgl/src/draw/../misc/lv_color.h **** #if _MSC_VER >= 1900 /*Visual Studio 2015*/
  84:lvgl/src/draw/../misc/lv_color.h **** #define _LV_COLOR_HAS_MODERN_CPP 1
  85:lvgl/src/draw/../misc/lv_color.h **** #endif
  86:lvgl/src/draw/../misc/lv_color.h **** #else
  87:lvgl/src/draw/../misc/lv_color.h **** #if __cplusplus >= 201103L
ARM GAS  C:\usertemp\ccFesu0W.s 			page 3


  88:lvgl/src/draw/../misc/lv_color.h **** #define _LV_COLOR_HAS_MODERN_CPP 1
  89:lvgl/src/draw/../misc/lv_color.h **** #endif
  90:lvgl/src/draw/../misc/lv_color.h **** #endif
  91:lvgl/src/draw/../misc/lv_color.h **** #endif /*__cplusplus*/
  92:lvgl/src/draw/../misc/lv_color.h **** 
  93:lvgl/src/draw/../misc/lv_color.h **** #ifndef _LV_COLOR_HAS_MODERN_CPP
  94:lvgl/src/draw/../misc/lv_color.h **** #define _LV_COLOR_HAS_MODERN_CPP 0
  95:lvgl/src/draw/../misc/lv_color.h **** #endif
  96:lvgl/src/draw/../misc/lv_color.h **** 
  97:lvgl/src/draw/../misc/lv_color.h **** #if _LV_COLOR_HAS_MODERN_CPP
  98:lvgl/src/draw/../misc/lv_color.h **** /*Fix msvc compiler error C4576 inside C++ code*/
  99:lvgl/src/draw/../misc/lv_color.h **** #define _LV_COLOR_MAKE_TYPE_HELPER lv_color_t
 100:lvgl/src/draw/../misc/lv_color.h **** #else
 101:lvgl/src/draw/../misc/lv_color.h **** #define _LV_COLOR_MAKE_TYPE_HELPER (lv_color_t)
 102:lvgl/src/draw/../misc/lv_color.h **** #endif
 103:lvgl/src/draw/../misc/lv_color.h **** 
 104:lvgl/src/draw/../misc/lv_color.h **** /*---------------------------------------
 105:lvgl/src/draw/../misc/lv_color.h ****  * Macros for all existing color depths
 106:lvgl/src/draw/../misc/lv_color.h ****  * to set/get values of the color channels
 107:lvgl/src/draw/../misc/lv_color.h ****  *------------------------------------------*/
 108:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_SET_R1(c, v) (c).ch.red = (uint8_t)((v) & 0x1)
 109:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_SET_G1(c, v) (c).ch.green = (uint8_t)((v) & 0x1)
 110:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_SET_B1(c, v) (c).ch.blue = (uint8_t)((v) & 0x1)
 111:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_SET_A1(c, v) do {} while(0)
 112:lvgl/src/draw/../misc/lv_color.h **** 
 113:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_GET_R1(c) (c).ch.red
 114:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_GET_G1(c) (c).ch.green
 115:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_GET_B1(c) (c).ch.blue
 116:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_GET_A1(c) 0xFF
 117:lvgl/src/draw/../misc/lv_color.h **** 
 118:lvgl/src/draw/../misc/lv_color.h **** # define _LV_COLOR_ZERO_INITIALIZER1 {0x00}
 119:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_MAKE1(r8, g8, b8)  {(uint8_t)((b8 >> 7) | (g8 >> 7) | (r8 >> 7))}
 120:lvgl/src/draw/../misc/lv_color.h **** 
 121:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_SET_R8(c, v) (c).ch.red = (uint8_t)((v) & 0x7U)
 122:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_SET_G8(c, v) (c).ch.green = (uint8_t)((v) & 0x7U)
 123:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_SET_B8(c, v) (c).ch.blue = (uint8_t)((v) & 0x3U)
 124:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_SET_A8(c, v) do {} while(0)
 125:lvgl/src/draw/../misc/lv_color.h **** 
 126:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_GET_R8(c) (c).ch.red
 127:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_GET_G8(c) (c).ch.green
 128:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_GET_B8(c) (c).ch.blue
 129:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_GET_A8(c) 0xFF
 130:lvgl/src/draw/../misc/lv_color.h **** 
 131:lvgl/src/draw/../misc/lv_color.h **** # define _LV_COLOR_ZERO_INITIALIZER8 {{0x00, 0x00, 0x00}}
 132:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_MAKE8(r8, g8, b8) {{(uint8_t)((b8 >> 6) & 0x3U), (uint8_t)((g8 >> 5) & 0x7U), (ui
 133:lvgl/src/draw/../misc/lv_color.h **** 
 134:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_SET_R16(c, v) (c).ch.red = (uint8_t)((v) & 0x1FU)
 135:lvgl/src/draw/../misc/lv_color.h **** #if LV_COLOR_16_SWAP == 0
 136:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_SET_G16(c, v) (c).ch.green = (uint8_t)((v) & 0x3FU)
 137:lvgl/src/draw/../misc/lv_color.h **** #else
 138:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_SET_G16(c, v) {(c).ch.green_h = (uint8_t)(((v) >> 3) & 0x7); (c).ch.green_l = (ui
 139:lvgl/src/draw/../misc/lv_color.h **** #endif
 140:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_SET_B16(c, v) (c).ch.blue = (uint8_t)((v) & 0x1FU)
 141:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_SET_A16(c, v) do {} while(0)
 142:lvgl/src/draw/../misc/lv_color.h **** 
 143:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_GET_R16(c) (c).ch.red
 144:lvgl/src/draw/../misc/lv_color.h **** #if LV_COLOR_16_SWAP == 0
ARM GAS  C:\usertemp\ccFesu0W.s 			page 4


 145:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_GET_G16(c) (c).ch.green
 146:lvgl/src/draw/../misc/lv_color.h **** #else
 147:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_GET_G16(c) (((c).ch.green_h << 3) + (c).ch.green_l)
 148:lvgl/src/draw/../misc/lv_color.h **** #endif
 149:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_GET_B16(c) (c).ch.blue
 150:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_GET_A16(c) 0xFF
 151:lvgl/src/draw/../misc/lv_color.h **** 
 152:lvgl/src/draw/../misc/lv_color.h **** #if LV_COLOR_16_SWAP == 0
 153:lvgl/src/draw/../misc/lv_color.h **** # define _LV_COLOR_ZERO_INITIALIZER16  {{0x00, 0x00, 0x00}}
 154:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_MAKE16(r8, g8, b8) {{(uint8_t)((b8 >> 3) & 0x1FU), (uint8_t)((g8 >> 2) & 0x3FU), 
 155:lvgl/src/draw/../misc/lv_color.h **** #else
 156:lvgl/src/draw/../misc/lv_color.h **** # define _LV_COLOR_ZERO_INITIALIZER16 {{0x00, 0x00, 0x00, 0x00}}
 157:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_MAKE16(r8, g8, b8) {{(uint8_t)((g8 >> 5) & 0x7U), (uint8_t)((r8 >> 3) & 0x1FU), (
 158:lvgl/src/draw/../misc/lv_color.h **** #endif
 159:lvgl/src/draw/../misc/lv_color.h **** 
 160:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_SET_R32(c, v) (c).ch.red = (uint8_t)((v) & 0xFF)
 161:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_SET_G32(c, v) (c).ch.green = (uint8_t)((v) & 0xFF)
 162:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_SET_B32(c, v) (c).ch.blue = (uint8_t)((v) & 0xFF)
 163:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_SET_A32(c, v) (c).ch.alpha = (uint8_t)((v) & 0xFF)
 164:lvgl/src/draw/../misc/lv_color.h **** 
 165:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_GET_R32(c) (c).ch.red
 166:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_GET_G32(c) (c).ch.green
 167:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_GET_B32(c) (c).ch.blue
 168:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_GET_A32(c) (c).ch.alpha
 169:lvgl/src/draw/../misc/lv_color.h **** 
 170:lvgl/src/draw/../misc/lv_color.h **** # define _LV_COLOR_ZERO_INITIALIZER32  {{0x00, 0x00, 0x00, 0x00}}
 171:lvgl/src/draw/../misc/lv_color.h **** # define LV_COLOR_MAKE32(r8, g8, b8) {{b8, g8, r8, 0xff}} /*Fix 0xff alpha*/
 172:lvgl/src/draw/../misc/lv_color.h **** 
 173:lvgl/src/draw/../misc/lv_color.h **** /*---------------------------------------
 174:lvgl/src/draw/../misc/lv_color.h ****  * Macros for the current color depth
 175:lvgl/src/draw/../misc/lv_color.h ****  * to set/get values of the color channels
 176:lvgl/src/draw/../misc/lv_color.h ****  *------------------------------------------*/
 177:lvgl/src/draw/../misc/lv_color.h **** #define LV_COLOR_SET_R(c, v) LV_CONCAT(LV_COLOR_SET_R, LV_COLOR_DEPTH)(c, v)
 178:lvgl/src/draw/../misc/lv_color.h **** #define LV_COLOR_SET_G(c, v) LV_CONCAT(LV_COLOR_SET_G, LV_COLOR_DEPTH)(c, v)
 179:lvgl/src/draw/../misc/lv_color.h **** #define LV_COLOR_SET_B(c, v) LV_CONCAT(LV_COLOR_SET_B, LV_COLOR_DEPTH)(c, v)
 180:lvgl/src/draw/../misc/lv_color.h **** #define LV_COLOR_SET_A(c, v) LV_CONCAT(LV_COLOR_SET_A, LV_COLOR_DEPTH)(c, v)
 181:lvgl/src/draw/../misc/lv_color.h **** 
 182:lvgl/src/draw/../misc/lv_color.h **** #define LV_COLOR_GET_R(c) LV_CONCAT(LV_COLOR_GET_R, LV_COLOR_DEPTH)(c)
 183:lvgl/src/draw/../misc/lv_color.h **** #define LV_COLOR_GET_G(c) LV_CONCAT(LV_COLOR_GET_G, LV_COLOR_DEPTH)(c)
 184:lvgl/src/draw/../misc/lv_color.h **** #define LV_COLOR_GET_B(c) LV_CONCAT(LV_COLOR_GET_B, LV_COLOR_DEPTH)(c)
 185:lvgl/src/draw/../misc/lv_color.h **** #define LV_COLOR_GET_A(c) LV_CONCAT(LV_COLOR_GET_A, LV_COLOR_DEPTH)(c)
 186:lvgl/src/draw/../misc/lv_color.h **** 
 187:lvgl/src/draw/../misc/lv_color.h **** #define _LV_COLOR_ZERO_INITIALIZER LV_CONCAT(_LV_COLOR_ZERO_INITIALIZER, LV_COLOR_DEPTH)
 188:lvgl/src/draw/../misc/lv_color.h **** #define LV_COLOR_MAKE(r8, g8, b8) LV_CONCAT(LV_COLOR_MAKE, LV_COLOR_DEPTH)(r8, g8, b8)
 189:lvgl/src/draw/../misc/lv_color.h **** 
 190:lvgl/src/draw/../misc/lv_color.h **** /**********************
 191:lvgl/src/draw/../misc/lv_color.h ****  *      TYPEDEFS
 192:lvgl/src/draw/../misc/lv_color.h ****  **********************/
 193:lvgl/src/draw/../misc/lv_color.h **** 
 194:lvgl/src/draw/../misc/lv_color.h **** typedef union {
 195:lvgl/src/draw/../misc/lv_color.h ****     uint8_t full; /*must be declared first to set all bits of byte via initializer list*/
 196:lvgl/src/draw/../misc/lv_color.h ****     union {
 197:lvgl/src/draw/../misc/lv_color.h ****         uint8_t blue : 1;
 198:lvgl/src/draw/../misc/lv_color.h ****         uint8_t green : 1;
 199:lvgl/src/draw/../misc/lv_color.h ****         uint8_t red : 1;
 200:lvgl/src/draw/../misc/lv_color.h ****     } ch;
 201:lvgl/src/draw/../misc/lv_color.h **** } lv_color1_t;
ARM GAS  C:\usertemp\ccFesu0W.s 			page 5


 202:lvgl/src/draw/../misc/lv_color.h **** 
 203:lvgl/src/draw/../misc/lv_color.h **** typedef union {
 204:lvgl/src/draw/../misc/lv_color.h ****     struct {
 205:lvgl/src/draw/../misc/lv_color.h ****         uint8_t blue : 2;
 206:lvgl/src/draw/../misc/lv_color.h ****         uint8_t green : 3;
 207:lvgl/src/draw/../misc/lv_color.h ****         uint8_t red : 3;
 208:lvgl/src/draw/../misc/lv_color.h ****     } ch;
 209:lvgl/src/draw/../misc/lv_color.h ****     uint8_t full;
 210:lvgl/src/draw/../misc/lv_color.h **** } lv_color8_t;
 211:lvgl/src/draw/../misc/lv_color.h **** 
 212:lvgl/src/draw/../misc/lv_color.h **** typedef union {
 213:lvgl/src/draw/../misc/lv_color.h ****     struct {
 214:lvgl/src/draw/../misc/lv_color.h **** #if LV_COLOR_16_SWAP == 0
 215:lvgl/src/draw/../misc/lv_color.h ****         uint16_t blue : 5;
 216:lvgl/src/draw/../misc/lv_color.h ****         uint16_t green : 6;
 217:lvgl/src/draw/../misc/lv_color.h ****         uint16_t red : 5;
 218:lvgl/src/draw/../misc/lv_color.h **** #else
 219:lvgl/src/draw/../misc/lv_color.h ****         uint16_t green_h : 3;
 220:lvgl/src/draw/../misc/lv_color.h ****         uint16_t red : 5;
 221:lvgl/src/draw/../misc/lv_color.h ****         uint16_t blue : 5;
 222:lvgl/src/draw/../misc/lv_color.h ****         uint16_t green_l : 3;
 223:lvgl/src/draw/../misc/lv_color.h **** #endif
 224:lvgl/src/draw/../misc/lv_color.h ****     } ch;
 225:lvgl/src/draw/../misc/lv_color.h ****     uint16_t full;
 226:lvgl/src/draw/../misc/lv_color.h **** } lv_color16_t;
 227:lvgl/src/draw/../misc/lv_color.h **** 
 228:lvgl/src/draw/../misc/lv_color.h **** typedef union {
 229:lvgl/src/draw/../misc/lv_color.h ****     struct {
 230:lvgl/src/draw/../misc/lv_color.h ****         uint8_t blue;
 231:lvgl/src/draw/../misc/lv_color.h ****         uint8_t green;
 232:lvgl/src/draw/../misc/lv_color.h ****         uint8_t red;
 233:lvgl/src/draw/../misc/lv_color.h ****         uint8_t alpha;
 234:lvgl/src/draw/../misc/lv_color.h ****     } ch;
 235:lvgl/src/draw/../misc/lv_color.h ****     uint32_t full;
 236:lvgl/src/draw/../misc/lv_color.h **** } lv_color32_t;
 237:lvgl/src/draw/../misc/lv_color.h **** 
 238:lvgl/src/draw/../misc/lv_color.h **** typedef LV_CONCAT3(uint, LV_COLOR_SIZE, _t) lv_color_int_t;
 239:lvgl/src/draw/../misc/lv_color.h **** typedef LV_CONCAT3(lv_color, LV_COLOR_DEPTH, _t) lv_color_t;
 240:lvgl/src/draw/../misc/lv_color.h **** 
 241:lvgl/src/draw/../misc/lv_color.h **** typedef struct {
 242:lvgl/src/draw/../misc/lv_color.h ****     uint16_t h;
 243:lvgl/src/draw/../misc/lv_color.h ****     uint8_t s;
 244:lvgl/src/draw/../misc/lv_color.h ****     uint8_t v;
 245:lvgl/src/draw/../misc/lv_color.h **** } lv_color_hsv_t;
 246:lvgl/src/draw/../misc/lv_color.h **** 
 247:lvgl/src/draw/../misc/lv_color.h **** //! @cond Doxygen_Suppress
 248:lvgl/src/draw/../misc/lv_color.h **** /*No idea where the guard is required but else throws warnings in the docs*/
 249:lvgl/src/draw/../misc/lv_color.h **** typedef uint8_t lv_opa_t;
 250:lvgl/src/draw/../misc/lv_color.h **** //! @endcond
 251:lvgl/src/draw/../misc/lv_color.h **** 
 252:lvgl/src/draw/../misc/lv_color.h **** struct _lv_color_filter_dsc_t;
 253:lvgl/src/draw/../misc/lv_color.h **** 
 254:lvgl/src/draw/../misc/lv_color.h **** typedef lv_color_t (*lv_color_filter_cb_t)(const struct _lv_color_filter_dsc_t *, lv_color_t, lv_op
 255:lvgl/src/draw/../misc/lv_color.h **** 
 256:lvgl/src/draw/../misc/lv_color.h **** typedef struct _lv_color_filter_dsc_t {
 257:lvgl/src/draw/../misc/lv_color.h ****     lv_color_filter_cb_t filter_cb;
 258:lvgl/src/draw/../misc/lv_color.h ****     void * user_data;
ARM GAS  C:\usertemp\ccFesu0W.s 			page 6


 259:lvgl/src/draw/../misc/lv_color.h **** } lv_color_filter_dsc_t;
 260:lvgl/src/draw/../misc/lv_color.h **** 
 261:lvgl/src/draw/../misc/lv_color.h **** 
 262:lvgl/src/draw/../misc/lv_color.h **** typedef enum {
 263:lvgl/src/draw/../misc/lv_color.h ****     LV_PALETTE_RED,
 264:lvgl/src/draw/../misc/lv_color.h ****     LV_PALETTE_PINK,
 265:lvgl/src/draw/../misc/lv_color.h ****     LV_PALETTE_PURPLE,
 266:lvgl/src/draw/../misc/lv_color.h ****     LV_PALETTE_DEEP_PURPLE,
 267:lvgl/src/draw/../misc/lv_color.h ****     LV_PALETTE_INDIGO,
 268:lvgl/src/draw/../misc/lv_color.h ****     LV_PALETTE_BLUE,
 269:lvgl/src/draw/../misc/lv_color.h ****     LV_PALETTE_LIGHT_BLUE,
 270:lvgl/src/draw/../misc/lv_color.h ****     LV_PALETTE_CYAN,
 271:lvgl/src/draw/../misc/lv_color.h ****     LV_PALETTE_TEAL,
 272:lvgl/src/draw/../misc/lv_color.h ****     LV_PALETTE_GREEN,
 273:lvgl/src/draw/../misc/lv_color.h ****     LV_PALETTE_LIGHT_GREEN,
 274:lvgl/src/draw/../misc/lv_color.h ****     LV_PALETTE_LIME,
 275:lvgl/src/draw/../misc/lv_color.h ****     LV_PALETTE_YELLOW,
 276:lvgl/src/draw/../misc/lv_color.h ****     LV_PALETTE_AMBER,
 277:lvgl/src/draw/../misc/lv_color.h ****     LV_PALETTE_ORANGE,
 278:lvgl/src/draw/../misc/lv_color.h ****     LV_PALETTE_DEEP_ORANGE,
 279:lvgl/src/draw/../misc/lv_color.h ****     LV_PALETTE_BROWN,
 280:lvgl/src/draw/../misc/lv_color.h ****     LV_PALETTE_BLUE_GREY,
 281:lvgl/src/draw/../misc/lv_color.h ****     LV_PALETTE_GREY,
 282:lvgl/src/draw/../misc/lv_color.h ****     _LV_PALETTE_LAST,
 283:lvgl/src/draw/../misc/lv_color.h ****     LV_PALETTE_NONE = 0xff,
 284:lvgl/src/draw/../misc/lv_color.h **** } lv_palette_t;
 285:lvgl/src/draw/../misc/lv_color.h **** 
 286:lvgl/src/draw/../misc/lv_color.h **** /**********************
 287:lvgl/src/draw/../misc/lv_color.h ****  * GLOBAL PROTOTYPES
 288:lvgl/src/draw/../misc/lv_color.h ****  **********************/
 289:lvgl/src/draw/../misc/lv_color.h **** 
 290:lvgl/src/draw/../misc/lv_color.h **** /*In color conversations:
 291:lvgl/src/draw/../misc/lv_color.h ****  * - When converting to bigger color type the LSB weight of 1 LSB is calculated
 292:lvgl/src/draw/../misc/lv_color.h ****  *   E.g. 16 bit Red has 5 bits
 293:lvgl/src/draw/../misc/lv_color.h ****  *         8 bit Red has 3 bits
 294:lvgl/src/draw/../misc/lv_color.h ****  *        ----------------------
 295:lvgl/src/draw/../misc/lv_color.h ****  *        8 bit red LSB = (2^5 - 1) / (2^3 - 1) = 31 / 7 = 4
 296:lvgl/src/draw/../misc/lv_color.h ****  *
 297:lvgl/src/draw/../misc/lv_color.h ****  * - When calculating to smaller color type simply shift out the LSBs
 298:lvgl/src/draw/../misc/lv_color.h ****  *   E.g.  8 bit Red has 3 bits
 299:lvgl/src/draw/../misc/lv_color.h ****  *        16 bit Red has 5 bits
 300:lvgl/src/draw/../misc/lv_color.h ****  *        ----------------------
 301:lvgl/src/draw/../misc/lv_color.h ****  *         Shift right with 5 - 3 = 2
 302:lvgl/src/draw/../misc/lv_color.h ****  */
 303:lvgl/src/draw/../misc/lv_color.h **** static inline uint8_t lv_color_to1(lv_color_t color)
 304:lvgl/src/draw/../misc/lv_color.h **** {
 305:lvgl/src/draw/../misc/lv_color.h **** #if LV_COLOR_DEPTH == 1
 306:lvgl/src/draw/../misc/lv_color.h ****     return color.full;
 307:lvgl/src/draw/../misc/lv_color.h **** #elif LV_COLOR_DEPTH == 8
 308:lvgl/src/draw/../misc/lv_color.h ****     if((LV_COLOR_GET_R(color) & 0x4) || (LV_COLOR_GET_G(color) & 0x4) || (LV_COLOR_GET_B(color) & 0
 309:lvgl/src/draw/../misc/lv_color.h ****         return 1;
 310:lvgl/src/draw/../misc/lv_color.h ****     }
 311:lvgl/src/draw/../misc/lv_color.h ****     else {
 312:lvgl/src/draw/../misc/lv_color.h ****         return 0;
 313:lvgl/src/draw/../misc/lv_color.h ****     }
 314:lvgl/src/draw/../misc/lv_color.h **** #elif LV_COLOR_DEPTH == 16
 315:lvgl/src/draw/../misc/lv_color.h ****     if((LV_COLOR_GET_R(color) & 0x10) || (LV_COLOR_GET_G(color) & 0x20) || (LV_COLOR_GET_B(color) &
ARM GAS  C:\usertemp\ccFesu0W.s 			page 7


 316:lvgl/src/draw/../misc/lv_color.h ****         return 1;
 317:lvgl/src/draw/../misc/lv_color.h ****     }
 318:lvgl/src/draw/../misc/lv_color.h ****     else {
 319:lvgl/src/draw/../misc/lv_color.h ****         return 0;
 320:lvgl/src/draw/../misc/lv_color.h ****     }
 321:lvgl/src/draw/../misc/lv_color.h **** #elif LV_COLOR_DEPTH == 32
 322:lvgl/src/draw/../misc/lv_color.h ****     if((LV_COLOR_GET_R(color) & 0x80) || (LV_COLOR_GET_G(color) & 0x80) || (LV_COLOR_GET_B(color) &
 323:lvgl/src/draw/../misc/lv_color.h ****         return 1;
 324:lvgl/src/draw/../misc/lv_color.h ****     }
 325:lvgl/src/draw/../misc/lv_color.h ****     else {
 326:lvgl/src/draw/../misc/lv_color.h ****         return 0;
 327:lvgl/src/draw/../misc/lv_color.h ****     }
 328:lvgl/src/draw/../misc/lv_color.h **** #endif
 329:lvgl/src/draw/../misc/lv_color.h **** }
 330:lvgl/src/draw/../misc/lv_color.h **** 
 331:lvgl/src/draw/../misc/lv_color.h **** static inline uint8_t lv_color_to8(lv_color_t color)
 332:lvgl/src/draw/../misc/lv_color.h **** {
 333:lvgl/src/draw/../misc/lv_color.h **** #if LV_COLOR_DEPTH == 1
 334:lvgl/src/draw/../misc/lv_color.h ****     if(color.full == 0)
 335:lvgl/src/draw/../misc/lv_color.h ****         return 0;
 336:lvgl/src/draw/../misc/lv_color.h ****     else
 337:lvgl/src/draw/../misc/lv_color.h ****         return 0xFF;
 338:lvgl/src/draw/../misc/lv_color.h **** #elif LV_COLOR_DEPTH == 8
 339:lvgl/src/draw/../misc/lv_color.h ****     return color.full;
 340:lvgl/src/draw/../misc/lv_color.h **** #elif LV_COLOR_DEPTH == 16
 341:lvgl/src/draw/../misc/lv_color.h ****     lv_color8_t ret;
 342:lvgl/src/draw/../misc/lv_color.h ****     LV_COLOR_SET_R8(ret, LV_COLOR_GET_R(color) >> 2); /*5 - 3  = 2*/
 343:lvgl/src/draw/../misc/lv_color.h ****     LV_COLOR_SET_G8(ret, LV_COLOR_GET_G(color) >> 3); /*6 - 3  = 3*/
 344:lvgl/src/draw/../misc/lv_color.h ****     LV_COLOR_SET_B8(ret, LV_COLOR_GET_B(color) >> 3); /*5 - 2  = 3*/
 345:lvgl/src/draw/../misc/lv_color.h ****     return ret.full;
 346:lvgl/src/draw/../misc/lv_color.h **** #elif LV_COLOR_DEPTH == 32
 347:lvgl/src/draw/../misc/lv_color.h ****     lv_color8_t ret;
 348:lvgl/src/draw/../misc/lv_color.h ****     LV_COLOR_SET_R8(ret, LV_COLOR_GET_R(color) >> 5); /*8 - 3  = 5*/
 349:lvgl/src/draw/../misc/lv_color.h ****     LV_COLOR_SET_G8(ret, LV_COLOR_GET_G(color) >> 5); /*8 - 3  = 5*/
 350:lvgl/src/draw/../misc/lv_color.h ****     LV_COLOR_SET_B8(ret, LV_COLOR_GET_B(color) >> 6); /*8 - 2  = 6*/
 351:lvgl/src/draw/../misc/lv_color.h ****     return ret.full;
 352:lvgl/src/draw/../misc/lv_color.h **** #endif
 353:lvgl/src/draw/../misc/lv_color.h **** }
 354:lvgl/src/draw/../misc/lv_color.h **** 
 355:lvgl/src/draw/../misc/lv_color.h **** static inline uint16_t lv_color_to16(lv_color_t color)
 356:lvgl/src/draw/../misc/lv_color.h **** {
 357:lvgl/src/draw/../misc/lv_color.h **** #if LV_COLOR_DEPTH == 1
 358:lvgl/src/draw/../misc/lv_color.h ****     if(color.full == 0)
 359:lvgl/src/draw/../misc/lv_color.h ****         return 0;
 360:lvgl/src/draw/../misc/lv_color.h ****     else
 361:lvgl/src/draw/../misc/lv_color.h ****         return 0xFFFF;
 362:lvgl/src/draw/../misc/lv_color.h **** #elif LV_COLOR_DEPTH == 8
 363:lvgl/src/draw/../misc/lv_color.h ****     lv_color16_t ret;
 364:lvgl/src/draw/../misc/lv_color.h ****     LV_COLOR_SET_R16(ret, LV_COLOR_GET_R(color) * 4);  /*(2^5 - 1)/(2^3 - 1) = 31/7 = 4*/
 365:lvgl/src/draw/../misc/lv_color.h ****     LV_COLOR_SET_G16(ret, LV_COLOR_GET_G(color) * 9);  /*(2^6 - 1)/(2^3 - 1) = 63/7 = 9*/
 366:lvgl/src/draw/../misc/lv_color.h ****     LV_COLOR_SET_B16(ret, LV_COLOR_GET_B(color) * 10); /*(2^5 - 1)/(2^2 - 1) = 31/3 = 10*/
 367:lvgl/src/draw/../misc/lv_color.h ****     return ret.full;
 368:lvgl/src/draw/../misc/lv_color.h **** #elif LV_COLOR_DEPTH == 16
 369:lvgl/src/draw/../misc/lv_color.h ****     return color.full;
 370:lvgl/src/draw/../misc/lv_color.h **** #elif LV_COLOR_DEPTH == 32
 371:lvgl/src/draw/../misc/lv_color.h ****     lv_color16_t ret;
 372:lvgl/src/draw/../misc/lv_color.h ****     LV_COLOR_SET_R16(ret, LV_COLOR_GET_R(color) >> 3); /*8 - 5  = 3*/
ARM GAS  C:\usertemp\ccFesu0W.s 			page 8


 373:lvgl/src/draw/../misc/lv_color.h ****     LV_COLOR_SET_G16(ret, LV_COLOR_GET_G(color) >> 2); /*8 - 6  = 2*/
 374:lvgl/src/draw/../misc/lv_color.h ****     LV_COLOR_SET_B16(ret, LV_COLOR_GET_B(color) >> 3); /*8 - 5  = 3*/
 375:lvgl/src/draw/../misc/lv_color.h ****     return ret.full;
 376:lvgl/src/draw/../misc/lv_color.h **** #endif
 377:lvgl/src/draw/../misc/lv_color.h **** }
 378:lvgl/src/draw/../misc/lv_color.h **** 
 379:lvgl/src/draw/../misc/lv_color.h **** static inline uint32_t lv_color_to32(lv_color_t color)
 380:lvgl/src/draw/../misc/lv_color.h **** {
  29              		.loc 2 380 1 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
 381:lvgl/src/draw/../misc/lv_color.h **** #if LV_COLOR_DEPTH == 1
 382:lvgl/src/draw/../misc/lv_color.h ****     if(color.full == 0)
 383:lvgl/src/draw/../misc/lv_color.h ****         return 0xFF000000;
 384:lvgl/src/draw/../misc/lv_color.h ****     else
 385:lvgl/src/draw/../misc/lv_color.h ****         return 0xFFFFFFFF;
 386:lvgl/src/draw/../misc/lv_color.h **** #elif LV_COLOR_DEPTH == 8
 387:lvgl/src/draw/../misc/lv_color.h ****     lv_color32_t ret;
 388:lvgl/src/draw/../misc/lv_color.h ****     LV_COLOR_SET_R32(ret, LV_COLOR_GET_R(color) * 36); /*(2^8 - 1)/(2^3 - 1) = 255/7 = 36*/
 389:lvgl/src/draw/../misc/lv_color.h ****     LV_COLOR_SET_G32(ret, LV_COLOR_GET_G(color) * 36); /*(2^8 - 1)/(2^3 - 1) = 255/7 = 36*/
 390:lvgl/src/draw/../misc/lv_color.h ****     LV_COLOR_SET_B32(ret, LV_COLOR_GET_B(color) * 85); /*(2^8 - 1)/(2^2 - 1) = 255/3 = 85*/
 391:lvgl/src/draw/../misc/lv_color.h ****     LV_COLOR_SET_A32(ret, 0xFF);
 392:lvgl/src/draw/../misc/lv_color.h ****     return ret.full;
 393:lvgl/src/draw/../misc/lv_color.h **** #elif LV_COLOR_DEPTH == 16
 394:lvgl/src/draw/../misc/lv_color.h ****     /**
 395:lvgl/src/draw/../misc/lv_color.h ****      * The floating point math for conversion is:
 396:lvgl/src/draw/../misc/lv_color.h ****      *  valueto = valuefrom * ( (2^bitsto - 1) / (float)(2^bitsfrom - 1) )
 397:lvgl/src/draw/../misc/lv_color.h ****      * The faster integer math for conversion is:
 398:lvgl/src/draw/../misc/lv_color.h ****      *  valueto = ( valuefrom * multiplier + adder ) >> divisor
 399:lvgl/src/draw/../misc/lv_color.h ****      *   multiplier = FLOOR( ( (2^bitsto - 1) << divisor ) / (float)(2^bitsfrom - 1) )
 400:lvgl/src/draw/../misc/lv_color.h ****      *
 401:lvgl/src/draw/../misc/lv_color.h ****      * Find the first divisor where ( adder >> divisor ) <= 0
 402:lvgl/src/draw/../misc/lv_color.h ****      *
 403:lvgl/src/draw/../misc/lv_color.h ****      * 5-bit to 8-bit: ( 31 * multiplier + adder ) >> divisor = 255
 404:lvgl/src/draw/../misc/lv_color.h ****      * divisor  multiplier  adder  min (0)  max (31)
 405:lvgl/src/draw/../misc/lv_color.h ****      *       0           8      7        7       255
 406:lvgl/src/draw/../misc/lv_color.h ****      *       1          16     14        7       255
 407:lvgl/src/draw/../misc/lv_color.h ****      *       2          32     28        7       255
 408:lvgl/src/draw/../misc/lv_color.h ****      *       3          65     25        3       255
 409:lvgl/src/draw/../misc/lv_color.h ****      *       4         131     19        1       255
 410:lvgl/src/draw/../misc/lv_color.h ****      *       5         263      7        0       255
 411:lvgl/src/draw/../misc/lv_color.h ****      *
 412:lvgl/src/draw/../misc/lv_color.h ****      * 6-bit to 8-bit: 255 = ( 63 * multiplier + adder ) >> divisor
 413:lvgl/src/draw/../misc/lv_color.h ****      * divisor  multiplier  adder  min (0)  max (63)
 414:lvgl/src/draw/../misc/lv_color.h ****      *       0           4      3        3       255
 415:lvgl/src/draw/../misc/lv_color.h ****      *       1           8      6        3       255
 416:lvgl/src/draw/../misc/lv_color.h ****      *       2          16     12        3       255
 417:lvgl/src/draw/../misc/lv_color.h ****      *       3          32     24        3       255
 418:lvgl/src/draw/../misc/lv_color.h ****      *       4          64     48        3       255
 419:lvgl/src/draw/../misc/lv_color.h ****      *       5         129     33        1       255
 420:lvgl/src/draw/../misc/lv_color.h ****      *       6         259      3        0       255
 421:lvgl/src/draw/../misc/lv_color.h ****      */
 422:lvgl/src/draw/../misc/lv_color.h **** 
 423:lvgl/src/draw/../misc/lv_color.h ****     lv_color32_t ret;
  34              		.loc 2 423 5 view .LVU1
ARM GAS  C:\usertemp\ccFesu0W.s 			page 9


 424:lvgl/src/draw/../misc/lv_color.h ****     LV_COLOR_SET_R32(ret, (LV_COLOR_GET_R(color) * 263 + 7) >> 5);
  35              		.loc 2 424 5 view .LVU2
  36 0000 C0F3C423 		ubfx	r3, r0, #11, #5
  37 0004 03EB4312 		add	r2, r3, r3, lsl #5
  38 0008 C3EBC203 		rsb	r3, r3, r2, lsl #3
  39 000c 0733     		adds	r3, r3, #7
  40 000e C3F34713 		ubfx	r3, r3, #5, #8
  41 0012 0022     		movs	r2, #0
  42              	.LVL1:
  43              		.loc 2 424 5 is_stmt 0 view .LVU3
  44 0014 63F31742 		bfi	r2, r3, #16, #8
  45              	.LVL2:
 425:lvgl/src/draw/../misc/lv_color.h ****     LV_COLOR_SET_G32(ret, (LV_COLOR_GET_G(color) * 259 + 3) >> 6);
  46              		.loc 2 425 5 is_stmt 1 view .LVU4
  47 0018 C0F34513 		ubfx	r3, r0, #5, #6
  48 001c 03EBC311 		add	r1, r3, r3, lsl #7
  49 0020 03EB4103 		add	r3, r3, r1, lsl #1
  50 0024 0333     		adds	r3, r3, #3
  51 0026 C3F38713 		ubfx	r3, r3, #6, #8
  52 002a 63F30F22 		bfi	r2, r3, #8, #8
 426:lvgl/src/draw/../misc/lv_color.h ****     LV_COLOR_SET_B32(ret, (LV_COLOR_GET_B(color) * 263 + 7) >> 5);
  53              		.loc 2 426 5 view .LVU5
  54 002e 00F01F03 		and	r3, r0, #31
  55 0032 03EB4311 		add	r1, r3, r3, lsl #5
  56 0036 C3EBC103 		rsb	r3, r3, r1, lsl #3
  57 003a 0733     		adds	r3, r3, #7
  58 003c C3F34713 		ubfx	r3, r3, #5, #8
  59 0040 63F30702 		bfi	r2, r3, #0, #8
 427:lvgl/src/draw/../misc/lv_color.h ****     LV_COLOR_SET_A32(ret, 0xFF);
  60              		.loc 2 427 5 view .LVU6
 428:lvgl/src/draw/../misc/lv_color.h ****     return ret.full;
  61              		.loc 2 428 5 view .LVU7
 429:lvgl/src/draw/../misc/lv_color.h **** #elif LV_COLOR_DEPTH == 32
 430:lvgl/src/draw/../misc/lv_color.h ****     return color.full;
 431:lvgl/src/draw/../misc/lv_color.h **** #endif
 432:lvgl/src/draw/../misc/lv_color.h **** }
  62              		.loc 2 432 1 is_stmt 0 view .LVU8
  63 0044 42F07F40 		orr	r0, r2, #-16777216
  64              	.LVL3:
  65              		.loc 2 432 1 view .LVU9
  66 0048 7047     		bx	lr
  67              		.cfi_endproc
  68              	.LFE5:
  70              		.section	.text.lv_color_mix,"ax",%progbits
  71              		.align	1
  72              		.syntax unified
  73              		.thumb
  74              		.thumb_func
  76              	lv_color_mix:
  77              	.LVL4:
  78              	.LFB6:
 433:lvgl/src/draw/../misc/lv_color.h **** 
 434:lvgl/src/draw/../misc/lv_color.h **** //! @cond Doxygen_Suppress
 435:lvgl/src/draw/../misc/lv_color.h **** 
 436:lvgl/src/draw/../misc/lv_color.h **** /**
 437:lvgl/src/draw/../misc/lv_color.h ****  * Mix two colors with a given ratio.
 438:lvgl/src/draw/../misc/lv_color.h ****  * @param c1 the first color to mix (usually the foreground)
ARM GAS  C:\usertemp\ccFesu0W.s 			page 10


 439:lvgl/src/draw/../misc/lv_color.h ****  * @param c2 the second color to mix (usually the background)
 440:lvgl/src/draw/../misc/lv_color.h ****  * @param mix The ratio of the colors. 0: full `c2`, 255: full `c1`, 127: half `c1` and half`c2`
 441:lvgl/src/draw/../misc/lv_color.h ****  * @return the mixed color
 442:lvgl/src/draw/../misc/lv_color.h ****  */
 443:lvgl/src/draw/../misc/lv_color.h **** LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t m
 444:lvgl/src/draw/../misc/lv_color.h **** {
  79              		.loc 2 444 1 is_stmt 1 view -0
  80              		.cfi_startproc
  81              		@ args = 0, pretend = 0, frame = 0
  82              		@ frame_needed = 0, uses_anonymous_args = 0
  83              		@ link register save eliminated.
 445:lvgl/src/draw/../misc/lv_color.h ****     lv_color_t ret;
  84              		.loc 2 445 5 view .LVU11
 446:lvgl/src/draw/../misc/lv_color.h **** 
 447:lvgl/src/draw/../misc/lv_color.h **** #if LV_COLOR_DEPTH == 16 && LV_COLOR_16_SWAP == 0
 448:lvgl/src/draw/../misc/lv_color.h ****     /*Source: https://stackoverflow.com/a/50012418/1999969*/
 449:lvgl/src/draw/../misc/lv_color.h ****     mix = (mix + 4) >> 3;
  85              		.loc 2 449 5 view .LVU12
  86              		.loc 2 449 16 is_stmt 0 view .LVU13
  87 0000 0432     		adds	r2, r2, #4
  88              	.LVL5:
 450:lvgl/src/draw/../misc/lv_color.h ****     uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
  89              		.loc 2 450 5 is_stmt 1 view .LVU14
  90              		.loc 2 450 19 is_stmt 0 view .LVU15
  91 0002 0B04     		lsls	r3, r1, #16
  92 0004 13FA81F1 		uxtah	r1, r3, r1
  93              	.LVL6:
  94              		.loc 2 450 14 view .LVU16
  95 0008 084B     		ldr	r3, .L3
  96 000a 1940     		ands	r1, r1, r3
  97              	.LVL7:
 451:lvgl/src/draw/../misc/lv_color.h ****                   0x7E0F81F; /*0b00000111111000001111100000011111*/
 452:lvgl/src/draw/../misc/lv_color.h ****     uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
  98              		.loc 2 452 5 is_stmt 1 view .LVU17
  99              		.loc 2 452 19 is_stmt 0 view .LVU18
 100 000c 4FEA004C 		lsl	ip, r0, #16
 101 0010 1CFA80F0 		uxtah	r0, ip, r0
 102              	.LVL8:
 103              		.loc 2 452 14 view .LVU19
 104 0014 1840     		ands	r0, r0, r3
 105              	.LVL9:
 453:lvgl/src/draw/../misc/lv_color.h ****     uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 106              		.loc 2 453 5 is_stmt 1 view .LVU20
 107              		.loc 2 453 30 is_stmt 0 view .LVU21
 108 0016 401A     		subs	r0, r0, r1
 109              	.LVL10:
 110              		.loc 2 453 36 view .LVU22
 111 0018 D208     		lsrs	r2, r2, #3
 112              	.LVL11:
 113              		.loc 2 453 36 view .LVU23
 114 001a 00FB02F2 		mul	r2, r0, r2
 115              		.loc 2 453 49 view .LVU24
 116 001e 01EB5211 		add	r1, r1, r2, lsr #5
 117              	.LVL12:
 118              		.loc 2 453 14 view .LVU25
 119 0022 01EA0300 		and	r0, r1, r3
 120              	.LVL13:
ARM GAS  C:\usertemp\ccFesu0W.s 			page 11


 454:lvgl/src/draw/../misc/lv_color.h ****     ret.full = (uint16_t)((result >> 16) | result);
 121              		.loc 2 454 5 is_stmt 1 view .LVU26
 455:lvgl/src/draw/../misc/lv_color.h **** #elif LV_COLOR_DEPTH != 1
 456:lvgl/src/draw/../misc/lv_color.h ****     /*LV_COLOR_DEPTH == 8, 16 or 32*/
 457:lvgl/src/draw/../misc/lv_color.h ****     LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 458:lvgl/src/draw/../misc/lv_color.h ****                                    (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
 459:lvgl/src/draw/../misc/lv_color.h ****     LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 460:lvgl/src/draw/../misc/lv_color.h ****                                    (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
 461:lvgl/src/draw/../misc/lv_color.h ****     LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 462:lvgl/src/draw/../misc/lv_color.h ****                                    (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
 463:lvgl/src/draw/../misc/lv_color.h ****     LV_COLOR_SET_A(ret, 0xFF);
 464:lvgl/src/draw/../misc/lv_color.h **** #else
 465:lvgl/src/draw/../misc/lv_color.h ****     /*LV_COLOR_DEPTH == 1*/
 466:lvgl/src/draw/../misc/lv_color.h ****     ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
 467:lvgl/src/draw/../misc/lv_color.h **** #endif
 468:lvgl/src/draw/../misc/lv_color.h **** 
 469:lvgl/src/draw/../misc/lv_color.h ****     return ret;
 122              		.loc 2 469 5 view .LVU27
 470:lvgl/src/draw/../misc/lv_color.h **** }
 123              		.loc 2 470 1 is_stmt 0 view .LVU28
 124 0026 40EA1040 		orr	r0, r0, r0, lsr #16
 125              	.LVL14:
 126              		.loc 2 470 1 view .LVU29
 127 002a 7047     		bx	lr
 128              	.L4:
 129              		.align	2
 130              	.L3:
 131 002c 1FF8E007 		.word	132184095
 132              		.cfi_endproc
 133              	.LFE6:
 135              		.section	.text.lv_img_buf_get_px_color,"ax",%progbits
 136              		.align	1
 137              		.global	lv_img_buf_get_px_color
 138              		.syntax unified
 139              		.thumb
 140              		.thumb_func
 142              	lv_img_buf_get_px_color:
 143              	.LVL15:
 144              	.LFB55:
   1:lvgl/src/draw/lv_img_buf.c **** /**
   2:lvgl/src/draw/lv_img_buf.c ****  * @file lv_img_buf.c
   3:lvgl/src/draw/lv_img_buf.c ****  *
   4:lvgl/src/draw/lv_img_buf.c ****  */
   5:lvgl/src/draw/lv_img_buf.c **** 
   6:lvgl/src/draw/lv_img_buf.c **** /*********************
   7:lvgl/src/draw/lv_img_buf.c ****  *      INCLUDES
   8:lvgl/src/draw/lv_img_buf.c ****  *********************/
   9:lvgl/src/draw/lv_img_buf.c **** #include <stddef.h>
  10:lvgl/src/draw/lv_img_buf.c **** #include <string.h>
  11:lvgl/src/draw/lv_img_buf.c **** #include "lv_img_buf.h"
  12:lvgl/src/draw/lv_img_buf.c **** #include "lv_draw_img.h"
  13:lvgl/src/draw/lv_img_buf.c **** #include "../misc/lv_math.h"
  14:lvgl/src/draw/lv_img_buf.c **** #include "../misc/lv_log.h"
  15:lvgl/src/draw/lv_img_buf.c **** #include "../misc/lv_mem.h"
  16:lvgl/src/draw/lv_img_buf.c **** 
  17:lvgl/src/draw/lv_img_buf.c **** /*********************
  18:lvgl/src/draw/lv_img_buf.c ****  *      DEFINES
ARM GAS  C:\usertemp\ccFesu0W.s 			page 12


  19:lvgl/src/draw/lv_img_buf.c ****  *********************/
  20:lvgl/src/draw/lv_img_buf.c **** 
  21:lvgl/src/draw/lv_img_buf.c **** /**********************
  22:lvgl/src/draw/lv_img_buf.c ****  *      TYPEDEFS
  23:lvgl/src/draw/lv_img_buf.c ****  **********************/
  24:lvgl/src/draw/lv_img_buf.c **** 
  25:lvgl/src/draw/lv_img_buf.c **** /**********************
  26:lvgl/src/draw/lv_img_buf.c ****  *  STATIC PROTOTYPES
  27:lvgl/src/draw/lv_img_buf.c ****  **********************/
  28:lvgl/src/draw/lv_img_buf.c **** 
  29:lvgl/src/draw/lv_img_buf.c **** /**********************
  30:lvgl/src/draw/lv_img_buf.c ****  *  STATIC VARIABLES
  31:lvgl/src/draw/lv_img_buf.c ****  **********************/
  32:lvgl/src/draw/lv_img_buf.c **** 
  33:lvgl/src/draw/lv_img_buf.c **** /**********************
  34:lvgl/src/draw/lv_img_buf.c ****  *      MACROS
  35:lvgl/src/draw/lv_img_buf.c ****  **********************/
  36:lvgl/src/draw/lv_img_buf.c **** 
  37:lvgl/src/draw/lv_img_buf.c **** /**********************
  38:lvgl/src/draw/lv_img_buf.c ****  *   GLOBAL FUNCTIONS
  39:lvgl/src/draw/lv_img_buf.c ****  **********************/
  40:lvgl/src/draw/lv_img_buf.c **** 
  41:lvgl/src/draw/lv_img_buf.c **** /**
  42:lvgl/src/draw/lv_img_buf.c ****  * Get the color of an image's pixel
  43:lvgl/src/draw/lv_img_buf.c ****  * @param dsc an image descriptor
  44:lvgl/src/draw/lv_img_buf.c ****  * @param x x coordinate of the point to get
  45:lvgl/src/draw/lv_img_buf.c ****  * @param y x coordinate of the point to get
  46:lvgl/src/draw/lv_img_buf.c ****  * @param color the color of the image. In case of `LV_IMG_CF_ALPHA_1/2/4/8` this color is used.
  47:lvgl/src/draw/lv_img_buf.c ****  * Not used in other cases.
  48:lvgl/src/draw/lv_img_buf.c ****  * @param safe true: check out of bounds
  49:lvgl/src/draw/lv_img_buf.c ****  * @return color of the point
  50:lvgl/src/draw/lv_img_buf.c ****  */
  51:lvgl/src/draw/lv_img_buf.c **** lv_color_t lv_img_buf_get_px_color(lv_img_dsc_t * dsc, lv_coord_t x, lv_coord_t y, lv_color_t color
  52:lvgl/src/draw/lv_img_buf.c **** {
 145              		.loc 1 52 1 is_stmt 1 view -0
 146              		.cfi_startproc
 147              		@ args = 0, pretend = 0, frame = 8
 148              		@ frame_needed = 0, uses_anonymous_args = 0
 149              		.loc 1 52 1 is_stmt 0 view .LVU31
 150 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 151              	.LCFI0:
 152              		.cfi_def_cfa_offset 20
 153              		.cfi_offset 4, -20
 154              		.cfi_offset 5, -16
 155              		.cfi_offset 6, -12
 156              		.cfi_offset 7, -8
 157              		.cfi_offset 14, -4
 158 0002 83B0     		sub	sp, sp, #12
 159              	.LCFI1:
 160              		.cfi_def_cfa_offset 32
 161 0004 0546     		mov	r5, r0
 162 0006 0C46     		mov	r4, r1
 163 0008 1646     		mov	r6, r2
  53:lvgl/src/draw/lv_img_buf.c ****     lv_color_t p_color = lv_color_black();
 164              		.loc 1 53 5 is_stmt 1 view .LVU32
 165              	.LBB41:
 166              	.LBI41:
ARM GAS  C:\usertemp\ccFesu0W.s 			page 13


 471:lvgl/src/draw/../misc/lv_color.h **** 
 472:lvgl/src/draw/../misc/lv_color.h **** LV_ATTRIBUTE_FAST_MEM static inline void lv_color_premult(lv_color_t c, uint8_t mix, uint16_t * out
 473:lvgl/src/draw/../misc/lv_color.h **** {
 474:lvgl/src/draw/../misc/lv_color.h **** #if LV_COLOR_DEPTH != 1
 475:lvgl/src/draw/../misc/lv_color.h ****     out[0] = (uint16_t)LV_COLOR_GET_R(c) * mix;
 476:lvgl/src/draw/../misc/lv_color.h ****     out[1] = (uint16_t)LV_COLOR_GET_G(c) * mix;
 477:lvgl/src/draw/../misc/lv_color.h ****     out[2] = (uint16_t)LV_COLOR_GET_B(c) * mix;
 478:lvgl/src/draw/../misc/lv_color.h **** #else
 479:lvgl/src/draw/../misc/lv_color.h ****     (void) mix;
 480:lvgl/src/draw/../misc/lv_color.h ****     /*Pre-multiplication can't be used with 1 bpp*/
 481:lvgl/src/draw/../misc/lv_color.h ****     out[0] = LV_COLOR_GET_R(c);
 482:lvgl/src/draw/../misc/lv_color.h ****     out[1] = LV_COLOR_GET_G(c);
 483:lvgl/src/draw/../misc/lv_color.h ****     out[2] = LV_COLOR_GET_B(c);
 484:lvgl/src/draw/../misc/lv_color.h **** #endif
 485:lvgl/src/draw/../misc/lv_color.h **** 
 486:lvgl/src/draw/../misc/lv_color.h **** }
 487:lvgl/src/draw/../misc/lv_color.h **** 
 488:lvgl/src/draw/../misc/lv_color.h **** /**
 489:lvgl/src/draw/../misc/lv_color.h ****  * Mix two colors with a given ratio. It runs faster then `lv_color_mix` but requires some pre comp
 490:lvgl/src/draw/../misc/lv_color.h ****  * @param premult_c1 The first color. Should be preprocessed with `lv_color_premult(c1)`
 491:lvgl/src/draw/../misc/lv_color.h ****  * @param c2 The second color. As it is no pre computation required on it
 492:lvgl/src/draw/../misc/lv_color.h ****  * @param mix The ratio of the colors. 0: full `c1`, 255: full `c2`, 127: half `c1` and half `c2`.
 493:lvgl/src/draw/../misc/lv_color.h ****  *            Should be modified like mix = `255 - mix`
 494:lvgl/src/draw/../misc/lv_color.h ****  * @return the mixed color
 495:lvgl/src/draw/../misc/lv_color.h ****  * @note 255 won't give clearly `c1`.
 496:lvgl/src/draw/../misc/lv_color.h ****  */
 497:lvgl/src/draw/../misc/lv_color.h **** LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix_premult(uint16_t * premult_c1, lv_color
 498:lvgl/src/draw/../misc/lv_color.h **** {
 499:lvgl/src/draw/../misc/lv_color.h ****     lv_color_t ret;
 500:lvgl/src/draw/../misc/lv_color.h **** #if LV_COLOR_DEPTH != 1
 501:lvgl/src/draw/../misc/lv_color.h ****     /*LV_COLOR_DEPTH == 8 or 32*/
 502:lvgl/src/draw/../misc/lv_color.h ****     LV_COLOR_SET_R(ret, LV_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OF
 503:lvgl/src/draw/../misc/lv_color.h ****     LV_COLOR_SET_G(ret, LV_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OF
 504:lvgl/src/draw/../misc/lv_color.h ****     LV_COLOR_SET_B(ret, LV_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OF
 505:lvgl/src/draw/../misc/lv_color.h ****     LV_COLOR_SET_A(ret, 0xFF);
 506:lvgl/src/draw/../misc/lv_color.h **** #else
 507:lvgl/src/draw/../misc/lv_color.h ****     /*LV_COLOR_DEPTH == 1*/
 508:lvgl/src/draw/../misc/lv_color.h ****     /*Restore color1*/
 509:lvgl/src/draw/../misc/lv_color.h ****     lv_color_t c1;
 510:lvgl/src/draw/../misc/lv_color.h ****     LV_COLOR_SET_R(c1, premult_c1[0]);
 511:lvgl/src/draw/../misc/lv_color.h ****     LV_COLOR_SET_G(c1, premult_c1[1]);
 512:lvgl/src/draw/../misc/lv_color.h ****     LV_COLOR_SET_B(c1, premult_c1[2]);
 513:lvgl/src/draw/../misc/lv_color.h ****     ret.full = mix > LV_OPA_50 ? c2.full : c1.full;
 514:lvgl/src/draw/../misc/lv_color.h **** #endif
 515:lvgl/src/draw/../misc/lv_color.h **** 
 516:lvgl/src/draw/../misc/lv_color.h ****     return ret;
 517:lvgl/src/draw/../misc/lv_color.h **** }
 518:lvgl/src/draw/../misc/lv_color.h **** 
 519:lvgl/src/draw/../misc/lv_color.h **** /**
 520:lvgl/src/draw/../misc/lv_color.h ****  * Mix two colors. Both color can have alpha value.
 521:lvgl/src/draw/../misc/lv_color.h ****  * @param bg_color background color
 522:lvgl/src/draw/../misc/lv_color.h ****  * @param bg_opa alpha of the background color
 523:lvgl/src/draw/../misc/lv_color.h ****  * @param fg_color foreground color
 524:lvgl/src/draw/../misc/lv_color.h ****  * @param fg_opa alpha of the foreground color
 525:lvgl/src/draw/../misc/lv_color.h ****  * @param res_color the result color
 526:lvgl/src/draw/../misc/lv_color.h ****  * @param res_opa the result opacity
 527:lvgl/src/draw/../misc/lv_color.h ****  */
ARM GAS  C:\usertemp\ccFesu0W.s 			page 14


 528:lvgl/src/draw/../misc/lv_color.h **** LV_ATTRIBUTE_FAST_MEM static inline void lv_color_mix_with_alpha(lv_color_t bg_color, lv_opa_t bg_o
 529:lvgl/src/draw/../misc/lv_color.h ****                                                                  lv_color_t fg_color, lv_opa_t fg_o
 530:lvgl/src/draw/../misc/lv_color.h ****                                                                  lv_color_t * res_color, lv_opa_t *
 531:lvgl/src/draw/../misc/lv_color.h **** {
 532:lvgl/src/draw/../misc/lv_color.h ****     /*Pick the foreground if it's fully opaque or the Background is fully transparent*/
 533:lvgl/src/draw/../misc/lv_color.h ****     if(fg_opa >= LV_OPA_MAX || bg_opa <= LV_OPA_MIN) {
 534:lvgl/src/draw/../misc/lv_color.h ****         res_color->full = fg_color.full;
 535:lvgl/src/draw/../misc/lv_color.h ****         *res_opa = fg_opa;
 536:lvgl/src/draw/../misc/lv_color.h ****     }
 537:lvgl/src/draw/../misc/lv_color.h ****     /*Transparent foreground: use the Background*/
 538:lvgl/src/draw/../misc/lv_color.h ****     else if(fg_opa <= LV_OPA_MIN) {
 539:lvgl/src/draw/../misc/lv_color.h ****         res_color->full = bg_color.full;
 540:lvgl/src/draw/../misc/lv_color.h ****         *res_opa = bg_opa;
 541:lvgl/src/draw/../misc/lv_color.h ****     }
 542:lvgl/src/draw/../misc/lv_color.h ****     /*Opaque background: use simple mix*/
 543:lvgl/src/draw/../misc/lv_color.h ****     else if(bg_opa >= LV_OPA_MAX) {
 544:lvgl/src/draw/../misc/lv_color.h ****         *res_color = lv_color_mix(fg_color, bg_color, fg_opa);
 545:lvgl/src/draw/../misc/lv_color.h ****         *res_opa = LV_OPA_COVER;
 546:lvgl/src/draw/../misc/lv_color.h ****     }
 547:lvgl/src/draw/../misc/lv_color.h ****     /*Both colors have alpha. Expensive calculation need to be applied*/
 548:lvgl/src/draw/../misc/lv_color.h ****     else {
 549:lvgl/src/draw/../misc/lv_color.h ****         /*Save the parameters and the result. If they will be asked again don't compute again*/
 550:lvgl/src/draw/../misc/lv_color.h ****         static lv_opa_t fg_opa_save     = 0;
 551:lvgl/src/draw/../misc/lv_color.h ****         static lv_opa_t bg_opa_save     = 0;
 552:lvgl/src/draw/../misc/lv_color.h ****         static lv_color_t fg_color_save = _LV_COLOR_ZERO_INITIALIZER;
 553:lvgl/src/draw/../misc/lv_color.h ****         static lv_color_t bg_color_save = _LV_COLOR_ZERO_INITIALIZER;
 554:lvgl/src/draw/../misc/lv_color.h ****         static lv_color_t res_color_saved = _LV_COLOR_ZERO_INITIALIZER;
 555:lvgl/src/draw/../misc/lv_color.h ****         static lv_opa_t res_opa_saved = 0;
 556:lvgl/src/draw/../misc/lv_color.h **** 
 557:lvgl/src/draw/../misc/lv_color.h ****         if(fg_opa != fg_opa_save || bg_opa != bg_opa_save || fg_color.full != fg_color_save.full ||
 558:lvgl/src/draw/../misc/lv_color.h ****            bg_color.full != bg_color_save.full) {
 559:lvgl/src/draw/../misc/lv_color.h ****             fg_opa_save        = fg_opa;
 560:lvgl/src/draw/../misc/lv_color.h ****             bg_opa_save        = bg_opa;
 561:lvgl/src/draw/../misc/lv_color.h ****             fg_color_save.full = fg_color.full;
 562:lvgl/src/draw/../misc/lv_color.h ****             bg_color_save.full = bg_color.full;
 563:lvgl/src/draw/../misc/lv_color.h ****             /*Info:
 564:lvgl/src/draw/../misc/lv_color.h ****              * https://en.wikipedia.org/wiki/Alpha_compositing#Analytical_derivation_of_the_over_op
 565:lvgl/src/draw/../misc/lv_color.h ****             res_opa_saved = 255 - ((uint16_t)((uint16_t)(255 - fg_opa) * (255 - bg_opa)) >> 8);
 566:lvgl/src/draw/../misc/lv_color.h ****             LV_ASSERT(res_opa_saved != 0);
 567:lvgl/src/draw/../misc/lv_color.h ****             lv_opa_t ratio = (uint16_t)((uint16_t)fg_opa * 255) / res_opa_saved;
 568:lvgl/src/draw/../misc/lv_color.h ****             res_color_saved = lv_color_mix(fg_color, bg_color, ratio);
 569:lvgl/src/draw/../misc/lv_color.h **** 
 570:lvgl/src/draw/../misc/lv_color.h ****         }
 571:lvgl/src/draw/../misc/lv_color.h **** 
 572:lvgl/src/draw/../misc/lv_color.h ****         res_color->full = res_color_saved.full;
 573:lvgl/src/draw/../misc/lv_color.h ****         *res_opa = res_opa_saved;
 574:lvgl/src/draw/../misc/lv_color.h ****     }
 575:lvgl/src/draw/../misc/lv_color.h **** }
 576:lvgl/src/draw/../misc/lv_color.h **** 
 577:lvgl/src/draw/../misc/lv_color.h **** //! @endcond
 578:lvgl/src/draw/../misc/lv_color.h **** 
 579:lvgl/src/draw/../misc/lv_color.h **** /**
 580:lvgl/src/draw/../misc/lv_color.h ****  * Get the brightness of a color
 581:lvgl/src/draw/../misc/lv_color.h ****  * @param color a color
 582:lvgl/src/draw/../misc/lv_color.h ****  * @return the brightness [0..255]
 583:lvgl/src/draw/../misc/lv_color.h ****  */
 584:lvgl/src/draw/../misc/lv_color.h **** static inline uint8_t lv_color_brightness(lv_color_t color)
ARM GAS  C:\usertemp\ccFesu0W.s 			page 15


 585:lvgl/src/draw/../misc/lv_color.h **** {
 586:lvgl/src/draw/../misc/lv_color.h ****     lv_color32_t c32;
 587:lvgl/src/draw/../misc/lv_color.h ****     c32.full        = lv_color_to32(color);
 588:lvgl/src/draw/../misc/lv_color.h ****     uint16_t bright = (uint16_t)(3u * LV_COLOR_GET_R32(c32) + LV_COLOR_GET_B32(c32) + 4u * LV_COLOR
 589:lvgl/src/draw/../misc/lv_color.h ****     return (uint8_t)(bright >> 3);
 590:lvgl/src/draw/../misc/lv_color.h **** }
 591:lvgl/src/draw/../misc/lv_color.h **** 
 592:lvgl/src/draw/../misc/lv_color.h **** static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
 593:lvgl/src/draw/../misc/lv_color.h **** {
 594:lvgl/src/draw/../misc/lv_color.h ****     return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 595:lvgl/src/draw/../misc/lv_color.h **** }
 596:lvgl/src/draw/../misc/lv_color.h **** 
 597:lvgl/src/draw/../misc/lv_color.h **** static inline lv_color_t lv_color_hex(uint32_t c)
 598:lvgl/src/draw/../misc/lv_color.h **** {
 599:lvgl/src/draw/../misc/lv_color.h **** #if LV_COLOR_DEPTH == 16
 600:lvgl/src/draw/../misc/lv_color.h ****     lv_color_t r;
 601:lvgl/src/draw/../misc/lv_color.h **** #if LV_COLOR_16_SWAP == 0
 602:lvgl/src/draw/../misc/lv_color.h ****     /* Convert a 4 bytes per pixel in format ARGB32 to R5G6B5 format
 603:lvgl/src/draw/../misc/lv_color.h ****         naive way (by calling lv_color_make with components):
 604:lvgl/src/draw/../misc/lv_color.h ****                     r = ((c & 0xFF0000) >> 19)
 605:lvgl/src/draw/../misc/lv_color.h ****                     g = ((c & 0xFF00) >> 10)
 606:lvgl/src/draw/../misc/lv_color.h ****                     b = ((c & 0xFF) >> 3)
 607:lvgl/src/draw/../misc/lv_color.h ****                     rgb565 = (r << 11) | (g << 5) | b
 608:lvgl/src/draw/../misc/lv_color.h ****         That's 3 mask, 5 bitshift and 2 or operations
 609:lvgl/src/draw/../misc/lv_color.h **** 
 610:lvgl/src/draw/../misc/lv_color.h ****         A bit better:
 611:lvgl/src/draw/../misc/lv_color.h ****                     r = ((c & 0xF80000) >> 8)
 612:lvgl/src/draw/../misc/lv_color.h ****                     g = ((c & 0xFC00) >> 5)
 613:lvgl/src/draw/../misc/lv_color.h ****                     b = ((c & 0xFF) >> 3)
 614:lvgl/src/draw/../misc/lv_color.h ****                     rgb565 = r | g | b
 615:lvgl/src/draw/../misc/lv_color.h ****         That's 3 mask, 3 bitshifts and 2 or operations */
 616:lvgl/src/draw/../misc/lv_color.h ****     r.full = (uint16_t)(((c & 0xF80000) >> 8) | ((c & 0xFC00) >> 5) | ((c & 0xFF) >> 3));
 617:lvgl/src/draw/../misc/lv_color.h **** #else
 618:lvgl/src/draw/../misc/lv_color.h ****     /* We want: rrrr rrrr GGGg gggg bbbb bbbb => gggb bbbb rrrr rGGG */
 619:lvgl/src/draw/../misc/lv_color.h ****     r.full = (uint16_t)(((c & 0xF80000) >> 16) | ((c & 0xFC00) >> 13) | ((c & 0x1C00) << 3) | ((c &
 620:lvgl/src/draw/../misc/lv_color.h **** #endif
 621:lvgl/src/draw/../misc/lv_color.h ****     return r;
 622:lvgl/src/draw/../misc/lv_color.h **** #elif LV_COLOR_DEPTH == 32
 623:lvgl/src/draw/../misc/lv_color.h ****     lv_color_t r;
 624:lvgl/src/draw/../misc/lv_color.h ****     r.full = c | 0xFF000000;
 625:lvgl/src/draw/../misc/lv_color.h ****     return r;
 626:lvgl/src/draw/../misc/lv_color.h **** #else /*LV_COLOR_DEPTH == 8*/
 627:lvgl/src/draw/../misc/lv_color.h ****     return lv_color_make((uint8_t)((c >> 16) & 0xFF), (uint8_t)((c >> 8) & 0xFF), (uint8_t)(c & 0xF
 628:lvgl/src/draw/../misc/lv_color.h **** #endif
 629:lvgl/src/draw/../misc/lv_color.h **** }
 630:lvgl/src/draw/../misc/lv_color.h **** 
 631:lvgl/src/draw/../misc/lv_color.h **** static inline lv_color_t lv_color_hex3(uint32_t c)
 632:lvgl/src/draw/../misc/lv_color.h **** {
 633:lvgl/src/draw/../misc/lv_color.h ****     return lv_color_make((uint8_t)(((c >> 4) & 0xF0) | ((c >> 8) & 0xF)), (uint8_t)((c & 0xF0) | ((
 634:lvgl/src/draw/../misc/lv_color.h ****                          (uint8_t)((c & 0xF) | ((c & 0xF) << 4)));
 635:lvgl/src/draw/../misc/lv_color.h **** }
 636:lvgl/src/draw/../misc/lv_color.h **** 
 637:lvgl/src/draw/../misc/lv_color.h **** static inline void lv_color_filter_dsc_init(lv_color_filter_dsc_t * dsc, lv_color_filter_cb_t cb)
 638:lvgl/src/draw/../misc/lv_color.h **** {
 639:lvgl/src/draw/../misc/lv_color.h ****     dsc->filter_cb = cb;
 640:lvgl/src/draw/../misc/lv_color.h **** }
 641:lvgl/src/draw/../misc/lv_color.h **** 
ARM GAS  C:\usertemp\ccFesu0W.s 			page 16


 642:lvgl/src/draw/../misc/lv_color.h **** //! @cond Doxygen_Suppress
 643:lvgl/src/draw/../misc/lv_color.h **** //!
 644:lvgl/src/draw/../misc/lv_color.h **** LV_ATTRIBUTE_FAST_MEM void lv_color_fill(lv_color_t * buf, lv_color_t color, uint32_t px_num);
 645:lvgl/src/draw/../misc/lv_color.h **** 
 646:lvgl/src/draw/../misc/lv_color.h **** //! @endcond
 647:lvgl/src/draw/../misc/lv_color.h **** lv_color_t lv_color_lighten(lv_color_t c, lv_opa_t lvl);
 648:lvgl/src/draw/../misc/lv_color.h **** 
 649:lvgl/src/draw/../misc/lv_color.h **** lv_color_t lv_color_darken(lv_color_t c, lv_opa_t lvl);
 650:lvgl/src/draw/../misc/lv_color.h **** 
 651:lvgl/src/draw/../misc/lv_color.h **** lv_color_t lv_color_change_lightness(lv_color_t c, lv_opa_t lvl);
 652:lvgl/src/draw/../misc/lv_color.h **** 
 653:lvgl/src/draw/../misc/lv_color.h **** /**
 654:lvgl/src/draw/../misc/lv_color.h ****  * Convert a HSV color to RGB
 655:lvgl/src/draw/../misc/lv_color.h ****  * @param h hue [0..359]
 656:lvgl/src/draw/../misc/lv_color.h ****  * @param s saturation [0..100]
 657:lvgl/src/draw/../misc/lv_color.h ****  * @param v value [0..100]
 658:lvgl/src/draw/../misc/lv_color.h ****  * @return the given RGB color in RGB (with LV_COLOR_DEPTH depth)
 659:lvgl/src/draw/../misc/lv_color.h ****  */
 660:lvgl/src/draw/../misc/lv_color.h **** lv_color_t lv_color_hsv_to_rgb(uint16_t h, uint8_t s, uint8_t v);
 661:lvgl/src/draw/../misc/lv_color.h **** 
 662:lvgl/src/draw/../misc/lv_color.h **** /**
 663:lvgl/src/draw/../misc/lv_color.h ****  * Convert a 32-bit RGB color to HSV
 664:lvgl/src/draw/../misc/lv_color.h ****  * @param r8 8-bit red
 665:lvgl/src/draw/../misc/lv_color.h ****  * @param g8 8-bit green
 666:lvgl/src/draw/../misc/lv_color.h ****  * @param b8 8-bit blue
 667:lvgl/src/draw/../misc/lv_color.h ****  * @return the given RGB color in HSV
 668:lvgl/src/draw/../misc/lv_color.h ****  */
 669:lvgl/src/draw/../misc/lv_color.h **** lv_color_hsv_t lv_color_rgb_to_hsv(uint8_t r8, uint8_t g8, uint8_t b8);
 670:lvgl/src/draw/../misc/lv_color.h **** 
 671:lvgl/src/draw/../misc/lv_color.h **** /**
 672:lvgl/src/draw/../misc/lv_color.h ****  * Convert a color to HSV
 673:lvgl/src/draw/../misc/lv_color.h ****  * @param color color
 674:lvgl/src/draw/../misc/lv_color.h ****  * @return the given color in HSV
 675:lvgl/src/draw/../misc/lv_color.h ****  */
 676:lvgl/src/draw/../misc/lv_color.h **** lv_color_hsv_t lv_color_to_hsv(lv_color_t color);
 677:lvgl/src/draw/../misc/lv_color.h **** 
 678:lvgl/src/draw/../misc/lv_color.h **** /**
 679:lvgl/src/draw/../misc/lv_color.h ****  * Just a wrapper around LV_COLOR_CHROMA_KEY because it might be more convenient to use a function 
 680:lvgl/src/draw/../misc/lv_color.h ****  * @return LV_COLOR_CHROMA_KEY
 681:lvgl/src/draw/../misc/lv_color.h ****  */
 682:lvgl/src/draw/../misc/lv_color.h **** static inline lv_color_t lv_color_chroma_key(void)
 683:lvgl/src/draw/../misc/lv_color.h **** {
 684:lvgl/src/draw/../misc/lv_color.h ****     return LV_COLOR_CHROMA_KEY;
 685:lvgl/src/draw/../misc/lv_color.h **** }
 686:lvgl/src/draw/../misc/lv_color.h **** 
 687:lvgl/src/draw/../misc/lv_color.h **** /**********************
 688:lvgl/src/draw/../misc/lv_color.h ****  *  PREDEFINED COLORS
 689:lvgl/src/draw/../misc/lv_color.h ****  **********************/
 690:lvgl/src/draw/../misc/lv_color.h **** /*Source: https://vuetifyjs.com/en/styles/colors/#material-colors*/
 691:lvgl/src/draw/../misc/lv_color.h **** 
 692:lvgl/src/draw/../misc/lv_color.h **** lv_color_t lv_palette_main(lv_palette_t p);
 693:lvgl/src/draw/../misc/lv_color.h **** static inline lv_color_t lv_color_white(void)
 694:lvgl/src/draw/../misc/lv_color.h **** {
 695:lvgl/src/draw/../misc/lv_color.h ****     return lv_color_make(0xff, 0xff, 0xff);
 696:lvgl/src/draw/../misc/lv_color.h **** }
 697:lvgl/src/draw/../misc/lv_color.h **** static inline lv_color_t lv_color_black(void)
 167              		.loc 2 697 26 view .LVU33
ARM GAS  C:\usertemp\ccFesu0W.s 			page 17


 698:lvgl/src/draw/../misc/lv_color.h **** {
 699:lvgl/src/draw/../misc/lv_color.h ****     return lv_color_make(0x00, 0x0, 0x00);
 168              		.loc 2 699 5 view .LVU34
 169              	.LVL16:
 170              	.LBB42:
 171              	.LBI42:
 592:lvgl/src/draw/../misc/lv_color.h **** {
 172              		.loc 2 592 26 view .LVU35
 173              	.LBB43:
 594:lvgl/src/draw/../misc/lv_color.h **** }
 174              		.loc 2 594 5 view .LVU36
 594:lvgl/src/draw/../misc/lv_color.h **** }
 175              		.loc 2 594 12 is_stmt 0 view .LVU37
 176 000a 4FF0000C 		mov	ip, #0	@ movhi
 177 000e 2CF01F0C 		bic	ip, ip, #31
 178 0012 2CF4FC6C 		bic	ip, ip, #2016
 179 0016 2CF4784C 		bic	ip, ip, #63488
 180              	.LVL17:
 594:lvgl/src/draw/../misc/lv_color.h **** }
 181              		.loc 2 594 12 view .LVU38
 182              	.LBE43:
 183              	.LBE42:
 184              	.LBE41:
 185              		.loc 1 53 26 view .LVU39
 186 001a ADF804C0 		strh	ip, [sp, #4]	@ movhi
  54:lvgl/src/draw/lv_img_buf.c ****     uint8_t * buf_u8 = (uint8_t *)dsc->data;
 187              		.loc 1 54 5 is_stmt 1 view .LVU40
 188              		.loc 1 54 15 is_stmt 0 view .LVU41
 189 001e 8768     		ldr	r7, [r0, #8]
 190              	.LVL18:
  55:lvgl/src/draw/lv_img_buf.c **** 
  56:lvgl/src/draw/lv_img_buf.c ****     if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYE
 191              		.loc 1 56 5 is_stmt 1 view .LVU42
 192              		.loc 1 56 23 is_stmt 0 view .LVU43
 193 0020 0178     		ldrb	r1, [r0]	@ zero_extendqisi2
 194              	.LVL19:
 195              		.loc 1 56 47 view .LVU44
 196 0022 01F01F01 		and	r1, r1, #31
 197 0026 0439     		subs	r1, r1, #4
 198 0028 0A29     		cmp	r1, #10
 199 002a 22D8     		bhi	.L6
 200 002c DFE801F0 		tbb	[pc, r1]
 201              	.LVL20:
 202              	.L8:
 203 0030 06       		.byte	(.L13-.L8)/2
 204 0031 06       		.byte	(.L13-.L8)/2
 205 0032 06       		.byte	(.L13-.L8)/2
 206 0033 25       		.byte	(.L12-.L8)/2
 207 0034 3B       		.byte	(.L11-.L8)/2
 208 0035 53       		.byte	(.L10-.L8)/2
 209 0036 6C       		.byte	(.L9-.L8)/2
 210 0037 77       		.byte	(.L7-.L8)/2
 211 0038 77       		.byte	(.L7-.L8)/2
 212 0039 77       		.byte	(.L7-.L8)/2
 213 003a 77       		.byte	(.L7-.L8)/2
 214 003b 00       		.p2align 1
 215              	.L13:
ARM GAS  C:\usertemp\ccFesu0W.s 			page 18


 216              	.LBB44:
  57:lvgl/src/draw/lv_img_buf.c ****        dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA) {
  58:lvgl/src/draw/lv_img_buf.c ****         uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf) >> 3;
 217              		.loc 1 58 9 is_stmt 1 view .LVU45
 218              		.loc 1 58 60 is_stmt 0 view .LVU46
 219 003c 0078     		ldrb	r0, [r0]	@ zero_extendqisi2
 220              	.LVL21:
 221              		.loc 1 58 27 view .LVU47
 222 003e 00F01F00 		and	r0, r0, #31
 223 0042 FFF7FEFF 		bl	lv_img_cf_get_px_size
 224              	.LVL22:
 225              		.loc 1 58 17 discriminator 1 view .LVU48
 226 0046 C0F3C700 		ubfx	r0, r0, #3, #8
 227              	.LVL23:
  59:lvgl/src/draw/lv_img_buf.c ****         uint32_t px     = dsc->header.w * y * px_size + x * px_size;
 228              		.loc 1 59 9 is_stmt 1 view .LVU49
 229              		.loc 1 59 38 is_stmt 0 view .LVU50
 230 004a 2B68     		ldr	r3, [r5]
 231 004c C3F38A23 		ubfx	r3, r3, #10, #11
 232              		.loc 1 59 41 view .LVU51
 233 0050 06FB03F3 		mul	r3, r6, r3
 234              		.loc 1 59 59 view .LVU52
 235 0054 00FB04F4 		mul	r4, r0, r4
 236              	.LVL24:
 237              		.loc 1 59 55 view .LVU53
 238 0058 00FB0344 		mla	r4, r0, r3, r4
 239              	.LVL25:
  60:lvgl/src/draw/lv_img_buf.c ****         lv_memcpy_small(&p_color, &buf_u8[px], sizeof(lv_color_t));
 240              		.loc 1 60 9 is_stmt 1 view .LVU54
 241              		.loc 1 60 35 is_stmt 0 view .LVU55
 242 005c 3C44     		add	r4, r4, r7
 243              	.LVL26:
 244              	.LBB45:
 245              	.LBI45:
 246              		.file 3 "lvgl/src/draw/../misc/lv_mem.h"
   1:lvgl/src/draw/../misc/lv_mem.h **** /**
   2:lvgl/src/draw/../misc/lv_mem.h ****  * @file lv_mem.h
   3:lvgl/src/draw/../misc/lv_mem.h ****  *
   4:lvgl/src/draw/../misc/lv_mem.h ****  */
   5:lvgl/src/draw/../misc/lv_mem.h **** 
   6:lvgl/src/draw/../misc/lv_mem.h **** #ifndef LV_MEM_H
   7:lvgl/src/draw/../misc/lv_mem.h **** #define LV_MEM_H
   8:lvgl/src/draw/../misc/lv_mem.h **** 
   9:lvgl/src/draw/../misc/lv_mem.h **** #ifdef __cplusplus
  10:lvgl/src/draw/../misc/lv_mem.h **** extern "C" {
  11:lvgl/src/draw/../misc/lv_mem.h **** #endif
  12:lvgl/src/draw/../misc/lv_mem.h **** 
  13:lvgl/src/draw/../misc/lv_mem.h **** /*********************
  14:lvgl/src/draw/../misc/lv_mem.h ****  *      INCLUDES
  15:lvgl/src/draw/../misc/lv_mem.h ****  *********************/
  16:lvgl/src/draw/../misc/lv_mem.h **** #include "../lv_conf_internal.h"
  17:lvgl/src/draw/../misc/lv_mem.h **** 
  18:lvgl/src/draw/../misc/lv_mem.h **** #include <stdint.h>
  19:lvgl/src/draw/../misc/lv_mem.h **** #include <stddef.h>
  20:lvgl/src/draw/../misc/lv_mem.h **** #include <string.h>
  21:lvgl/src/draw/../misc/lv_mem.h **** 
  22:lvgl/src/draw/../misc/lv_mem.h **** #include "lv_types.h"
ARM GAS  C:\usertemp\ccFesu0W.s 			page 19


  23:lvgl/src/draw/../misc/lv_mem.h **** 
  24:lvgl/src/draw/../misc/lv_mem.h **** /*********************
  25:lvgl/src/draw/../misc/lv_mem.h ****  *      DEFINES
  26:lvgl/src/draw/../misc/lv_mem.h ****  *********************/
  27:lvgl/src/draw/../misc/lv_mem.h **** 
  28:lvgl/src/draw/../misc/lv_mem.h **** /**********************
  29:lvgl/src/draw/../misc/lv_mem.h ****  *      TYPEDEFS
  30:lvgl/src/draw/../misc/lv_mem.h ****  **********************/
  31:lvgl/src/draw/../misc/lv_mem.h **** 
  32:lvgl/src/draw/../misc/lv_mem.h **** /**
  33:lvgl/src/draw/../misc/lv_mem.h ****  * Heap information structure.
  34:lvgl/src/draw/../misc/lv_mem.h ****  */
  35:lvgl/src/draw/../misc/lv_mem.h **** typedef struct {
  36:lvgl/src/draw/../misc/lv_mem.h ****     uint32_t total_size; /**< Total heap size*/
  37:lvgl/src/draw/../misc/lv_mem.h ****     uint32_t free_cnt;
  38:lvgl/src/draw/../misc/lv_mem.h ****     uint32_t free_size; /**< Size of available memory*/
  39:lvgl/src/draw/../misc/lv_mem.h ****     uint32_t free_biggest_size;
  40:lvgl/src/draw/../misc/lv_mem.h ****     uint32_t used_cnt;
  41:lvgl/src/draw/../misc/lv_mem.h ****     uint32_t max_used; /**< Max size of Heap memory used*/
  42:lvgl/src/draw/../misc/lv_mem.h ****     uint8_t used_pct; /**< Percentage used*/
  43:lvgl/src/draw/../misc/lv_mem.h ****     uint8_t frag_pct; /**< Amount of fragmentation*/
  44:lvgl/src/draw/../misc/lv_mem.h **** } lv_mem_monitor_t;
  45:lvgl/src/draw/../misc/lv_mem.h **** 
  46:lvgl/src/draw/../misc/lv_mem.h **** typedef struct {
  47:lvgl/src/draw/../misc/lv_mem.h ****     void * p;
  48:lvgl/src/draw/../misc/lv_mem.h ****     uint16_t size;
  49:lvgl/src/draw/../misc/lv_mem.h ****     uint8_t used : 1;
  50:lvgl/src/draw/../misc/lv_mem.h **** } lv_mem_buf_t;
  51:lvgl/src/draw/../misc/lv_mem.h **** 
  52:lvgl/src/draw/../misc/lv_mem.h **** typedef lv_mem_buf_t lv_mem_buf_arr_t[LV_MEM_BUF_MAX_NUM];
  53:lvgl/src/draw/../misc/lv_mem.h **** 
  54:lvgl/src/draw/../misc/lv_mem.h **** /**********************
  55:lvgl/src/draw/../misc/lv_mem.h ****  * GLOBAL PROTOTYPES
  56:lvgl/src/draw/../misc/lv_mem.h ****  **********************/
  57:lvgl/src/draw/../misc/lv_mem.h **** 
  58:lvgl/src/draw/../misc/lv_mem.h **** /**
  59:lvgl/src/draw/../misc/lv_mem.h ****  * Initialize the dyn_mem module (work memory and other variables)
  60:lvgl/src/draw/../misc/lv_mem.h ****  */
  61:lvgl/src/draw/../misc/lv_mem.h **** void lv_mem_init(void);
  62:lvgl/src/draw/../misc/lv_mem.h **** 
  63:lvgl/src/draw/../misc/lv_mem.h **** /**
  64:lvgl/src/draw/../misc/lv_mem.h ****  * Clean up the memory buffer which frees all the allocated memories.
  65:lvgl/src/draw/../misc/lv_mem.h ****  * @note It work only if `LV_MEM_CUSTOM == 0`
  66:lvgl/src/draw/../misc/lv_mem.h ****  */
  67:lvgl/src/draw/../misc/lv_mem.h **** void lv_mem_deinit(void);
  68:lvgl/src/draw/../misc/lv_mem.h **** 
  69:lvgl/src/draw/../misc/lv_mem.h **** /**
  70:lvgl/src/draw/../misc/lv_mem.h ****  * Allocate a memory dynamically
  71:lvgl/src/draw/../misc/lv_mem.h ****  * @param size size of the memory to allocate in bytes
  72:lvgl/src/draw/../misc/lv_mem.h ****  * @return pointer to the allocated memory
  73:lvgl/src/draw/../misc/lv_mem.h ****  */
  74:lvgl/src/draw/../misc/lv_mem.h **** void * lv_mem_alloc(size_t size);
  75:lvgl/src/draw/../misc/lv_mem.h **** 
  76:lvgl/src/draw/../misc/lv_mem.h **** /**
  77:lvgl/src/draw/../misc/lv_mem.h ****  * Free an allocated data
  78:lvgl/src/draw/../misc/lv_mem.h ****  * @param data pointer to an allocated memory
  79:lvgl/src/draw/../misc/lv_mem.h ****  */
ARM GAS  C:\usertemp\ccFesu0W.s 			page 20


  80:lvgl/src/draw/../misc/lv_mem.h **** void lv_mem_free(void * data);
  81:lvgl/src/draw/../misc/lv_mem.h **** 
  82:lvgl/src/draw/../misc/lv_mem.h **** /**
  83:lvgl/src/draw/../misc/lv_mem.h ****  * Reallocate a memory with a new size. The old content will be kept.
  84:lvgl/src/draw/../misc/lv_mem.h ****  * @param data pointer to an allocated memory.
  85:lvgl/src/draw/../misc/lv_mem.h ****  * Its content will be copied to the new memory block and freed
  86:lvgl/src/draw/../misc/lv_mem.h ****  * @param new_size the desired new size in byte
  87:lvgl/src/draw/../misc/lv_mem.h ****  * @return pointer to the new memory, NULL on failure
  88:lvgl/src/draw/../misc/lv_mem.h ****  */
  89:lvgl/src/draw/../misc/lv_mem.h **** void * lv_mem_realloc(void * data_p, size_t new_size);
  90:lvgl/src/draw/../misc/lv_mem.h **** 
  91:lvgl/src/draw/../misc/lv_mem.h **** /**
  92:lvgl/src/draw/../misc/lv_mem.h ****  *
  93:lvgl/src/draw/../misc/lv_mem.h ****  * @return
  94:lvgl/src/draw/../misc/lv_mem.h ****  */
  95:lvgl/src/draw/../misc/lv_mem.h **** lv_res_t lv_mem_test(void);
  96:lvgl/src/draw/../misc/lv_mem.h **** 
  97:lvgl/src/draw/../misc/lv_mem.h **** /**
  98:lvgl/src/draw/../misc/lv_mem.h ****  * Give information about the work memory of dynamic allocation
  99:lvgl/src/draw/../misc/lv_mem.h ****  * @param mon_p pointer to a lv_mem_monitor_t variable,
 100:lvgl/src/draw/../misc/lv_mem.h ****  *              the result of the analysis will be stored here
 101:lvgl/src/draw/../misc/lv_mem.h ****  */
 102:lvgl/src/draw/../misc/lv_mem.h **** void lv_mem_monitor(lv_mem_monitor_t * mon_p);
 103:lvgl/src/draw/../misc/lv_mem.h **** 
 104:lvgl/src/draw/../misc/lv_mem.h **** 
 105:lvgl/src/draw/../misc/lv_mem.h **** /**
 106:lvgl/src/draw/../misc/lv_mem.h ****  * Get a temporal buffer with the given size.
 107:lvgl/src/draw/../misc/lv_mem.h ****  * @param size the required size
 108:lvgl/src/draw/../misc/lv_mem.h ****  */
 109:lvgl/src/draw/../misc/lv_mem.h **** void * lv_mem_buf_get(uint32_t size);
 110:lvgl/src/draw/../misc/lv_mem.h **** 
 111:lvgl/src/draw/../misc/lv_mem.h **** /**
 112:lvgl/src/draw/../misc/lv_mem.h ****  * Release a memory buffer
 113:lvgl/src/draw/../misc/lv_mem.h ****  * @param p buffer to release
 114:lvgl/src/draw/../misc/lv_mem.h ****  */
 115:lvgl/src/draw/../misc/lv_mem.h **** void lv_mem_buf_release(void * p);
 116:lvgl/src/draw/../misc/lv_mem.h **** 
 117:lvgl/src/draw/../misc/lv_mem.h **** /**
 118:lvgl/src/draw/../misc/lv_mem.h ****  * Free all memory buffers
 119:lvgl/src/draw/../misc/lv_mem.h ****  */
 120:lvgl/src/draw/../misc/lv_mem.h **** void lv_mem_buf_free_all(void);
 121:lvgl/src/draw/../misc/lv_mem.h **** 
 122:lvgl/src/draw/../misc/lv_mem.h **** //! @cond Doxygen_Suppress
 123:lvgl/src/draw/../misc/lv_mem.h **** 
 124:lvgl/src/draw/../misc/lv_mem.h **** #if LV_MEMCPY_MEMSET_STD
 125:lvgl/src/draw/../misc/lv_mem.h **** 
 126:lvgl/src/draw/../misc/lv_mem.h **** /**
 127:lvgl/src/draw/../misc/lv_mem.h ****  * Wrapper for the standard memcpy
 128:lvgl/src/draw/../misc/lv_mem.h ****  * @param dst pointer to the destination buffer
 129:lvgl/src/draw/../misc/lv_mem.h ****  * @param src pointer to the source buffer
 130:lvgl/src/draw/../misc/lv_mem.h ****  * @param len number of byte to copy
 131:lvgl/src/draw/../misc/lv_mem.h ****  */
 132:lvgl/src/draw/../misc/lv_mem.h **** static inline void * lv_memcpy(void * dst, const void * src, size_t len)
 133:lvgl/src/draw/../misc/lv_mem.h **** {
 134:lvgl/src/draw/../misc/lv_mem.h ****     return memcpy(dst, src, len);
 135:lvgl/src/draw/../misc/lv_mem.h **** }
 136:lvgl/src/draw/../misc/lv_mem.h **** 
ARM GAS  C:\usertemp\ccFesu0W.s 			page 21


 137:lvgl/src/draw/../misc/lv_mem.h **** /**
 138:lvgl/src/draw/../misc/lv_mem.h ****  * Wrapper for the standard memcpy
 139:lvgl/src/draw/../misc/lv_mem.h ****  * @param dst pointer to the destination buffer
 140:lvgl/src/draw/../misc/lv_mem.h ****  * @param src pointer to the source buffer
 141:lvgl/src/draw/../misc/lv_mem.h ****  * @param len number of byte to copy
 142:lvgl/src/draw/../misc/lv_mem.h ****  */
 143:lvgl/src/draw/../misc/lv_mem.h **** static inline void * lv_memcpy_small(void * dst, const void * src, size_t len)
 144:lvgl/src/draw/../misc/lv_mem.h **** {
 145:lvgl/src/draw/../misc/lv_mem.h ****     return memcpy(dst, src, len);
 146:lvgl/src/draw/../misc/lv_mem.h **** }
 147:lvgl/src/draw/../misc/lv_mem.h **** 
 148:lvgl/src/draw/../misc/lv_mem.h **** /**
 149:lvgl/src/draw/../misc/lv_mem.h ****  * Wrapper for the standard memset
 150:lvgl/src/draw/../misc/lv_mem.h ****  * @param dst pointer to the destination buffer
 151:lvgl/src/draw/../misc/lv_mem.h ****  * @param v value to set [0..255]
 152:lvgl/src/draw/../misc/lv_mem.h ****  * @param len number of byte to set
 153:lvgl/src/draw/../misc/lv_mem.h ****  */
 154:lvgl/src/draw/../misc/lv_mem.h **** static inline void lv_memset(void * dst, uint8_t v, size_t len)
 155:lvgl/src/draw/../misc/lv_mem.h **** {
 156:lvgl/src/draw/../misc/lv_mem.h ****     memset(dst, v, len);
 157:lvgl/src/draw/../misc/lv_mem.h **** }
 158:lvgl/src/draw/../misc/lv_mem.h **** 
 159:lvgl/src/draw/../misc/lv_mem.h **** /**
 160:lvgl/src/draw/../misc/lv_mem.h ****  * Wrapper for the standard memset with fixed 0x00 value
 161:lvgl/src/draw/../misc/lv_mem.h ****  * @param dst pointer to the destination buffer
 162:lvgl/src/draw/../misc/lv_mem.h ****  * @param len number of byte to set
 163:lvgl/src/draw/../misc/lv_mem.h ****  */
 164:lvgl/src/draw/../misc/lv_mem.h **** static inline void lv_memset_00(void * dst, size_t len)
 165:lvgl/src/draw/../misc/lv_mem.h **** {
 166:lvgl/src/draw/../misc/lv_mem.h ****     memset(dst, 0x00, len);
 167:lvgl/src/draw/../misc/lv_mem.h **** }
 168:lvgl/src/draw/../misc/lv_mem.h **** 
 169:lvgl/src/draw/../misc/lv_mem.h **** /**
 170:lvgl/src/draw/../misc/lv_mem.h ****  * Wrapper for the standard memset with fixed 0xFF value
 171:lvgl/src/draw/../misc/lv_mem.h ****  * @param dst pointer to the destination buffer
 172:lvgl/src/draw/../misc/lv_mem.h ****  * @param len number of byte to set
 173:lvgl/src/draw/../misc/lv_mem.h ****  */
 174:lvgl/src/draw/../misc/lv_mem.h **** static inline void lv_memset_ff(void * dst, size_t len)
 175:lvgl/src/draw/../misc/lv_mem.h **** {
 176:lvgl/src/draw/../misc/lv_mem.h ****     memset(dst, 0xFF, len);
 177:lvgl/src/draw/../misc/lv_mem.h **** }
 178:lvgl/src/draw/../misc/lv_mem.h **** 
 179:lvgl/src/draw/../misc/lv_mem.h **** #else
 180:lvgl/src/draw/../misc/lv_mem.h **** /**
 181:lvgl/src/draw/../misc/lv_mem.h ****  * Same as `memcpy` but optimized for 4 byte operation.
 182:lvgl/src/draw/../misc/lv_mem.h ****  * @param dst pointer to the destination buffer
 183:lvgl/src/draw/../misc/lv_mem.h ****  * @param src pointer to the source buffer
 184:lvgl/src/draw/../misc/lv_mem.h ****  * @param len number of byte to copy
 185:lvgl/src/draw/../misc/lv_mem.h ****  */
 186:lvgl/src/draw/../misc/lv_mem.h **** LV_ATTRIBUTE_FAST_MEM void * lv_memcpy(void * dst, const void * src, size_t len);
 187:lvgl/src/draw/../misc/lv_mem.h **** 
 188:lvgl/src/draw/../misc/lv_mem.h **** /**
 189:lvgl/src/draw/../misc/lv_mem.h ****  * Same as `memcpy` but optimized to copy only a few bytes.
 190:lvgl/src/draw/../misc/lv_mem.h ****  * @param dst pointer to the destination buffer
 191:lvgl/src/draw/../misc/lv_mem.h ****  * @param src pointer to the source buffer
 192:lvgl/src/draw/../misc/lv_mem.h ****  * @param len number of byte to copy
 193:lvgl/src/draw/../misc/lv_mem.h ****  */
ARM GAS  C:\usertemp\ccFesu0W.s 			page 22


 194:lvgl/src/draw/../misc/lv_mem.h **** LV_ATTRIBUTE_FAST_MEM static inline void * lv_memcpy_small(void * dst, const void * src, size_t len
 247              		.loc 3 194 44 is_stmt 1 view .LVU56
 248              	.LBB46:
 195:lvgl/src/draw/../misc/lv_mem.h **** {
 196:lvgl/src/draw/../misc/lv_mem.h ****     uint8_t * d8 = (uint8_t *)dst;
 249              		.loc 3 196 5 view .LVU57
 197:lvgl/src/draw/../misc/lv_mem.h ****     const uint8_t * s8 = (const uint8_t *)src;
 250              		.loc 3 197 5 view .LVU58
 198:lvgl/src/draw/../misc/lv_mem.h **** 
 199:lvgl/src/draw/../misc/lv_mem.h ****     while(len) {
 251              		.loc 3 199 5 view .LVU59
 196:lvgl/src/draw/../misc/lv_mem.h ****     const uint8_t * s8 = (const uint8_t *)src;
 252              		.loc 3 196 15 is_stmt 0 view .LVU60
 253 005e 01AA     		add	r2, sp, #4
 254              	.LVL27:
 255              		.loc 3 199 10 view .LVU61
 256 0060 0223     		movs	r3, #2
 257              	.LVL28:
 258              		.loc 3 199 10 view .LVU62
 259 0062 04E0     		b	.L14
 260              	.LVL29:
 261              	.L15:
 200:lvgl/src/draw/../misc/lv_mem.h ****         *d8 = *s8;
 262              		.loc 3 200 9 is_stmt 1 view .LVU63
 263              		.loc 3 200 15 is_stmt 0 view .LVU64
 264 0064 14F8011B 		ldrb	r1, [r4], #1	@ zero_extendqisi2
 265              	.LVL30:
 266              		.loc 3 200 13 view .LVU65
 267 0068 02F8011B 		strb	r1, [r2], #1
 268              	.LVL31:
 201:lvgl/src/draw/../misc/lv_mem.h ****         d8++;
 269              		.loc 3 201 9 is_stmt 1 view .LVU66
 202:lvgl/src/draw/../misc/lv_mem.h ****         s8++;
 270              		.loc 3 202 9 view .LVU67
 203:lvgl/src/draw/../misc/lv_mem.h ****         len--;
 271              		.loc 3 203 9 view .LVU68
 272              		.loc 3 203 12 is_stmt 0 view .LVU69
 273 006c 013B     		subs	r3, r3, #1
 274              	.LVL32:
 275              	.L14:
 199:lvgl/src/draw/../misc/lv_mem.h ****         *d8 = *s8;
 276              		.loc 3 199 11 is_stmt 1 view .LVU70
 277 006e 002B     		cmp	r3, #0
 278 0070 F8D1     		bne	.L15
 279              	.LVL33:
 280              	.L6:
 199:lvgl/src/draw/../misc/lv_mem.h ****         *d8 = *s8;
 281              		.loc 3 199 11 is_stmt 0 view .LVU71
 282              	.LBE46:
 283              	.LBE45:
 284              	.LBE44:
  61:lvgl/src/draw/lv_img_buf.c **** #if LV_COLOR_SIZE == 32
  62:lvgl/src/draw/lv_img_buf.c ****         p_color.ch.alpha = 0xFF; /*Only the color should be get so use a default alpha value*/
  63:lvgl/src/draw/lv_img_buf.c **** #endif
  64:lvgl/src/draw/lv_img_buf.c ****     }
  65:lvgl/src/draw/lv_img_buf.c ****     else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT) {
  66:lvgl/src/draw/lv_img_buf.c ****         buf_u8 += 4 * 2;
ARM GAS  C:\usertemp\ccFesu0W.s 			page 23


  67:lvgl/src/draw/lv_img_buf.c ****         uint8_t bit = x & 0x7;
  68:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 3;
  69:lvgl/src/draw/lv_img_buf.c **** 
  70:lvgl/src/draw/lv_img_buf.c ****         /*Get the current pixel.
  71:lvgl/src/draw/lv_img_buf.c ****          *dsc->header.w + 7 means rounding up to 8 because the lines are byte aligned
  72:lvgl/src/draw/lv_img_buf.c ****          *so the possible real width are 8, 16, 24 ...*/
  73:lvgl/src/draw/lv_img_buf.c ****         uint32_t px  = ((dsc->header.w + 7) >> 3) * y + x;
  74:lvgl/src/draw/lv_img_buf.c ****         p_color.full = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
  75:lvgl/src/draw/lv_img_buf.c ****     }
  76:lvgl/src/draw/lv_img_buf.c ****     else if(dsc->header.cf == LV_IMG_CF_INDEXED_2BIT) {
  77:lvgl/src/draw/lv_img_buf.c ****         buf_u8 += 4 * 4;
  78:lvgl/src/draw/lv_img_buf.c ****         uint8_t bit = (x & 0x3) * 2;
  79:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 2;
  80:lvgl/src/draw/lv_img_buf.c **** 
  81:lvgl/src/draw/lv_img_buf.c ****         /*Get the current pixel.
  82:lvgl/src/draw/lv_img_buf.c ****          *dsc->header.w + 3 means rounding up to 4 because the lines are byte aligned
  83:lvgl/src/draw/lv_img_buf.c ****          *so the possible real width are 4, 8, 12 ...*/
  84:lvgl/src/draw/lv_img_buf.c ****         uint32_t px  = ((dsc->header.w + 3) >> 2) * y + x;
  85:lvgl/src/draw/lv_img_buf.c ****         p_color.full = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
  86:lvgl/src/draw/lv_img_buf.c ****     }
  87:lvgl/src/draw/lv_img_buf.c ****     else if(dsc->header.cf == LV_IMG_CF_INDEXED_4BIT) {
  88:lvgl/src/draw/lv_img_buf.c ****         buf_u8 += 4 * 16;
  89:lvgl/src/draw/lv_img_buf.c ****         uint8_t bit = (x & 0x1) * 4;
  90:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 1;
  91:lvgl/src/draw/lv_img_buf.c **** 
  92:lvgl/src/draw/lv_img_buf.c ****         /*Get the current pixel.
  93:lvgl/src/draw/lv_img_buf.c ****          *dsc->header.w + 1 means rounding up to 2 because the lines are byte aligned
  94:lvgl/src/draw/lv_img_buf.c ****          *so the possible real width are 2, 4, 6 ...*/
  95:lvgl/src/draw/lv_img_buf.c ****         uint32_t px  = ((dsc->header.w + 1) >> 1) * y + x;
  96:lvgl/src/draw/lv_img_buf.c ****         p_color.full = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
  97:lvgl/src/draw/lv_img_buf.c ****     }
  98:lvgl/src/draw/lv_img_buf.c ****     else if(dsc->header.cf == LV_IMG_CF_INDEXED_8BIT) {
  99:lvgl/src/draw/lv_img_buf.c ****         buf_u8 += 4 * 256;
 100:lvgl/src/draw/lv_img_buf.c ****         uint32_t px  = dsc->header.w * y + x;
 101:lvgl/src/draw/lv_img_buf.c ****         p_color.full = buf_u8[px];
 102:lvgl/src/draw/lv_img_buf.c ****     }
 103:lvgl/src/draw/lv_img_buf.c ****     else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
 104:lvgl/src/draw/lv_img_buf.c ****             dsc->header.cf == LV_IMG_CF_ALPHA_4BIT || dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
 105:lvgl/src/draw/lv_img_buf.c ****         p_color = color;
 106:lvgl/src/draw/lv_img_buf.c ****     }
 107:lvgl/src/draw/lv_img_buf.c ****     return p_color;
 285              		.loc 1 107 5 is_stmt 1 view .LVU72
 108:lvgl/src/draw/lv_img_buf.c **** }
 286              		.loc 1 108 1 is_stmt 0 view .LVU73
 287 0072 BDF80400 		ldrh	r0, [sp, #4]
 288 0076 03B0     		add	sp, sp, #12
 289              	.LCFI2:
 290              		.cfi_remember_state
 291              		.cfi_def_cfa_offset 20
 292              		@ sp needed
 293 0078 F0BD     		pop	{r4, r5, r6, r7, pc}
 294              	.LVL34:
 295              	.L12:
 296              	.LCFI3:
 297              		.cfi_restore_state
 298              	.LBB47:
  66:lvgl/src/draw/lv_img_buf.c ****         uint8_t bit = x & 0x7;
ARM GAS  C:\usertemp\ccFesu0W.s 			page 24


 299              		.loc 1 66 9 is_stmt 1 view .LVU74
  67:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 3;
 300              		.loc 1 67 9 view .LVU75
  67:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 3;
 301              		.loc 1 67 17 is_stmt 0 view .LVU76
 302 007a 04F00702 		and	r2, r4, #7
 303              	.LVL35:
  68:lvgl/src/draw/lv_img_buf.c **** 
 304              		.loc 1 68 9 is_stmt 1 view .LVU77
  73:lvgl/src/draw/lv_img_buf.c ****         p_color.full = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
 305              		.loc 1 73 9 view .LVU78
  73:lvgl/src/draw/lv_img_buf.c ****         p_color.full = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
 306              		.loc 1 73 37 is_stmt 0 view .LVU79
 307 007e 0368     		ldr	r3, [r0]
 308              	.LVL36:
  73:lvgl/src/draw/lv_img_buf.c ****         p_color.full = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
 309              		.loc 1 73 37 view .LVU80
 310 0080 C3F38A23 		ubfx	r3, r3, #10, #11
  73:lvgl/src/draw/lv_img_buf.c ****         p_color.full = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
 311              		.loc 1 73 40 view .LVU81
 312 0084 0733     		adds	r3, r3, #7
  73:lvgl/src/draw/lv_img_buf.c ****         p_color.full = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
 313              		.loc 1 73 45 view .LVU82
 314 0086 DB10     		asrs	r3, r3, #3
  73:lvgl/src/draw/lv_img_buf.c ****         p_color.full = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
 315              		.loc 1 73 51 view .LVU83
 316 0088 06FB03F3 		mul	r3, r6, r3
  73:lvgl/src/draw/lv_img_buf.c ****         p_color.full = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
 317              		.loc 1 73 55 view .LVU84
 318 008c 03EBE403 		add	r3, r3, r4, asr #3
 319              	.LVL37:
  74:lvgl/src/draw/lv_img_buf.c ****     }
 320              		.loc 1 74 9 is_stmt 1 view .LVU85
  74:lvgl/src/draw/lv_img_buf.c ****     }
 321              		.loc 1 74 31 is_stmt 0 view .LVU86
 322 0090 3B44     		add	r3, r3, r7
 323              	.LVL38:
  74:lvgl/src/draw/lv_img_buf.c ****     }
 324              		.loc 1 74 31 view .LVU87
 325 0092 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
  74:lvgl/src/draw/lv_img_buf.c ****     }
 326              		.loc 1 74 47 view .LVU88
 327 0094 C2F10702 		rsb	r2, r2, #7
 328              	.LVL39:
  74:lvgl/src/draw/lv_img_buf.c ****     }
 329              		.loc 1 74 41 view .LVU89
 330 0098 0121     		movs	r1, #1
 331 009a 9140     		lsls	r1, r1, r2
  74:lvgl/src/draw/lv_img_buf.c ****     }
 332              		.loc 1 74 36 view .LVU90
 333 009c 0B40     		ands	r3, r3, r1
  74:lvgl/src/draw/lv_img_buf.c ****     }
 334              		.loc 1 74 56 view .LVU91
 335 009e 1341     		asrs	r3, r3, r2
  74:lvgl/src/draw/lv_img_buf.c ****     }
 336              		.loc 1 74 22 view .LVU92
 337 00a0 ADF80430 		strh	r3, [sp, #4]	@ movhi
ARM GAS  C:\usertemp\ccFesu0W.s 			page 25


 338              	.LBE47:
 339 00a4 E5E7     		b	.L6
 340              	.LVL40:
 341              	.L11:
 342              	.LBB48:
  77:lvgl/src/draw/lv_img_buf.c ****         uint8_t bit = (x & 0x3) * 2;
 343              		.loc 1 77 9 is_stmt 1 view .LVU93
  78:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 2;
 344              		.loc 1 78 9 view .LVU94
  78:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 2;
 345              		.loc 1 78 17 is_stmt 0 view .LVU95
 346 00a6 04F00303 		and	r3, r4, #3
 347              	.LVL41:
  78:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 2;
 348              		.loc 1 78 17 view .LVU96
 349 00aa 5A00     		lsls	r2, r3, #1
 350              	.LVL42:
  79:lvgl/src/draw/lv_img_buf.c **** 
 351              		.loc 1 79 9 is_stmt 1 view .LVU97
  84:lvgl/src/draw/lv_img_buf.c ****         p_color.full = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
 352              		.loc 1 84 9 view .LVU98
  84:lvgl/src/draw/lv_img_buf.c ****         p_color.full = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
 353              		.loc 1 84 37 is_stmt 0 view .LVU99
 354 00ac 0368     		ldr	r3, [r0]
 355 00ae C3F38A23 		ubfx	r3, r3, #10, #11
  84:lvgl/src/draw/lv_img_buf.c ****         p_color.full = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
 356              		.loc 1 84 40 view .LVU100
 357 00b2 0333     		adds	r3, r3, #3
  84:lvgl/src/draw/lv_img_buf.c ****         p_color.full = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
 358              		.loc 1 84 45 view .LVU101
 359 00b4 9B10     		asrs	r3, r3, #2
  84:lvgl/src/draw/lv_img_buf.c ****         p_color.full = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
 360              		.loc 1 84 51 view .LVU102
 361 00b6 06FB03F3 		mul	r3, r6, r3
  84:lvgl/src/draw/lv_img_buf.c ****         p_color.full = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
 362              		.loc 1 84 55 view .LVU103
 363 00ba 03EBA403 		add	r3, r3, r4, asr #2
 364              	.LVL43:
  85:lvgl/src/draw/lv_img_buf.c ****     }
 365              		.loc 1 85 9 is_stmt 1 view .LVU104
  85:lvgl/src/draw/lv_img_buf.c ****     }
 366              		.loc 1 85 31 is_stmt 0 view .LVU105
 367 00be 3B44     		add	r3, r3, r7
 368              	.LVL44:
  85:lvgl/src/draw/lv_img_buf.c ****     }
 369              		.loc 1 85 31 view .LVU106
 370 00c0 197C     		ldrb	r1, [r3, #16]	@ zero_extendqisi2
  85:lvgl/src/draw/lv_img_buf.c ****     }
 371              		.loc 1 85 47 view .LVU107
 372 00c2 C2F10603 		rsb	r3, r2, #6
  85:lvgl/src/draw/lv_img_buf.c ****     }
 373              		.loc 1 85 41 view .LVU108
 374 00c6 0322     		movs	r2, #3
 375              	.LVL45:
  85:lvgl/src/draw/lv_img_buf.c ****     }
 376              		.loc 1 85 41 view .LVU109
 377 00c8 9A40     		lsls	r2, r2, r3
ARM GAS  C:\usertemp\ccFesu0W.s 			page 26


  85:lvgl/src/draw/lv_img_buf.c ****     }
 378              		.loc 1 85 36 view .LVU110
 379 00ca 0A40     		ands	r2, r2, r1
  85:lvgl/src/draw/lv_img_buf.c ****     }
 380              		.loc 1 85 56 view .LVU111
 381 00cc 42FA03F3 		asr	r3, r2, r3
  85:lvgl/src/draw/lv_img_buf.c ****     }
 382              		.loc 1 85 22 view .LVU112
 383 00d0 ADF80430 		strh	r3, [sp, #4]	@ movhi
 384              	.LBE48:
 385 00d4 CDE7     		b	.L6
 386              	.LVL46:
 387              	.L10:
 388              	.LBB49:
  88:lvgl/src/draw/lv_img_buf.c ****         uint8_t bit = (x & 0x1) * 4;
 389              		.loc 1 88 9 is_stmt 1 view .LVU113
  89:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 1;
 390              		.loc 1 89 9 view .LVU114
  89:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 1;
 391              		.loc 1 89 17 is_stmt 0 view .LVU115
 392 00d6 04F00103 		and	r3, r4, #1
 393              	.LVL47:
  89:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 1;
 394              		.loc 1 89 17 view .LVU116
 395 00da 9A00     		lsls	r2, r3, #2
 396              	.LVL48:
  90:lvgl/src/draw/lv_img_buf.c **** 
 397              		.loc 1 90 9 is_stmt 1 view .LVU117
  95:lvgl/src/draw/lv_img_buf.c ****         p_color.full = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
 398              		.loc 1 95 9 view .LVU118
  95:lvgl/src/draw/lv_img_buf.c ****         p_color.full = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
 399              		.loc 1 95 37 is_stmt 0 view .LVU119
 400 00dc 0368     		ldr	r3, [r0]
 401 00de C3F38A23 		ubfx	r3, r3, #10, #11
  95:lvgl/src/draw/lv_img_buf.c ****         p_color.full = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
 402              		.loc 1 95 40 view .LVU120
 403 00e2 0133     		adds	r3, r3, #1
  95:lvgl/src/draw/lv_img_buf.c ****         p_color.full = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
 404              		.loc 1 95 45 view .LVU121
 405 00e4 5B10     		asrs	r3, r3, #1
  95:lvgl/src/draw/lv_img_buf.c ****         p_color.full = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
 406              		.loc 1 95 51 view .LVU122
 407 00e6 06FB03F3 		mul	r3, r6, r3
  95:lvgl/src/draw/lv_img_buf.c ****         p_color.full = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
 408              		.loc 1 95 55 view .LVU123
 409 00ea 03EB6403 		add	r3, r3, r4, asr #1
 410              	.LVL49:
  96:lvgl/src/draw/lv_img_buf.c ****     }
 411              		.loc 1 96 9 is_stmt 1 view .LVU124
  96:lvgl/src/draw/lv_img_buf.c ****     }
 412              		.loc 1 96 31 is_stmt 0 view .LVU125
 413 00ee 3B44     		add	r3, r3, r7
 414              	.LVL50:
  96:lvgl/src/draw/lv_img_buf.c ****     }
 415              		.loc 1 96 31 view .LVU126
 416 00f0 93F84010 		ldrb	r1, [r3, #64]	@ zero_extendqisi2
  96:lvgl/src/draw/lv_img_buf.c ****     }
ARM GAS  C:\usertemp\ccFesu0W.s 			page 27


 417              		.loc 1 96 49 view .LVU127
 418 00f4 C2F10403 		rsb	r3, r2, #4
  96:lvgl/src/draw/lv_img_buf.c ****     }
 419              		.loc 1 96 43 view .LVU128
 420 00f8 0F22     		movs	r2, #15
 421              	.LVL51:
  96:lvgl/src/draw/lv_img_buf.c ****     }
 422              		.loc 1 96 43 view .LVU129
 423 00fa 9A40     		lsls	r2, r2, r3
  96:lvgl/src/draw/lv_img_buf.c ****     }
 424              		.loc 1 96 36 view .LVU130
 425 00fc 0A40     		ands	r2, r2, r1
  96:lvgl/src/draw/lv_img_buf.c ****     }
 426              		.loc 1 96 58 view .LVU131
 427 00fe 42FA03F3 		asr	r3, r2, r3
  96:lvgl/src/draw/lv_img_buf.c ****     }
 428              		.loc 1 96 22 view .LVU132
 429 0102 ADF80430 		strh	r3, [sp, #4]	@ movhi
 430              	.LBE49:
 431 0106 B4E7     		b	.L6
 432              	.LVL52:
 433              	.L9:
 434              	.LBB50:
  99:lvgl/src/draw/lv_img_buf.c ****         uint32_t px  = dsc->header.w * y + x;
 435              		.loc 1 99 9 is_stmt 1 view .LVU133
 100:lvgl/src/draw/lv_img_buf.c ****         p_color.full = buf_u8[px];
 436              		.loc 1 100 9 view .LVU134
 100:lvgl/src/draw/lv_img_buf.c ****         p_color.full = buf_u8[px];
 437              		.loc 1 100 35 is_stmt 0 view .LVU135
 438 0108 0368     		ldr	r3, [r0]
 439              	.LVL53:
 100:lvgl/src/draw/lv_img_buf.c ****         p_color.full = buf_u8[px];
 440              		.loc 1 100 35 view .LVU136
 441 010a C3F38A23 		ubfx	r3, r3, #10, #11
 100:lvgl/src/draw/lv_img_buf.c ****         p_color.full = buf_u8[px];
 442              		.loc 1 100 42 view .LVU137
 443 010e 03FB0644 		mla	r4, r3, r6, r4
 444              	.LVL54:
 101:lvgl/src/draw/lv_img_buf.c ****     }
 445              		.loc 1 101 9 is_stmt 1 view .LVU138
 101:lvgl/src/draw/lv_img_buf.c ****     }
 446              		.loc 1 101 30 is_stmt 0 view .LVU139
 447 0112 2744     		add	r7, r7, r4
 448              	.LVL55:
 101:lvgl/src/draw/lv_img_buf.c ****     }
 449              		.loc 1 101 30 view .LVU140
 450 0114 97F80034 		ldrb	r3, [r7, #1024]	@ zero_extendqisi2
 101:lvgl/src/draw/lv_img_buf.c ****     }
 451              		.loc 1 101 22 view .LVU141
 452 0118 ADF80430 		strh	r3, [sp, #4]	@ movhi
 453              	.LBE50:
 454 011c A9E7     		b	.L6
 455              	.LVL56:
 456              	.L7:
 105:lvgl/src/draw/lv_img_buf.c ****     }
 457              		.loc 1 105 9 is_stmt 1 view .LVU142
 105:lvgl/src/draw/lv_img_buf.c ****     }
ARM GAS  C:\usertemp\ccFesu0W.s 			page 28


 458              		.loc 1 105 17 is_stmt 0 view .LVU143
 459 011e ADF80430 		strh	r3, [sp, #4]	@ movhi
 460 0122 A6E7     		b	.L6
 461              		.cfi_endproc
 462              	.LFE55:
 464              		.section	.text.lv_img_buf_get_px_alpha,"ax",%progbits
 465              		.align	1
 466              		.global	lv_img_buf_get_px_alpha
 467              		.syntax unified
 468              		.thumb
 469              		.thumb_func
 471              	lv_img_buf_get_px_alpha:
 472              	.LVL57:
 473              	.LFB56:
 109:lvgl/src/draw/lv_img_buf.c **** 
 110:lvgl/src/draw/lv_img_buf.c **** /**
 111:lvgl/src/draw/lv_img_buf.c ****  * Get the alpha value of an image's pixel
 112:lvgl/src/draw/lv_img_buf.c ****  * @param dsc pointer to an image descriptor
 113:lvgl/src/draw/lv_img_buf.c ****  * @param x x coordinate of the point to set
 114:lvgl/src/draw/lv_img_buf.c ****  * @param y x coordinate of the point to set
 115:lvgl/src/draw/lv_img_buf.c ****  * @param safe true: check out of bounds
 116:lvgl/src/draw/lv_img_buf.c ****  * @return alpha value of the point
 117:lvgl/src/draw/lv_img_buf.c ****  */
 118:lvgl/src/draw/lv_img_buf.c **** lv_opa_t lv_img_buf_get_px_alpha(lv_img_dsc_t * dsc, lv_coord_t x, lv_coord_t y)
 119:lvgl/src/draw/lv_img_buf.c **** {
 474              		.loc 1 119 1 is_stmt 1 view -0
 475              		.cfi_startproc
 476              		@ args = 0, pretend = 0, frame = 16
 477              		@ frame_needed = 0, uses_anonymous_args = 0
 478              		.loc 1 119 1 is_stmt 0 view .LVU145
 479 0000 70B5     		push	{r4, r5, r6, lr}
 480              	.LCFI4:
 481              		.cfi_def_cfa_offset 16
 482              		.cfi_offset 4, -16
 483              		.cfi_offset 5, -12
 484              		.cfi_offset 6, -8
 485              		.cfi_offset 14, -4
 486 0002 84B0     		sub	sp, sp, #16
 487              	.LCFI5:
 488              		.cfi_def_cfa_offset 32
 489 0004 8446     		mov	ip, r0
 490 0006 8E46     		mov	lr, r1
 491 0008 1446     		mov	r4, r2
 120:lvgl/src/draw/lv_img_buf.c ****     uint8_t * buf_u8 = (uint8_t *)dsc->data;
 492              		.loc 1 120 5 is_stmt 1 view .LVU146
 493              		.loc 1 120 15 is_stmt 0 view .LVU147
 494 000a 8568     		ldr	r5, [r0, #8]
 495              	.LVL58:
 121:lvgl/src/draw/lv_img_buf.c **** 
 122:lvgl/src/draw/lv_img_buf.c ****     if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA) {
 496              		.loc 1 122 5 is_stmt 1 view .LVU148
 497              		.loc 1 122 23 is_stmt 0 view .LVU149
 498 000c 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 499 000e 03F01F03 		and	r3, r3, #31
 500 0012 053B     		subs	r3, r3, #5
 501 0014 092B     		cmp	r3, #9
 502 0016 69D8     		bhi	.L27
ARM GAS  C:\usertemp\ccFesu0W.s 			page 29


 503 0018 DFE803F0 		tbb	[pc, r3]
 504              	.LVL59:
 505              	.L21:
 506 001c 05       		.byte	(.L25-.L21)/2
 507 001d 68       		.byte	(.L27-.L21)/2
 508 001e 68       		.byte	(.L27-.L21)/2
 509 001f 68       		.byte	(.L27-.L21)/2
 510 0020 68       		.byte	(.L27-.L21)/2
 511 0021 68       		.byte	(.L27-.L21)/2
 512 0022 0F       		.byte	(.L24-.L21)/2
 513 0023 28       		.byte	(.L23-.L21)/2
 514 0024 43       		.byte	(.L22-.L21)/2
 515 0025 61       		.byte	(.L20-.L21)/2
 516              		.p2align 1
 517              	.L25:
 518              	.LBB51:
 123:lvgl/src/draw/lv_img_buf.c ****         uint32_t px = dsc->header.w * y * LV_IMG_PX_SIZE_ALPHA_BYTE + x * LV_IMG_PX_SIZE_ALPHA_BYTE
 519              		.loc 1 123 9 is_stmt 1 view .LVU150
 520              		.loc 1 123 34 is_stmt 0 view .LVU151
 521 0026 0368     		ldr	r3, [r0]
 522 0028 C3F38A23 		ubfx	r3, r3, #10, #11
 523              		.loc 1 123 69 view .LVU152
 524 002c 03FB0413 		mla	r3, r3, r4, r1
 525 0030 03EB4303 		add	r3, r3, r3, lsl #1
 526              	.LVL60:
 124:lvgl/src/draw/lv_img_buf.c ****         return buf_u8[px + LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 527              		.loc 1 124 9 is_stmt 1 view .LVU153
 528              		.loc 1 124 22 is_stmt 0 view .LVU154
 529 0034 2B44     		add	r3, r3, r5
 530              	.LVL61:
 531              		.loc 1 124 22 view .LVU155
 532 0036 9878     		ldrb	r0, [r3, #2]	@ zero_extendqisi2
 533              	.LVL62:
 534              		.loc 1 124 22 view .LVU156
 535 0038 59E0     		b	.L19
 536              	.LVL63:
 537              	.L24:
 538              		.loc 1 124 22 view .LVU157
 539              	.LBE51:
 540              	.LBB52:
 125:lvgl/src/draw/lv_img_buf.c ****     }
 126:lvgl/src/draw/lv_img_buf.c ****     else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT) {
 127:lvgl/src/draw/lv_img_buf.c ****         uint8_t bit = x & 0x7;
 541              		.loc 1 127 9 is_stmt 1 view .LVU158
 542              		.loc 1 127 17 is_stmt 0 view .LVU159
 543 003a 01F00702 		and	r2, r1, #7
 544              	.LVL64:
 128:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 3;
 545              		.loc 1 128 9 is_stmt 1 view .LVU160
 129:lvgl/src/draw/lv_img_buf.c **** 
 130:lvgl/src/draw/lv_img_buf.c ****         /*Get the current pixel.
 131:lvgl/src/draw/lv_img_buf.c ****          *dsc->header.w + 7 means rounding up to 8 because the lines are byte aligned
 132:lvgl/src/draw/lv_img_buf.c ****          *so the possible real width are 8 ,16, 24 ...*/
 133:lvgl/src/draw/lv_img_buf.c ****         uint32_t px    = ((dsc->header.w + 7) >> 3) * y + x;
 546              		.loc 1 133 9 view .LVU161
 547              		.loc 1 133 39 is_stmt 0 view .LVU162
 548 003e 0368     		ldr	r3, [r0]
ARM GAS  C:\usertemp\ccFesu0W.s 			page 30


 549 0040 C3F38A23 		ubfx	r3, r3, #10, #11
 550              		.loc 1 133 42 view .LVU163
 551 0044 0733     		adds	r3, r3, #7
 552              		.loc 1 133 47 view .LVU164
 553 0046 DB10     		asrs	r3, r3, #3
 554              		.loc 1 133 53 view .LVU165
 555 0048 04FB03F3 		mul	r3, r4, r3
 556              		.loc 1 133 57 view .LVU166
 557 004c 03EBE103 		add	r3, r3, r1, asr #3
 558              	.LVL65:
 134:lvgl/src/draw/lv_img_buf.c ****         uint8_t px_opa = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
 559              		.loc 1 134 9 is_stmt 1 view .LVU167
 560              		.loc 1 134 33 is_stmt 0 view .LVU168
 561 0050 EB5C     		ldrb	r3, [r5, r3]	@ zero_extendqisi2
 562              	.LVL66:
 563              		.loc 1 134 49 view .LVU169
 564 0052 C2F10702 		rsb	r2, r2, #7
 565              	.LVL67:
 566              		.loc 1 134 43 view .LVU170
 567 0056 0121     		movs	r1, #1
 568              	.LVL68:
 569              		.loc 1 134 43 view .LVU171
 570 0058 9140     		lsls	r1, r1, r2
 571              		.loc 1 134 38 view .LVU172
 572 005a 0B40     		ands	r3, r3, r1
 573              		.loc 1 134 58 view .LVU173
 574 005c 1341     		asrs	r3, r3, r2
 575              	.LVL69:
 135:lvgl/src/draw/lv_img_buf.c ****         return px_opa ? LV_OPA_TRANSP : LV_OPA_COVER;
 576              		.loc 1 135 9 is_stmt 1 view .LVU174
 577              		.loc 1 135 39 is_stmt 0 view .LVU175
 578 005e 13F0FF0F 		tst	r3, #255
 579 0062 01D0     		beq	.L28
 580              		.loc 1 135 39 discriminator 1 view .LVU176
 581 0064 0020     		movs	r0, #0
 582              	.LVL70:
 583              		.loc 1 135 39 discriminator 1 view .LVU177
 584 0066 42E0     		b	.L19
 585              	.LVL71:
 586              	.L28:
 587              		.loc 1 135 39 discriminator 2 view .LVU178
 588 0068 FF20     		movs	r0, #255
 589              	.LVL72:
 590              		.loc 1 135 39 view .LVU179
 591 006a 40E0     		b	.L19
 592              	.LVL73:
 593              	.L23:
 594              		.loc 1 135 39 view .LVU180
 595              	.LBE52:
 596              	.LBB53:
 136:lvgl/src/draw/lv_img_buf.c ****     }
 137:lvgl/src/draw/lv_img_buf.c ****     else if(dsc->header.cf == LV_IMG_CF_ALPHA_2BIT) {
 138:lvgl/src/draw/lv_img_buf.c ****         const uint8_t opa_table[4] = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 597              		.loc 1 138 9 is_stmt 1 view .LVU181
 598              		.loc 1 138 23 is_stmt 0 view .LVU182
 599 006c 214B     		ldr	r3, .L30
 600 006e 0093     		str	r3, [sp]
ARM GAS  C:\usertemp\ccFesu0W.s 			page 31


 139:lvgl/src/draw/lv_img_buf.c **** 
 140:lvgl/src/draw/lv_img_buf.c ****         uint8_t bit = (x & 0x3) * 2;
 601              		.loc 1 140 9 is_stmt 1 view .LVU183
 602              		.loc 1 140 17 is_stmt 0 view .LVU184
 603 0070 01F00302 		and	r2, r1, #3
 604 0074 5200     		lsls	r2, r2, #1
 605              	.LVL74:
 141:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 2;
 606              		.loc 1 141 9 is_stmt 1 view .LVU185
 142:lvgl/src/draw/lv_img_buf.c **** 
 143:lvgl/src/draw/lv_img_buf.c ****         /*Get the current pixel.
 144:lvgl/src/draw/lv_img_buf.c ****          *dsc->header.w + 4 means rounding up to 8 because the lines are byte aligned
 145:lvgl/src/draw/lv_img_buf.c ****          *so the possible real width are 4 ,8, 12 ...*/
 146:lvgl/src/draw/lv_img_buf.c ****         uint32_t px    = ((dsc->header.w + 3) >> 2) * y + x;
 607              		.loc 1 146 9 view .LVU186
 608              		.loc 1 146 39 is_stmt 0 view .LVU187
 609 0076 0368     		ldr	r3, [r0]
 610 0078 C3F38A23 		ubfx	r3, r3, #10, #11
 611              		.loc 1 146 42 view .LVU188
 612 007c 0333     		adds	r3, r3, #3
 613              		.loc 1 146 47 view .LVU189
 614 007e 9B10     		asrs	r3, r3, #2
 615              		.loc 1 146 53 view .LVU190
 616 0080 04FB03F3 		mul	r3, r4, r3
 617              		.loc 1 146 57 view .LVU191
 618 0084 03EBA103 		add	r3, r3, r1, asr #2
 619              	.LVL75:
 147:lvgl/src/draw/lv_img_buf.c ****         uint8_t px_opa = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
 620              		.loc 1 147 9 is_stmt 1 view .LVU192
 621              		.loc 1 147 33 is_stmt 0 view .LVU193
 622 0088 EB5C     		ldrb	r3, [r5, r3]	@ zero_extendqisi2
 623              	.LVL76:
 624              		.loc 1 147 49 view .LVU194
 625 008a C2F10602 		rsb	r2, r2, #6
 626              	.LVL77:
 627              		.loc 1 147 43 view .LVU195
 628 008e 0321     		movs	r1, #3
 629              	.LVL78:
 630              		.loc 1 147 43 view .LVU196
 631 0090 9140     		lsls	r1, r1, r2
 632              		.loc 1 147 38 view .LVU197
 633 0092 0B40     		ands	r3, r3, r1
 634              		.loc 1 147 58 view .LVU198
 635 0094 1341     		asrs	r3, r3, r2
 636              	.LVL79:
 148:lvgl/src/draw/lv_img_buf.c ****         return opa_table[px_opa];
 637              		.loc 1 148 9 is_stmt 1 view .LVU199
 638              		.loc 1 148 25 is_stmt 0 view .LVU200
 639 0096 04AA     		add	r2, sp, #16
 640 0098 52FA83F3 		uxtab	r3, r2, r3
 641              	.LVL80:
 642              		.loc 1 148 25 view .LVU201
 643 009c 13F8100C 		ldrb	r0, [r3, #-16]	@ zero_extendqisi2
 644              	.LVL81:
 645              		.loc 1 148 25 view .LVU202
 646 00a0 25E0     		b	.L19
 647              	.LVL82:
ARM GAS  C:\usertemp\ccFesu0W.s 			page 32


 648              	.L22:
 649              		.loc 1 148 25 view .LVU203
 650              	.LBE53:
 651              	.LBB54:
 149:lvgl/src/draw/lv_img_buf.c ****     }
 150:lvgl/src/draw/lv_img_buf.c ****     else if(dsc->header.cf == LV_IMG_CF_ALPHA_4BIT) {
 151:lvgl/src/draw/lv_img_buf.c ****         const uint8_t opa_table[16] = {0,  17, 34,  51, /*Opacity mapping with bpp = 4*/
 652              		.loc 1 151 9 is_stmt 1 view .LVU204
 653              		.loc 1 151 23 is_stmt 0 view .LVU205
 654 00a2 154B     		ldr	r3, .L30+4
 655 00a4 0FCB     		ldm	r3, {r0, r1, r2, r3}
 656              	.LVL83:
 657              		.loc 1 151 23 view .LVU206
 658 00a6 04AE     		add	r6, sp, #16
 659 00a8 06E90F00 		stmdb	r6, {r0, r1, r2, r3}
 152:lvgl/src/draw/lv_img_buf.c ****                                        68, 85, 102, 119, 136, 153, 170, 187, 204, 221, 238, 255
 153:lvgl/src/draw/lv_img_buf.c ****                                       };
 154:lvgl/src/draw/lv_img_buf.c **** 
 155:lvgl/src/draw/lv_img_buf.c ****         uint8_t bit = (x & 0x1) * 4;
 660              		.loc 1 155 9 is_stmt 1 view .LVU207
 661              		.loc 1 155 17 is_stmt 0 view .LVU208
 662 00ac 0EF00102 		and	r2, lr, #1
 663 00b0 9200     		lsls	r2, r2, #2
 664              	.LVL84:
 156:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 1;
 665              		.loc 1 156 9 is_stmt 1 view .LVU209
 157:lvgl/src/draw/lv_img_buf.c **** 
 158:lvgl/src/draw/lv_img_buf.c ****         /*Get the current pixel.
 159:lvgl/src/draw/lv_img_buf.c ****          *dsc->header.w + 1 means rounding up to 8 because the lines are byte aligned
 160:lvgl/src/draw/lv_img_buf.c ****          *so the possible real width are 2 ,4, 6 ...*/
 161:lvgl/src/draw/lv_img_buf.c ****         uint32_t px    = ((dsc->header.w + 1) >> 1) * y + x;
 666              		.loc 1 161 9 view .LVU210
 667              		.loc 1 161 39 is_stmt 0 view .LVU211
 668 00b2 DCF80030 		ldr	r3, [ip]
 669 00b6 C3F38A23 		ubfx	r3, r3, #10, #11
 670              		.loc 1 161 42 view .LVU212
 671 00ba 0133     		adds	r3, r3, #1
 672              		.loc 1 161 47 view .LVU213
 673 00bc 5B10     		asrs	r3, r3, #1
 674              		.loc 1 161 53 view .LVU214
 675 00be 04FB03F3 		mul	r3, r4, r3
 676              		.loc 1 161 57 view .LVU215
 677 00c2 03EB6E03 		add	r3, r3, lr, asr #1
 678              	.LVL85:
 162:lvgl/src/draw/lv_img_buf.c ****         uint8_t px_opa = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
 679              		.loc 1 162 9 is_stmt 1 view .LVU216
 680              		.loc 1 162 33 is_stmt 0 view .LVU217
 681 00c6 EB5C     		ldrb	r3, [r5, r3]	@ zero_extendqisi2
 682              	.LVL86:
 683              		.loc 1 162 51 view .LVU218
 684 00c8 C2F10402 		rsb	r2, r2, #4
 685              	.LVL87:
 686              		.loc 1 162 45 view .LVU219
 687 00cc 0F21     		movs	r1, #15
 688 00ce 9140     		lsls	r1, r1, r2
 689              		.loc 1 162 38 view .LVU220
 690 00d0 0B40     		ands	r3, r3, r1
ARM GAS  C:\usertemp\ccFesu0W.s 			page 33


 691              		.loc 1 162 60 view .LVU221
 692 00d2 1341     		asrs	r3, r3, r2
 693              	.LVL88:
 163:lvgl/src/draw/lv_img_buf.c ****         return opa_table[px_opa];
 694              		.loc 1 163 9 is_stmt 1 view .LVU222
 695              		.loc 1 163 25 is_stmt 0 view .LVU223
 696 00d4 56FA83F3 		uxtab	r3, r6, r3
 697              	.LVL89:
 698              		.loc 1 163 25 view .LVU224
 699 00d8 13F8100C 		ldrb	r0, [r3, #-16]	@ zero_extendqisi2
 700 00dc 07E0     		b	.L19
 701              	.LVL90:
 702              	.L20:
 703              		.loc 1 163 25 view .LVU225
 704              	.LBE54:
 705              	.LBB55:
 164:lvgl/src/draw/lv_img_buf.c ****     }
 165:lvgl/src/draw/lv_img_buf.c ****     else if(dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
 166:lvgl/src/draw/lv_img_buf.c ****         uint32_t px = dsc->header.w * y + x;
 706              		.loc 1 166 9 is_stmt 1 view .LVU226
 707              		.loc 1 166 34 is_stmt 0 view .LVU227
 708 00de 0368     		ldr	r3, [r0]
 709 00e0 C3F38A23 		ubfx	r3, r3, #10, #11
 710              		.loc 1 166 41 view .LVU228
 711 00e4 03FB0412 		mla	r2, r3, r4, r1
 712              	.LVL91:
 167:lvgl/src/draw/lv_img_buf.c ****         return buf_u8[px];
 713              		.loc 1 167 9 is_stmt 1 view .LVU229
 714              		.loc 1 167 22 is_stmt 0 view .LVU230
 715 00e8 A85C     		ldrb	r0, [r5, r2]	@ zero_extendqisi2
 716              	.LVL92:
 717              		.loc 1 167 22 view .LVU231
 718 00ea 00E0     		b	.L19
 719              	.LVL93:
 720              	.L27:
 721              		.loc 1 167 22 view .LVU232
 722              	.LBE55:
 122:lvgl/src/draw/lv_img_buf.c ****         uint32_t px = dsc->header.w * y * LV_IMG_PX_SIZE_ALPHA_BYTE + x * LV_IMG_PX_SIZE_ALPHA_BYTE
 723              		.loc 1 122 23 view .LVU233
 724 00ec FF20     		movs	r0, #255
 725              	.LVL94:
 726              	.L19:
 168:lvgl/src/draw/lv_img_buf.c ****     }
 169:lvgl/src/draw/lv_img_buf.c **** 
 170:lvgl/src/draw/lv_img_buf.c ****     return LV_OPA_COVER;
 171:lvgl/src/draw/lv_img_buf.c **** }
 727              		.loc 1 171 1 view .LVU234
 728 00ee 04B0     		add	sp, sp, #16
 729              	.LCFI6:
 730              		.cfi_def_cfa_offset 16
 731              		@ sp needed
 732 00f0 70BD     		pop	{r4, r5, r6, pc}
 733              	.LVL95:
 734              	.L31:
 735              		.loc 1 171 1 view .LVU235
 736 00f2 00BF     		.align	2
 737              	.L30:
ARM GAS  C:\usertemp\ccFesu0W.s 			page 34


 738 00f4 0055AAFF 		.word	-5614336
 739 00f8 00000000 		.word	.LANCHOR0
 740              		.cfi_endproc
 741              	.LFE56:
 743              		.section	.text.lv_img_buf_set_px_alpha,"ax",%progbits
 744              		.align	1
 745              		.global	lv_img_buf_set_px_alpha
 746              		.syntax unified
 747              		.thumb
 748              		.thumb_func
 750              	lv_img_buf_set_px_alpha:
 751              	.LVL96:
 752              	.LFB57:
 172:lvgl/src/draw/lv_img_buf.c **** 
 173:lvgl/src/draw/lv_img_buf.c **** /**
 174:lvgl/src/draw/lv_img_buf.c ****  * Set the alpha value of a pixel of an image. The color won't be affected
 175:lvgl/src/draw/lv_img_buf.c ****  * @param dsc pointer to an image descriptor
 176:lvgl/src/draw/lv_img_buf.c ****  * @param x x coordinate of the point to set
 177:lvgl/src/draw/lv_img_buf.c ****  * @param y x coordinate of the point to set
 178:lvgl/src/draw/lv_img_buf.c ****  * @param opa the desired opacity
 179:lvgl/src/draw/lv_img_buf.c ****  * @param safe true: check out of bounds
 180:lvgl/src/draw/lv_img_buf.c ****  */
 181:lvgl/src/draw/lv_img_buf.c **** void lv_img_buf_set_px_alpha(lv_img_dsc_t * dsc, lv_coord_t x, lv_coord_t y, lv_opa_t opa)
 182:lvgl/src/draw/lv_img_buf.c **** {
 753              		.loc 1 182 1 is_stmt 1 view -0
 754              		.cfi_startproc
 755              		@ args = 0, pretend = 0, frame = 0
 756              		@ frame_needed = 0, uses_anonymous_args = 0
 757              		.loc 1 182 1 is_stmt 0 view .LVU237
 758 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 759              	.LCFI7:
 760              		.cfi_def_cfa_offset 24
 761              		.cfi_offset 4, -24
 762              		.cfi_offset 5, -20
 763              		.cfi_offset 6, -16
 764              		.cfi_offset 7, -12
 765              		.cfi_offset 8, -8
 766              		.cfi_offset 14, -4
 767 0004 0446     		mov	r4, r0
 768 0006 0E46     		mov	r6, r1
 769 0008 1746     		mov	r7, r2
 770 000a 1D46     		mov	r5, r3
 183:lvgl/src/draw/lv_img_buf.c ****     uint8_t * buf_u8 = (uint8_t *)dsc->data;
 771              		.loc 1 183 5 is_stmt 1 view .LVU238
 772              		.loc 1 183 15 is_stmt 0 view .LVU239
 773 000c D0F80880 		ldr	r8, [r0, #8]
 774              	.LVL97:
 184:lvgl/src/draw/lv_img_buf.c **** 
 185:lvgl/src/draw/lv_img_buf.c ****     if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA) {
 775              		.loc 1 185 5 is_stmt 1 view .LVU240
 776              		.loc 1 185 23 is_stmt 0 view .LVU241
 777 0010 90F800C0 		ldrb	ip, [r0]	@ zero_extendqisi2
 778 0014 0CF01F0C 		and	ip, ip, #31
 779 0018 ACF1050C 		sub	ip, ip, #5
 780 001c BCF1090F 		cmp	ip, #9
 781 0020 1AD8     		bhi	.L32
 782 0022 DFE80CF0 		tbb	[pc, ip]
ARM GAS  C:\usertemp\ccFesu0W.s 			page 35


 783              	.LVL98:
 784              	.L35:
 785 0026 05       		.byte	(.L39-.L35)/2
 786 0027 19       		.byte	(.L32-.L35)/2
 787 0028 19       		.byte	(.L32-.L35)/2
 788 0029 19       		.byte	(.L32-.L35)/2
 789 002a 19       		.byte	(.L32-.L35)/2
 790 002b 19       		.byte	(.L32-.L35)/2
 791 002c 1B       		.byte	(.L38-.L35)/2
 792 002d 37       		.byte	(.L37-.L35)/2
 793 002e 54       		.byte	(.L36-.L35)/2
 794 002f 71       		.byte	(.L34-.L35)/2
 795              		.p2align 1
 796              	.L39:
 797              	.LBB56:
 186:lvgl/src/draw/lv_img_buf.c ****         uint8_t px_size          = lv_img_cf_get_px_size(dsc->header.cf) >> 3;
 798              		.loc 1 186 9 is_stmt 1 view .LVU242
 799              		.loc 1 186 69 is_stmt 0 view .LVU243
 800 0030 0078     		ldrb	r0, [r0]	@ zero_extendqisi2
 801              	.LVL99:
 802              		.loc 1 186 36 view .LVU244
 803 0032 00F01F00 		and	r0, r0, #31
 804 0036 FFF7FEFF 		bl	lv_img_cf_get_px_size
 805              	.LVL100:
 806              		.loc 1 186 17 discriminator 1 view .LVU245
 807 003a C0F3C700 		ubfx	r0, r0, #3, #8
 808              	.LVL101:
 187:lvgl/src/draw/lv_img_buf.c ****         uint32_t px              = dsc->header.w * y * px_size + x * px_size;
 809              		.loc 1 187 9 is_stmt 1 view .LVU246
 810              		.loc 1 187 47 is_stmt 0 view .LVU247
 811 003e 2368     		ldr	r3, [r4]
 812 0040 C3F38A23 		ubfx	r3, r3, #10, #11
 813              		.loc 1 187 50 view .LVU248
 814 0044 07FB03F3 		mul	r3, r7, r3
 815              		.loc 1 187 68 view .LVU249
 816 0048 00FB06F6 		mul	r6, r0, r6
 817              	.LVL102:
 818              		.loc 1 187 64 view .LVU250
 819 004c 00FB0366 		mla	r6, r0, r3, r6
 820              	.LVL103:
 188:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px + px_size - 1] = opa;
 821              		.loc 1 188 9 is_stmt 1 view .LVU251
 822              		.loc 1 188 19 is_stmt 0 view .LVU252
 823 0050 3044     		add	r0, r0, r6
 824              	.LVL104:
 825              		.loc 1 188 15 view .LVU253
 826 0052 0138     		subs	r0, r0, #1
 827              		.loc 1 188 34 view .LVU254
 828 0054 08F80050 		strb	r5, [r8, r0]
 829              	.LVL105:
 830              	.L32:
 831              		.loc 1 188 34 view .LVU255
 832              	.LBE56:
 189:lvgl/src/draw/lv_img_buf.c ****     }
 190:lvgl/src/draw/lv_img_buf.c ****     else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT) {
 191:lvgl/src/draw/lv_img_buf.c ****         opa         = opa >> 7; /*opa -> [0,1]*/
 192:lvgl/src/draw/lv_img_buf.c ****         uint8_t bit = x & 0x7;
ARM GAS  C:\usertemp\ccFesu0W.s 			page 36


 193:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 3;
 194:lvgl/src/draw/lv_img_buf.c **** 
 195:lvgl/src/draw/lv_img_buf.c ****         /*Get the current pixel.
 196:lvgl/src/draw/lv_img_buf.c ****          *dsc->header.w + 7 means rounding up to 8 because the lines are byte aligned
 197:lvgl/src/draw/lv_img_buf.c ****          *so the possible real width are 8 ,16, 24 ...*/
 198:lvgl/src/draw/lv_img_buf.c ****         uint32_t px = ((dsc->header.w + 7) >> 3) * y + x;
 199:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(1 << (7 - bit));
 200:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((opa & 0x1) << (7 - bit));
 201:lvgl/src/draw/lv_img_buf.c ****     }
 202:lvgl/src/draw/lv_img_buf.c ****     else if(dsc->header.cf == LV_IMG_CF_ALPHA_2BIT) {
 203:lvgl/src/draw/lv_img_buf.c ****         opa         = opa >> 6; /*opa -> [0,3]*/
 204:lvgl/src/draw/lv_img_buf.c ****         uint8_t bit = (x & 0x3) * 2;
 205:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 2;
 206:lvgl/src/draw/lv_img_buf.c **** 
 207:lvgl/src/draw/lv_img_buf.c ****         /*Get the current pixel.
 208:lvgl/src/draw/lv_img_buf.c ****          *dsc->header.w + 4 means rounding up to 8 because the lines are byte aligned
 209:lvgl/src/draw/lv_img_buf.c ****          *so the possible real width are 4 ,8, 12 ...*/
 210:lvgl/src/draw/lv_img_buf.c ****         uint32_t px = ((dsc->header.w + 3) >> 2) * y + x;
 211:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(3 << (6 - bit));
 212:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((opa & 0x3) << (6 - bit));
 213:lvgl/src/draw/lv_img_buf.c ****     }
 214:lvgl/src/draw/lv_img_buf.c ****     else if(dsc->header.cf == LV_IMG_CF_ALPHA_4BIT) {
 215:lvgl/src/draw/lv_img_buf.c ****         opa         = opa >> 4; /*opa -> [0,15]*/
 216:lvgl/src/draw/lv_img_buf.c ****         uint8_t bit = (x & 0x1) * 4;
 217:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 1;
 218:lvgl/src/draw/lv_img_buf.c **** 
 219:lvgl/src/draw/lv_img_buf.c ****         /*Get the current pixel.
 220:lvgl/src/draw/lv_img_buf.c ****          *dsc->header.w + 1 means rounding up to 8 because the lines are byte aligned
 221:lvgl/src/draw/lv_img_buf.c ****          *so the possible real width are 2 ,4, 6 ...*/
 222:lvgl/src/draw/lv_img_buf.c ****         uint32_t px = ((dsc->header.w + 1) >> 1) * y + x;
 223:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(0xF << (4 - bit));
 224:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((opa & 0xF) << (4 - bit));
 225:lvgl/src/draw/lv_img_buf.c ****     }
 226:lvgl/src/draw/lv_img_buf.c ****     else if(dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
 227:lvgl/src/draw/lv_img_buf.c ****         uint32_t px = dsc->header.w * y + x;
 228:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = opa;
 229:lvgl/src/draw/lv_img_buf.c ****     }
 230:lvgl/src/draw/lv_img_buf.c **** }
 833              		.loc 1 230 1 view .LVU256
 834 0058 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 835              	.LVL106:
 836              	.L38:
 837              	.LBB57:
 191:lvgl/src/draw/lv_img_buf.c ****         uint8_t bit = x & 0x7;
 838              		.loc 1 191 9 is_stmt 1 view .LVU257
 191:lvgl/src/draw/lv_img_buf.c ****         uint8_t bit = x & 0x7;
 839              		.loc 1 191 21 is_stmt 0 view .LVU258
 840 005c ED09     		lsrs	r5, r5, #7
 841              	.LVL107:
 192:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 3;
 842              		.loc 1 192 9 is_stmt 1 view .LVU259
 192:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 3;
 843              		.loc 1 192 17 is_stmt 0 view .LVU260
 844 005e 01F00700 		and	r0, r1, #7
 845              	.LVL108:
 193:lvgl/src/draw/lv_img_buf.c **** 
 846              		.loc 1 193 9 is_stmt 1 view .LVU261
ARM GAS  C:\usertemp\ccFesu0W.s 			page 37


 198:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(1 << (7 - bit));
 847              		.loc 1 198 9 view .LVU262
 198:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(1 << (7 - bit));
 848              		.loc 1 198 36 is_stmt 0 view .LVU263
 849 0062 2368     		ldr	r3, [r4]
 850 0064 C3F38A23 		ubfx	r3, r3, #10, #11
 198:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(1 << (7 - bit));
 851              		.loc 1 198 39 view .LVU264
 852 0068 0733     		adds	r3, r3, #7
 198:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(1 << (7 - bit));
 853              		.loc 1 198 44 view .LVU265
 854 006a DB10     		asrs	r3, r3, #3
 198:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(1 << (7 - bit));
 855              		.loc 1 198 50 view .LVU266
 856 006c 02FB03F3 		mul	r3, r2, r3
 198:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(1 << (7 - bit));
 857              		.loc 1 198 54 view .LVU267
 858 0070 03EBE103 		add	r3, r3, r1, asr #3
 859              	.LVL109:
 199:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((opa & 0x1) << (7 - bit));
 860              		.loc 1 199 9 is_stmt 1 view .LVU268
 199:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((opa & 0x1) << (7 - bit));
 861              		.loc 1 199 29 is_stmt 0 view .LVU269
 862 0074 18F80310 		ldrb	r1, [r8, r3]	@ zero_extendqisi2
 863              	.LVL110:
 199:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((opa & 0x1) << (7 - bit));
 864              		.loc 1 199 46 view .LVU270
 865 0078 C0F10700 		rsb	r0, r0, #7
 866              	.LVL111:
 199:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((opa & 0x1) << (7 - bit));
 867              		.loc 1 199 40 view .LVU271
 868 007c 0122     		movs	r2, #1
 869              	.LVL112:
 199:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((opa & 0x1) << (7 - bit));
 870              		.loc 1 199 40 view .LVU272
 871 007e 8240     		lsls	r2, r2, r0
 199:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((opa & 0x1) << (7 - bit));
 872              		.loc 1 199 34 view .LVU273
 873 0080 D243     		mvns	r2, r2
 874 0082 52B2     		sxtb	r2, r2
 875 0084 0A40     		ands	r2, r2, r1
 199:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((opa & 0x1) << (7 - bit));
 876              		.loc 1 199 21 view .LVU274
 877 0086 08F80320 		strb	r2, [r8, r3]
 200:lvgl/src/draw/lv_img_buf.c ****     }
 878              		.loc 1 200 9 is_stmt 1 view .LVU275
 200:lvgl/src/draw/lv_img_buf.c ****     }
 879              		.loc 1 200 49 is_stmt 0 view .LVU276
 880 008a 8540     		lsls	r5, r5, r0
 881              	.LVL113:
 200:lvgl/src/draw/lv_img_buf.c ****     }
 882              		.loc 1 200 34 view .LVU277
 883 008c 2A43     		orrs	r2, r2, r5
 200:lvgl/src/draw/lv_img_buf.c ****     }
 884              		.loc 1 200 21 view .LVU278
 885 008e 08F80320 		strb	r2, [r8, r3]
 886              	.LBE57:
ARM GAS  C:\usertemp\ccFesu0W.s 			page 38


 887 0092 E1E7     		b	.L32
 888              	.LVL114:
 889              	.L37:
 890              	.LBB58:
 203:lvgl/src/draw/lv_img_buf.c ****         uint8_t bit = (x & 0x3) * 2;
 891              		.loc 1 203 9 is_stmt 1 view .LVU279
 203:lvgl/src/draw/lv_img_buf.c ****         uint8_t bit = (x & 0x3) * 2;
 892              		.loc 1 203 21 is_stmt 0 view .LVU280
 893 0094 AD09     		lsrs	r5, r5, #6
 894              	.LVL115:
 204:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 2;
 895              		.loc 1 204 9 is_stmt 1 view .LVU281
 204:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 2;
 896              		.loc 1 204 17 is_stmt 0 view .LVU282
 897 0096 01F00300 		and	r0, r1, #3
 898              	.LVL116:
 204:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 2;
 899              		.loc 1 204 17 view .LVU283
 900 009a 4000     		lsls	r0, r0, #1
 901              	.LVL117:
 205:lvgl/src/draw/lv_img_buf.c **** 
 902              		.loc 1 205 9 is_stmt 1 view .LVU284
 210:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(3 << (6 - bit));
 903              		.loc 1 210 9 view .LVU285
 210:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(3 << (6 - bit));
 904              		.loc 1 210 36 is_stmt 0 view .LVU286
 905 009c 2368     		ldr	r3, [r4]
 906 009e C3F38A23 		ubfx	r3, r3, #10, #11
 210:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(3 << (6 - bit));
 907              		.loc 1 210 39 view .LVU287
 908 00a2 0333     		adds	r3, r3, #3
 210:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(3 << (6 - bit));
 909              		.loc 1 210 44 view .LVU288
 910 00a4 9B10     		asrs	r3, r3, #2
 210:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(3 << (6 - bit));
 911              		.loc 1 210 50 view .LVU289
 912 00a6 02FB03F3 		mul	r3, r2, r3
 210:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(3 << (6 - bit));
 913              		.loc 1 210 54 view .LVU290
 914 00aa 03EBA103 		add	r3, r3, r1, asr #2
 915              	.LVL118:
 211:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((opa & 0x3) << (6 - bit));
 916              		.loc 1 211 9 is_stmt 1 view .LVU291
 211:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((opa & 0x3) << (6 - bit));
 917              		.loc 1 211 29 is_stmt 0 view .LVU292
 918 00ae 18F80310 		ldrb	r1, [r8, r3]	@ zero_extendqisi2
 919              	.LVL119:
 211:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((opa & 0x3) << (6 - bit));
 920              		.loc 1 211 46 view .LVU293
 921 00b2 C0F10600 		rsb	r0, r0, #6
 922              	.LVL120:
 211:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((opa & 0x3) << (6 - bit));
 923              		.loc 1 211 40 view .LVU294
 924 00b6 0322     		movs	r2, #3
 925              	.LVL121:
 211:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((opa & 0x3) << (6 - bit));
 926              		.loc 1 211 40 view .LVU295
ARM GAS  C:\usertemp\ccFesu0W.s 			page 39


 927 00b8 8240     		lsls	r2, r2, r0
 211:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((opa & 0x3) << (6 - bit));
 928              		.loc 1 211 34 view .LVU296
 929 00ba D243     		mvns	r2, r2
 930 00bc 52B2     		sxtb	r2, r2
 931 00be 0A40     		ands	r2, r2, r1
 211:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((opa & 0x3) << (6 - bit));
 932              		.loc 1 211 21 view .LVU297
 933 00c0 08F80320 		strb	r2, [r8, r3]
 212:lvgl/src/draw/lv_img_buf.c ****     }
 934              		.loc 1 212 9 is_stmt 1 view .LVU298
 212:lvgl/src/draw/lv_img_buf.c ****     }
 935              		.loc 1 212 49 is_stmt 0 view .LVU299
 936 00c4 8540     		lsls	r5, r5, r0
 937              	.LVL122:
 212:lvgl/src/draw/lv_img_buf.c ****     }
 938              		.loc 1 212 34 view .LVU300
 939 00c6 2A43     		orrs	r2, r2, r5
 212:lvgl/src/draw/lv_img_buf.c ****     }
 940              		.loc 1 212 21 view .LVU301
 941 00c8 08F80320 		strb	r2, [r8, r3]
 942              	.LBE58:
 943 00cc C4E7     		b	.L32
 944              	.LVL123:
 945              	.L36:
 946              	.LBB59:
 215:lvgl/src/draw/lv_img_buf.c ****         uint8_t bit = (x & 0x1) * 4;
 947              		.loc 1 215 9 is_stmt 1 view .LVU302
 215:lvgl/src/draw/lv_img_buf.c ****         uint8_t bit = (x & 0x1) * 4;
 948              		.loc 1 215 21 is_stmt 0 view .LVU303
 949 00ce 2D09     		lsrs	r5, r5, #4
 950              	.LVL124:
 216:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 1;
 951              		.loc 1 216 9 is_stmt 1 view .LVU304
 216:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 1;
 952              		.loc 1 216 17 is_stmt 0 view .LVU305
 953 00d0 01F00100 		and	r0, r1, #1
 954              	.LVL125:
 216:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 1;
 955              		.loc 1 216 17 view .LVU306
 956 00d4 8000     		lsls	r0, r0, #2
 957              	.LVL126:
 217:lvgl/src/draw/lv_img_buf.c **** 
 958              		.loc 1 217 9 is_stmt 1 view .LVU307
 222:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(0xF << (4 - bit));
 959              		.loc 1 222 9 view .LVU308
 222:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(0xF << (4 - bit));
 960              		.loc 1 222 36 is_stmt 0 view .LVU309
 961 00d6 2368     		ldr	r3, [r4]
 962 00d8 C3F38A23 		ubfx	r3, r3, #10, #11
 222:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(0xF << (4 - bit));
 963              		.loc 1 222 39 view .LVU310
 964 00dc 0133     		adds	r3, r3, #1
 222:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(0xF << (4 - bit));
 965              		.loc 1 222 44 view .LVU311
 966 00de 5B10     		asrs	r3, r3, #1
 222:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(0xF << (4 - bit));
ARM GAS  C:\usertemp\ccFesu0W.s 			page 40


 967              		.loc 1 222 50 view .LVU312
 968 00e0 02FB03F3 		mul	r3, r2, r3
 222:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(0xF << (4 - bit));
 969              		.loc 1 222 54 view .LVU313
 970 00e4 03EB6103 		add	r3, r3, r1, asr #1
 971              	.LVL127:
 223:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((opa & 0xF) << (4 - bit));
 972              		.loc 1 223 9 is_stmt 1 view .LVU314
 223:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((opa & 0xF) << (4 - bit));
 973              		.loc 1 223 29 is_stmt 0 view .LVU315
 974 00e8 18F80310 		ldrb	r1, [r8, r3]	@ zero_extendqisi2
 975              	.LVL128:
 223:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((opa & 0xF) << (4 - bit));
 976              		.loc 1 223 48 view .LVU316
 977 00ec C0F10400 		rsb	r0, r0, #4
 978              	.LVL129:
 223:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((opa & 0xF) << (4 - bit));
 979              		.loc 1 223 42 view .LVU317
 980 00f0 0F22     		movs	r2, #15
 981              	.LVL130:
 223:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((opa & 0xF) << (4 - bit));
 982              		.loc 1 223 42 view .LVU318
 983 00f2 8240     		lsls	r2, r2, r0
 223:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((opa & 0xF) << (4 - bit));
 984              		.loc 1 223 34 view .LVU319
 985 00f4 D243     		mvns	r2, r2
 986 00f6 52B2     		sxtb	r2, r2
 987 00f8 0A40     		ands	r2, r2, r1
 223:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((opa & 0xF) << (4 - bit));
 988              		.loc 1 223 21 view .LVU320
 989 00fa 08F80320 		strb	r2, [r8, r3]
 224:lvgl/src/draw/lv_img_buf.c ****     }
 990              		.loc 1 224 9 is_stmt 1 view .LVU321
 224:lvgl/src/draw/lv_img_buf.c ****     }
 991              		.loc 1 224 49 is_stmt 0 view .LVU322
 992 00fe 8540     		lsls	r5, r5, r0
 993              	.LVL131:
 224:lvgl/src/draw/lv_img_buf.c ****     }
 994              		.loc 1 224 34 view .LVU323
 995 0100 2A43     		orrs	r2, r2, r5
 224:lvgl/src/draw/lv_img_buf.c ****     }
 996              		.loc 1 224 21 view .LVU324
 997 0102 08F80320 		strb	r2, [r8, r3]
 998              	.LBE59:
 999 0106 A7E7     		b	.L32
 1000              	.LVL132:
 1001              	.L34:
 1002              	.LBB60:
 227:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = opa;
 1003              		.loc 1 227 9 is_stmt 1 view .LVU325
 227:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = opa;
 1004              		.loc 1 227 34 is_stmt 0 view .LVU326
 1005 0108 0368     		ldr	r3, [r0]
 1006 010a C3F38A23 		ubfx	r3, r3, #10, #11
 227:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = opa;
 1007              		.loc 1 227 41 view .LVU327
 1008 010e 03FB0216 		mla	r6, r3, r2, r1
ARM GAS  C:\usertemp\ccFesu0W.s 			page 41


 1009              	.LVL133:
 228:lvgl/src/draw/lv_img_buf.c ****     }
 1010              		.loc 1 228 9 is_stmt 1 view .LVU328
 228:lvgl/src/draw/lv_img_buf.c ****     }
 1011              		.loc 1 228 21 is_stmt 0 view .LVU329
 1012 0112 08F80650 		strb	r5, [r8, r6]
 1013              	.LBE60:
 1014              		.loc 1 230 1 view .LVU330
 1015 0116 9FE7     		b	.L32
 1016              		.cfi_endproc
 1017              	.LFE57:
 1019              		.section	.text.lv_img_buf_set_px_color,"ax",%progbits
 1020              		.align	1
 1021              		.global	lv_img_buf_set_px_color
 1022              		.syntax unified
 1023              		.thumb
 1024              		.thumb_func
 1026              	lv_img_buf_set_px_color:
 1027              	.LVL134:
 1028              	.LFB58:
 231:lvgl/src/draw/lv_img_buf.c **** 
 232:lvgl/src/draw/lv_img_buf.c **** /**
 233:lvgl/src/draw/lv_img_buf.c ****  * Set the color of a pixel of an image. The alpha channel won't be affected.
 234:lvgl/src/draw/lv_img_buf.c ****  * @param dsc pointer to an image descriptor
 235:lvgl/src/draw/lv_img_buf.c ****  * @param x x coordinate of the point to set
 236:lvgl/src/draw/lv_img_buf.c ****  * @param y x coordinate of the point to set
 237:lvgl/src/draw/lv_img_buf.c ****  * @param c color of the point
 238:lvgl/src/draw/lv_img_buf.c ****  * @param safe true: check out of bounds
 239:lvgl/src/draw/lv_img_buf.c ****  */
 240:lvgl/src/draw/lv_img_buf.c **** void lv_img_buf_set_px_color(lv_img_dsc_t * dsc, lv_coord_t x, lv_coord_t y, lv_color_t c)
 241:lvgl/src/draw/lv_img_buf.c **** {
 1029              		.loc 1 241 1 is_stmt 1 view -0
 1030              		.cfi_startproc
 1031              		@ args = 0, pretend = 0, frame = 8
 1032              		@ frame_needed = 0, uses_anonymous_args = 0
 1033              		.loc 1 241 1 is_stmt 0 view .LVU332
 1034 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1035              	.LCFI8:
 1036              		.cfi_def_cfa_offset 20
 1037              		.cfi_offset 4, -20
 1038              		.cfi_offset 5, -16
 1039              		.cfi_offset 6, -12
 1040              		.cfi_offset 7, -8
 1041              		.cfi_offset 14, -4
 1042 0002 83B0     		sub	sp, sp, #12
 1043              	.LCFI9:
 1044              		.cfi_def_cfa_offset 32
 1045 0004 0546     		mov	r5, r0
 1046 0006 0C46     		mov	r4, r1
 1047 0008 1646     		mov	r6, r2
 1048 000a ADF80430 		strh	r3, [sp, #4]	@ movhi
 242:lvgl/src/draw/lv_img_buf.c ****     uint8_t * buf_u8 = (uint8_t *)dsc->data;
 1049              		.loc 1 242 5 is_stmt 1 view .LVU333
 1050              		.loc 1 242 15 is_stmt 0 view .LVU334
 1051 000e 8768     		ldr	r7, [r0, #8]
 1052              	.LVL135:
 243:lvgl/src/draw/lv_img_buf.c **** 
ARM GAS  C:\usertemp\ccFesu0W.s 			page 42


 244:lvgl/src/draw/lv_img_buf.c ****     if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYE
 1053              		.loc 1 244 5 is_stmt 1 view .LVU335
 1054              		.loc 1 244 23 is_stmt 0 view .LVU336
 1055 0010 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 1056              		.loc 1 244 47 view .LVU337
 1057 0012 03F01F03 		and	r3, r3, #31
 1058 0016 043B     		subs	r3, r3, #4
 1059 0018 062B     		cmp	r3, #6
 1060 001a 1FD8     		bhi	.L42
 1061 001c DFE803F0 		tbb	[pc, r3]
 1062              	.LVL136:
 1063              	.L45:
 1064 0020 04       		.byte	(.L49-.L45)/2
 1065 0021 20       		.byte	(.L50-.L45)/2
 1066 0022 04       		.byte	(.L49-.L45)/2
 1067 0023 3C       		.byte	(.L48-.L45)/2
 1068 0024 59       		.byte	(.L47-.L45)/2
 1069 0025 77       		.byte	(.L46-.L45)/2
 1070 0026 95       		.byte	(.L44-.L45)/2
 1071 0027 00       		.p2align 1
 1072              	.L49:
 1073              	.LBB61:
 245:lvgl/src/draw/lv_img_buf.c ****         uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf) >> 3;
 1074              		.loc 1 245 9 is_stmt 1 view .LVU338
 1075              		.loc 1 245 60 is_stmt 0 view .LVU339
 1076 0028 0078     		ldrb	r0, [r0]	@ zero_extendqisi2
 1077              	.LVL137:
 1078              		.loc 1 245 27 view .LVU340
 1079 002a 00F01F00 		and	r0, r0, #31
 1080 002e FFF7FEFF 		bl	lv_img_cf_get_px_size
 1081              	.LVL138:
 1082              		.loc 1 245 17 discriminator 1 view .LVU341
 1083 0032 C0F3C700 		ubfx	r0, r0, #3, #8
 1084              	.LVL139:
 246:lvgl/src/draw/lv_img_buf.c ****         uint32_t px     = dsc->header.w * y * px_size + x * px_size;
 1085              		.loc 1 246 9 is_stmt 1 view .LVU342
 1086              		.loc 1 246 38 is_stmt 0 view .LVU343
 1087 0036 2B68     		ldr	r3, [r5]
 1088 0038 C3F38A23 		ubfx	r3, r3, #10, #11
 1089              		.loc 1 246 41 view .LVU344
 1090 003c 06FB03F3 		mul	r3, r6, r3
 1091              		.loc 1 246 59 view .LVU345
 1092 0040 00FB04F4 		mul	r4, r0, r4
 1093              	.LVL140:
 1094              		.loc 1 246 55 view .LVU346
 1095 0044 00FB0344 		mla	r4, r0, r3, r4
 1096              	.LVL141:
 247:lvgl/src/draw/lv_img_buf.c ****         lv_memcpy_small(&buf_u8[px], &c, px_size);
 1097              		.loc 1 247 9 is_stmt 1 view .LVU347
 1098              		.loc 1 247 25 is_stmt 0 view .LVU348
 1099 0048 3C44     		add	r4, r4, r7
 1100              	.LVL142:
 1101              	.LBB62:
 1102              	.LBI62:
 194:lvgl/src/draw/../misc/lv_mem.h **** {
 1103              		.loc 3 194 44 is_stmt 1 view .LVU349
 1104              	.LBB63:
ARM GAS  C:\usertemp\ccFesu0W.s 			page 43


 196:lvgl/src/draw/../misc/lv_mem.h ****     const uint8_t * s8 = (const uint8_t *)src;
 1105              		.loc 3 196 5 view .LVU350
 197:lvgl/src/draw/../misc/lv_mem.h **** 
 1106              		.loc 3 197 5 view .LVU351
 199:lvgl/src/draw/../misc/lv_mem.h ****         *d8 = *s8;
 1107              		.loc 3 199 5 view .LVU352
 197:lvgl/src/draw/../misc/lv_mem.h **** 
 1108              		.loc 3 197 21 is_stmt 0 view .LVU353
 1109 004a 01AB     		add	r3, sp, #4
 1110              	.LVL143:
 199:lvgl/src/draw/../misc/lv_mem.h ****         *d8 = *s8;
 1111              		.loc 3 199 10 view .LVU354
 1112 004c 04E0     		b	.L51
 1113              	.LVL144:
 1114              	.L52:
 200:lvgl/src/draw/../misc/lv_mem.h ****         d8++;
 1115              		.loc 3 200 9 is_stmt 1 view .LVU355
 200:lvgl/src/draw/../misc/lv_mem.h ****         d8++;
 1116              		.loc 3 200 15 is_stmt 0 view .LVU356
 1117 004e 13F8012B 		ldrb	r2, [r3], #1	@ zero_extendqisi2
 1118              	.LVL145:
 200:lvgl/src/draw/../misc/lv_mem.h ****         d8++;
 1119              		.loc 3 200 13 view .LVU357
 1120 0052 04F8012B 		strb	r2, [r4], #1
 1121              	.LVL146:
 201:lvgl/src/draw/../misc/lv_mem.h ****         s8++;
 1122              		.loc 3 201 9 is_stmt 1 view .LVU358
 202:lvgl/src/draw/../misc/lv_mem.h ****         len--;
 1123              		.loc 3 202 9 view .LVU359
 1124              		.loc 3 203 9 view .LVU360
 1125              		.loc 3 203 12 is_stmt 0 view .LVU361
 1126 0056 0138     		subs	r0, r0, #1
 1127              	.LVL147:
 1128              	.L51:
 199:lvgl/src/draw/../misc/lv_mem.h ****         *d8 = *s8;
 1129              		.loc 3 199 11 is_stmt 1 view .LVU362
 1130 0058 0028     		cmp	r0, #0
 1131 005a F8D1     		bne	.L52
 1132              	.LVL148:
 1133              	.L42:
 199:lvgl/src/draw/../misc/lv_mem.h ****         *d8 = *s8;
 1134              		.loc 3 199 11 is_stmt 0 view .LVU363
 1135              	.LBE63:
 1136              	.LBE62:
 1137              	.LBE61:
 248:lvgl/src/draw/lv_img_buf.c ****     }
 249:lvgl/src/draw/lv_img_buf.c ****     else if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA) {
 250:lvgl/src/draw/lv_img_buf.c ****         uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf) >> 3;
 251:lvgl/src/draw/lv_img_buf.c ****         uint32_t px     = dsc->header.w * y * px_size + x * px_size;
 252:lvgl/src/draw/lv_img_buf.c ****         lv_memcpy_small(&buf_u8[px], &c, px_size - 1); /*-1 to not overwrite the alpha value*/
 253:lvgl/src/draw/lv_img_buf.c ****     }
 254:lvgl/src/draw/lv_img_buf.c ****     else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT) {
 255:lvgl/src/draw/lv_img_buf.c ****         buf_u8 += sizeof(lv_color32_t) * 2; /*Skip the palette*/
 256:lvgl/src/draw/lv_img_buf.c **** 
 257:lvgl/src/draw/lv_img_buf.c ****         uint8_t bit = x & 0x7;
 258:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 3;
 259:lvgl/src/draw/lv_img_buf.c **** 
ARM GAS  C:\usertemp\ccFesu0W.s 			page 44


 260:lvgl/src/draw/lv_img_buf.c ****         /*Get the current pixel.
 261:lvgl/src/draw/lv_img_buf.c ****          *dsc->header.w + 7 means rounding up to 8 because the lines are byte aligned
 262:lvgl/src/draw/lv_img_buf.c ****          *so the possible real width are 8 ,16, 24 ...*/
 263:lvgl/src/draw/lv_img_buf.c ****         uint32_t px = ((dsc->header.w + 7) >> 3) * y + x;
 264:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(1 << (7 - bit));
 265:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((c.full & 0x1) << (7 - bit));
 266:lvgl/src/draw/lv_img_buf.c ****     }
 267:lvgl/src/draw/lv_img_buf.c ****     else if(dsc->header.cf == LV_IMG_CF_INDEXED_2BIT) {
 268:lvgl/src/draw/lv_img_buf.c ****         buf_u8 += sizeof(lv_color32_t) * 4; /*Skip the palette*/
 269:lvgl/src/draw/lv_img_buf.c ****         uint8_t bit = (x & 0x3) * 2;
 270:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 2;
 271:lvgl/src/draw/lv_img_buf.c **** 
 272:lvgl/src/draw/lv_img_buf.c ****         /*Get the current pixel.
 273:lvgl/src/draw/lv_img_buf.c ****          *dsc->header.w + 3 means rounding up to 4 because the lines are byte aligned
 274:lvgl/src/draw/lv_img_buf.c ****          *so the possible real width are 4, 8 ,12 ...*/
 275:lvgl/src/draw/lv_img_buf.c ****         uint32_t px = ((dsc->header.w + 3) >> 2) * y + x;
 276:lvgl/src/draw/lv_img_buf.c **** 
 277:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px] = buf_u8[px] & ~(3 << (6 - bit));
 278:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px] = buf_u8[px] | ((c.full & 0x3) << (6 - bit));
 279:lvgl/src/draw/lv_img_buf.c ****     }
 280:lvgl/src/draw/lv_img_buf.c ****     else if(dsc->header.cf == LV_IMG_CF_INDEXED_4BIT) {
 281:lvgl/src/draw/lv_img_buf.c ****         buf_u8 += sizeof(lv_color32_t) * 16; /*Skip the palette*/
 282:lvgl/src/draw/lv_img_buf.c ****         uint8_t bit = (x & 0x1) * 4;
 283:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 1;
 284:lvgl/src/draw/lv_img_buf.c **** 
 285:lvgl/src/draw/lv_img_buf.c ****         /*Get the current pixel.
 286:lvgl/src/draw/lv_img_buf.c ****          *dsc->header.w + 1 means rounding up to 2 because the lines are byte aligned
 287:lvgl/src/draw/lv_img_buf.c ****          *so the possible real width are 2 ,4, 6 ...*/
 288:lvgl/src/draw/lv_img_buf.c ****         uint32_t px = ((dsc->header.w + 1) >> 1) * y + x;
 289:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(0xF << (4 - bit));
 290:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((c.full & 0xF) << (4 - bit));
 291:lvgl/src/draw/lv_img_buf.c ****     }
 292:lvgl/src/draw/lv_img_buf.c ****     else if(dsc->header.cf == LV_IMG_CF_INDEXED_8BIT) {
 293:lvgl/src/draw/lv_img_buf.c ****         buf_u8 += sizeof(lv_color32_t) * 256; /*Skip the palette*/
 294:lvgl/src/draw/lv_img_buf.c ****         uint32_t px = dsc->header.w * y + x;
 295:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = c.full;
 296:lvgl/src/draw/lv_img_buf.c ****     }
 297:lvgl/src/draw/lv_img_buf.c **** }
 1138              		.loc 1 297 1 view .LVU364
 1139 005c 03B0     		add	sp, sp, #12
 1140              	.LCFI10:
 1141              		.cfi_remember_state
 1142              		.cfi_def_cfa_offset 20
 1143              		@ sp needed
 1144 005e F0BD     		pop	{r4, r5, r6, r7, pc}
 1145              	.LVL149:
 1146              	.L50:
 1147              	.LCFI11:
 1148              		.cfi_restore_state
 1149              	.LBB64:
 250:lvgl/src/draw/lv_img_buf.c ****         uint32_t px     = dsc->header.w * y * px_size + x * px_size;
 1150              		.loc 1 250 9 is_stmt 1 view .LVU365
 250:lvgl/src/draw/lv_img_buf.c ****         uint32_t px     = dsc->header.w * y * px_size + x * px_size;
 1151              		.loc 1 250 60 is_stmt 0 view .LVU366
 1152 0060 0078     		ldrb	r0, [r0]	@ zero_extendqisi2
 1153              	.LVL150:
 250:lvgl/src/draw/lv_img_buf.c ****         uint32_t px     = dsc->header.w * y * px_size + x * px_size;
ARM GAS  C:\usertemp\ccFesu0W.s 			page 45


 1154              		.loc 1 250 27 view .LVU367
 1155 0062 00F01F00 		and	r0, r0, #31
 1156 0066 FFF7FEFF 		bl	lv_img_cf_get_px_size
 1157              	.LVL151:
 250:lvgl/src/draw/lv_img_buf.c ****         uint32_t px     = dsc->header.w * y * px_size + x * px_size;
 1158              		.loc 1 250 17 discriminator 1 view .LVU368
 1159 006a C0F3C700 		ubfx	r0, r0, #3, #8
 1160              	.LVL152:
 251:lvgl/src/draw/lv_img_buf.c ****         lv_memcpy_small(&buf_u8[px], &c, px_size - 1); /*-1 to not overwrite the alpha value*/
 1161              		.loc 1 251 9 is_stmt 1 view .LVU369
 251:lvgl/src/draw/lv_img_buf.c ****         lv_memcpy_small(&buf_u8[px], &c, px_size - 1); /*-1 to not overwrite the alpha value*/
 1162              		.loc 1 251 38 is_stmt 0 view .LVU370
 1163 006e 2B68     		ldr	r3, [r5]
 1164 0070 C3F38A23 		ubfx	r3, r3, #10, #11
 251:lvgl/src/draw/lv_img_buf.c ****         lv_memcpy_small(&buf_u8[px], &c, px_size - 1); /*-1 to not overwrite the alpha value*/
 1165              		.loc 1 251 41 view .LVU371
 1166 0074 06FB03F3 		mul	r3, r6, r3
 251:lvgl/src/draw/lv_img_buf.c ****         lv_memcpy_small(&buf_u8[px], &c, px_size - 1); /*-1 to not overwrite the alpha value*/
 1167              		.loc 1 251 59 view .LVU372
 1168 0078 00FB04F4 		mul	r4, r0, r4
 1169              	.LVL153:
 251:lvgl/src/draw/lv_img_buf.c ****         lv_memcpy_small(&buf_u8[px], &c, px_size - 1); /*-1 to not overwrite the alpha value*/
 1170              		.loc 1 251 55 view .LVU373
 1171 007c 00FB0344 		mla	r4, r0, r3, r4
 1172              	.LVL154:
 252:lvgl/src/draw/lv_img_buf.c ****     }
 1173              		.loc 1 252 9 is_stmt 1 view .LVU374
 252:lvgl/src/draw/lv_img_buf.c ****     }
 1174              		.loc 1 252 25 is_stmt 0 view .LVU375
 1175 0080 3C44     		add	r4, r4, r7
 1176              	.LVL155:
 252:lvgl/src/draw/lv_img_buf.c ****     }
 1177              		.loc 1 252 50 view .LVU376
 1178 0082 0138     		subs	r0, r0, #1
 1179              	.LVL156:
 1180              	.LBB65:
 1181              	.LBI65:
 194:lvgl/src/draw/../misc/lv_mem.h **** {
 1182              		.loc 3 194 44 is_stmt 1 view .LVU377
 1183              	.LBB66:
 196:lvgl/src/draw/../misc/lv_mem.h ****     const uint8_t * s8 = (const uint8_t *)src;
 1184              		.loc 3 196 5 view .LVU378
 197:lvgl/src/draw/../misc/lv_mem.h **** 
 1185              		.loc 3 197 5 view .LVU379
 199:lvgl/src/draw/../misc/lv_mem.h ****         *d8 = *s8;
 1186              		.loc 3 199 5 view .LVU380
 197:lvgl/src/draw/../misc/lv_mem.h **** 
 1187              		.loc 3 197 21 is_stmt 0 view .LVU381
 1188 0084 01AB     		add	r3, sp, #4
 1189              	.LVL157:
 199:lvgl/src/draw/../misc/lv_mem.h ****         *d8 = *s8;
 1190              		.loc 3 199 10 view .LVU382
 1191 0086 04E0     		b	.L53
 1192              	.LVL158:
 1193              	.L54:
 200:lvgl/src/draw/../misc/lv_mem.h ****         d8++;
 1194              		.loc 3 200 9 is_stmt 1 view .LVU383
ARM GAS  C:\usertemp\ccFesu0W.s 			page 46


 200:lvgl/src/draw/../misc/lv_mem.h ****         d8++;
 1195              		.loc 3 200 15 is_stmt 0 view .LVU384
 1196 0088 13F8012B 		ldrb	r2, [r3], #1	@ zero_extendqisi2
 1197              	.LVL159:
 200:lvgl/src/draw/../misc/lv_mem.h ****         d8++;
 1198              		.loc 3 200 13 view .LVU385
 1199 008c 04F8012B 		strb	r2, [r4], #1
 1200              	.LVL160:
 201:lvgl/src/draw/../misc/lv_mem.h ****         s8++;
 1201              		.loc 3 201 9 is_stmt 1 view .LVU386
 202:lvgl/src/draw/../misc/lv_mem.h ****         len--;
 1202              		.loc 3 202 9 view .LVU387
 1203              		.loc 3 203 9 view .LVU388
 1204              		.loc 3 203 12 is_stmt 0 view .LVU389
 1205 0090 0138     		subs	r0, r0, #1
 1206              	.LVL161:
 1207              	.L53:
 199:lvgl/src/draw/../misc/lv_mem.h ****         *d8 = *s8;
 1208              		.loc 3 199 11 is_stmt 1 view .LVU390
 1209 0092 0028     		cmp	r0, #0
 1210 0094 F8D1     		bne	.L54
 199:lvgl/src/draw/../misc/lv_mem.h ****         *d8 = *s8;
 1211              		.loc 3 199 11 is_stmt 0 view .LVU391
 1212 0096 E1E7     		b	.L42
 1213              	.LVL162:
 1214              	.L48:
 199:lvgl/src/draw/../misc/lv_mem.h ****         *d8 = *s8;
 1215              		.loc 3 199 11 view .LVU392
 1216              	.LBE66:
 1217              	.LBE65:
 1218              	.LBE64:
 1219              	.LBB67:
 255:lvgl/src/draw/lv_img_buf.c **** 
 1220              		.loc 1 255 9 is_stmt 1 view .LVU393
 255:lvgl/src/draw/lv_img_buf.c **** 
 1221              		.loc 1 255 16 is_stmt 0 view .LVU394
 1222 0098 0837     		adds	r7, r7, #8
 1223              	.LVL163:
 257:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 3;
 1224              		.loc 1 257 9 is_stmt 1 view .LVU395
 257:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 3;
 1225              		.loc 1 257 17 is_stmt 0 view .LVU396
 1226 009a 01F00700 		and	r0, r1, #7
 1227              	.LVL164:
 258:lvgl/src/draw/lv_img_buf.c **** 
 1228              		.loc 1 258 9 is_stmt 1 view .LVU397
 263:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(1 << (7 - bit));
 1229              		.loc 1 263 9 view .LVU398
 263:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(1 << (7 - bit));
 1230              		.loc 1 263 36 is_stmt 0 view .LVU399
 1231 009e 2B68     		ldr	r3, [r5]
 1232 00a0 C3F38A23 		ubfx	r3, r3, #10, #11
 263:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(1 << (7 - bit));
 1233              		.loc 1 263 39 view .LVU400
 1234 00a4 0733     		adds	r3, r3, #7
 263:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(1 << (7 - bit));
 1235              		.loc 1 263 44 view .LVU401
ARM GAS  C:\usertemp\ccFesu0W.s 			page 47


 1236 00a6 DB10     		asrs	r3, r3, #3
 263:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(1 << (7 - bit));
 1237              		.loc 1 263 50 view .LVU402
 1238 00a8 06FB03F3 		mul	r3, r6, r3
 263:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(1 << (7 - bit));
 1239              		.loc 1 263 54 view .LVU403
 1240 00ac 03EBE103 		add	r3, r3, r1, asr #3
 1241              	.LVL165:
 264:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((c.full & 0x1) << (7 - bit));
 1242              		.loc 1 264 9 is_stmt 1 view .LVU404
 264:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((c.full & 0x1) << (7 - bit));
 1243              		.loc 1 264 29 is_stmt 0 view .LVU405
 1244 00b0 F95C     		ldrb	r1, [r7, r3]	@ zero_extendqisi2
 1245              	.LVL166:
 264:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((c.full & 0x1) << (7 - bit));
 1246              		.loc 1 264 46 view .LVU406
 1247 00b2 C0F10700 		rsb	r0, r0, #7
 1248              	.LVL167:
 264:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((c.full & 0x1) << (7 - bit));
 1249              		.loc 1 264 40 view .LVU407
 1250 00b6 0122     		movs	r2, #1
 1251 00b8 8240     		lsls	r2, r2, r0
 264:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((c.full & 0x1) << (7 - bit));
 1252              		.loc 1 264 34 view .LVU408
 1253 00ba D243     		mvns	r2, r2
 1254 00bc 52B2     		sxtb	r2, r2
 1255 00be 0A40     		ands	r2, r2, r1
 264:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((c.full & 0x1) << (7 - bit));
 1256              		.loc 1 264 21 view .LVU409
 1257 00c0 FA54     		strb	r2, [r7, r3]
 265:lvgl/src/draw/lv_img_buf.c ****     }
 1258              		.loc 1 265 9 is_stmt 1 view .LVU410
 265:lvgl/src/draw/lv_img_buf.c ****     }
 1259              		.loc 1 265 39 is_stmt 0 view .LVU411
 1260 00c2 BDF80410 		ldrh	r1, [sp, #4]
 265:lvgl/src/draw/lv_img_buf.c ****     }
 1261              		.loc 1 265 45 view .LVU412
 1262 00c6 01F00101 		and	r1, r1, #1
 265:lvgl/src/draw/lv_img_buf.c ****     }
 1263              		.loc 1 265 52 view .LVU413
 1264 00ca 8140     		lsls	r1, r1, r0
 265:lvgl/src/draw/lv_img_buf.c ****     }
 1265              		.loc 1 265 34 view .LVU414
 1266 00cc 0A43     		orrs	r2, r2, r1
 265:lvgl/src/draw/lv_img_buf.c ****     }
 1267              		.loc 1 265 21 view .LVU415
 1268 00ce FA54     		strb	r2, [r7, r3]
 1269              	.LBE67:
 1270 00d0 C4E7     		b	.L42
 1271              	.LVL168:
 1272              	.L47:
 1273              	.LBB68:
 268:lvgl/src/draw/lv_img_buf.c ****         uint8_t bit = (x & 0x3) * 2;
 1274              		.loc 1 268 9 is_stmt 1 view .LVU416
 268:lvgl/src/draw/lv_img_buf.c ****         uint8_t bit = (x & 0x3) * 2;
 1275              		.loc 1 268 16 is_stmt 0 view .LVU417
 1276 00d2 1037     		adds	r7, r7, #16
ARM GAS  C:\usertemp\ccFesu0W.s 			page 48


 1277              	.LVL169:
 269:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 2;
 1278              		.loc 1 269 9 is_stmt 1 view .LVU418
 269:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 2;
 1279              		.loc 1 269 17 is_stmt 0 view .LVU419
 1280 00d4 01F00300 		and	r0, r1, #3
 1281              	.LVL170:
 269:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 2;
 1282              		.loc 1 269 17 view .LVU420
 1283 00d8 4000     		lsls	r0, r0, #1
 1284              	.LVL171:
 270:lvgl/src/draw/lv_img_buf.c **** 
 1285              		.loc 1 270 9 is_stmt 1 view .LVU421
 275:lvgl/src/draw/lv_img_buf.c **** 
 1286              		.loc 1 275 9 view .LVU422
 275:lvgl/src/draw/lv_img_buf.c **** 
 1287              		.loc 1 275 36 is_stmt 0 view .LVU423
 1288 00da 2B68     		ldr	r3, [r5]
 1289 00dc C3F38A23 		ubfx	r3, r3, #10, #11
 275:lvgl/src/draw/lv_img_buf.c **** 
 1290              		.loc 1 275 39 view .LVU424
 1291 00e0 0333     		adds	r3, r3, #3
 275:lvgl/src/draw/lv_img_buf.c **** 
 1292              		.loc 1 275 44 view .LVU425
 1293 00e2 9B10     		asrs	r3, r3, #2
 275:lvgl/src/draw/lv_img_buf.c **** 
 1294              		.loc 1 275 50 view .LVU426
 1295 00e4 06FB03F3 		mul	r3, r6, r3
 275:lvgl/src/draw/lv_img_buf.c **** 
 1296              		.loc 1 275 54 view .LVU427
 1297 00e8 03EBA103 		add	r3, r3, r1, asr #2
 1298              	.LVL172:
 277:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px] = buf_u8[px] | ((c.full & 0x3) << (6 - bit));
 1299              		.loc 1 277 9 is_stmt 1 view .LVU428
 277:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px] = buf_u8[px] | ((c.full & 0x3) << (6 - bit));
 1300              		.loc 1 277 28 is_stmt 0 view .LVU429
 1301 00ec F95C     		ldrb	r1, [r7, r3]	@ zero_extendqisi2
 1302              	.LVL173:
 277:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px] = buf_u8[px] | ((c.full & 0x3) << (6 - bit));
 1303              		.loc 1 277 45 view .LVU430
 1304 00ee C0F10600 		rsb	r0, r0, #6
 1305              	.LVL174:
 277:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px] = buf_u8[px] | ((c.full & 0x3) << (6 - bit));
 1306              		.loc 1 277 39 view .LVU431
 1307 00f2 0322     		movs	r2, #3
 1308 00f4 8240     		lsls	r2, r2, r0
 277:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px] = buf_u8[px] | ((c.full & 0x3) << (6 - bit));
 1309              		.loc 1 277 33 view .LVU432
 1310 00f6 D243     		mvns	r2, r2
 1311 00f8 52B2     		sxtb	r2, r2
 1312 00fa 0A40     		ands	r2, r2, r1
 277:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px] = buf_u8[px] | ((c.full & 0x3) << (6 - bit));
 1313              		.loc 1 277 20 view .LVU433
 1314 00fc FA54     		strb	r2, [r7, r3]
 278:lvgl/src/draw/lv_img_buf.c ****     }
 1315              		.loc 1 278 9 is_stmt 1 view .LVU434
 278:lvgl/src/draw/lv_img_buf.c ****     }
ARM GAS  C:\usertemp\ccFesu0W.s 			page 49


 1316              		.loc 1 278 38 is_stmt 0 view .LVU435
 1317 00fe BDF80410 		ldrh	r1, [sp, #4]
 278:lvgl/src/draw/lv_img_buf.c ****     }
 1318              		.loc 1 278 44 view .LVU436
 1319 0102 01F00301 		and	r1, r1, #3
 278:lvgl/src/draw/lv_img_buf.c ****     }
 1320              		.loc 1 278 51 view .LVU437
 1321 0106 8140     		lsls	r1, r1, r0
 278:lvgl/src/draw/lv_img_buf.c ****     }
 1322              		.loc 1 278 33 view .LVU438
 1323 0108 0A43     		orrs	r2, r2, r1
 278:lvgl/src/draw/lv_img_buf.c ****     }
 1324              		.loc 1 278 20 view .LVU439
 1325 010a FA54     		strb	r2, [r7, r3]
 1326              	.LBE68:
 1327 010c A6E7     		b	.L42
 1328              	.LVL175:
 1329              	.L46:
 1330              	.LBB69:
 281:lvgl/src/draw/lv_img_buf.c ****         uint8_t bit = (x & 0x1) * 4;
 1331              		.loc 1 281 9 is_stmt 1 view .LVU440
 281:lvgl/src/draw/lv_img_buf.c ****         uint8_t bit = (x & 0x1) * 4;
 1332              		.loc 1 281 16 is_stmt 0 view .LVU441
 1333 010e 4037     		adds	r7, r7, #64
 1334              	.LVL176:
 282:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 1;
 1335              		.loc 1 282 9 is_stmt 1 view .LVU442
 282:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 1;
 1336              		.loc 1 282 17 is_stmt 0 view .LVU443
 1337 0110 01F00100 		and	r0, r1, #1
 1338              	.LVL177:
 282:lvgl/src/draw/lv_img_buf.c ****         x           = x >> 1;
 1339              		.loc 1 282 17 view .LVU444
 1340 0114 8000     		lsls	r0, r0, #2
 1341              	.LVL178:
 283:lvgl/src/draw/lv_img_buf.c **** 
 1342              		.loc 1 283 9 is_stmt 1 view .LVU445
 288:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(0xF << (4 - bit));
 1343              		.loc 1 288 9 view .LVU446
 288:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(0xF << (4 - bit));
 1344              		.loc 1 288 36 is_stmt 0 view .LVU447
 1345 0116 2B68     		ldr	r3, [r5]
 1346 0118 C3F38A23 		ubfx	r3, r3, #10, #11
 288:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(0xF << (4 - bit));
 1347              		.loc 1 288 39 view .LVU448
 1348 011c 0133     		adds	r3, r3, #1
 288:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(0xF << (4 - bit));
 1349              		.loc 1 288 44 view .LVU449
 1350 011e 5B10     		asrs	r3, r3, #1
 288:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(0xF << (4 - bit));
 1351              		.loc 1 288 50 view .LVU450
 1352 0120 06FB03F3 		mul	r3, r6, r3
 288:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] & ~(0xF << (4 - bit));
 1353              		.loc 1 288 54 view .LVU451
 1354 0124 03EB6103 		add	r3, r3, r1, asr #1
 1355              	.LVL179:
 289:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((c.full & 0xF) << (4 - bit));
ARM GAS  C:\usertemp\ccFesu0W.s 			page 50


 1356              		.loc 1 289 9 is_stmt 1 view .LVU452
 289:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((c.full & 0xF) << (4 - bit));
 1357              		.loc 1 289 29 is_stmt 0 view .LVU453
 1358 0128 F95C     		ldrb	r1, [r7, r3]	@ zero_extendqisi2
 1359              	.LVL180:
 289:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((c.full & 0xF) << (4 - bit));
 1360              		.loc 1 289 48 view .LVU454
 1361 012a C0F10400 		rsb	r0, r0, #4
 1362              	.LVL181:
 289:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((c.full & 0xF) << (4 - bit));
 1363              		.loc 1 289 42 view .LVU455
 1364 012e 0F22     		movs	r2, #15
 1365 0130 8240     		lsls	r2, r2, r0
 289:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((c.full & 0xF) << (4 - bit));
 1366              		.loc 1 289 34 view .LVU456
 1367 0132 D243     		mvns	r2, r2
 1368 0134 52B2     		sxtb	r2, r2
 1369 0136 0A40     		ands	r2, r2, r1
 289:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = buf_u8[px] | ((c.full & 0xF) << (4 - bit));
 1370              		.loc 1 289 21 view .LVU457
 1371 0138 FA54     		strb	r2, [r7, r3]
 290:lvgl/src/draw/lv_img_buf.c ****     }
 1372              		.loc 1 290 9 is_stmt 1 view .LVU458
 290:lvgl/src/draw/lv_img_buf.c ****     }
 1373              		.loc 1 290 39 is_stmt 0 view .LVU459
 1374 013a BDF80410 		ldrh	r1, [sp, #4]
 290:lvgl/src/draw/lv_img_buf.c ****     }
 1375              		.loc 1 290 45 view .LVU460
 1376 013e 01F00F01 		and	r1, r1, #15
 290:lvgl/src/draw/lv_img_buf.c ****     }
 1377              		.loc 1 290 52 view .LVU461
 1378 0142 8140     		lsls	r1, r1, r0
 290:lvgl/src/draw/lv_img_buf.c ****     }
 1379              		.loc 1 290 34 view .LVU462
 1380 0144 0A43     		orrs	r2, r2, r1
 290:lvgl/src/draw/lv_img_buf.c ****     }
 1381              		.loc 1 290 21 view .LVU463
 1382 0146 FA54     		strb	r2, [r7, r3]
 1383              	.LBE69:
 1384 0148 88E7     		b	.L42
 1385              	.LVL182:
 1386              	.L44:
 1387              	.LBB70:
 293:lvgl/src/draw/lv_img_buf.c ****         uint32_t px = dsc->header.w * y + x;
 1388              		.loc 1 293 9 is_stmt 1 view .LVU464
 294:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = c.full;
 1389              		.loc 1 294 9 view .LVU465
 294:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = c.full;
 1390              		.loc 1 294 34 is_stmt 0 view .LVU466
 1391 014a 0368     		ldr	r3, [r0]
 1392 014c C3F38A23 		ubfx	r3, r3, #10, #11
 294:lvgl/src/draw/lv_img_buf.c ****         buf_u8[px]  = c.full;
 1393              		.loc 1 294 41 view .LVU467
 1394 0150 03FB0614 		mla	r4, r3, r6, r1
 1395              	.LVL183:
 295:lvgl/src/draw/lv_img_buf.c ****     }
 1396              		.loc 1 295 9 is_stmt 1 view .LVU468
ARM GAS  C:\usertemp\ccFesu0W.s 			page 51


 295:lvgl/src/draw/lv_img_buf.c ****     }
 1397              		.loc 1 295 24 is_stmt 0 view .LVU469
 1398 0154 BDF80430 		ldrh	r3, [sp, #4]
 295:lvgl/src/draw/lv_img_buf.c ****     }
 1399              		.loc 1 295 15 view .LVU470
 1400 0158 04F58064 		add	r4, r4, #1024
 1401              	.LVL184:
 295:lvgl/src/draw/lv_img_buf.c ****     }
 1402              		.loc 1 295 21 view .LVU471
 1403 015c 3B55     		strb	r3, [r7, r4]
 1404              	.LBE70:
 1405              		.loc 1 297 1 view .LVU472
 1406 015e 7DE7     		b	.L42
 1407              		.cfi_endproc
 1408              	.LFE58:
 1410              		.section	.text.lv_img_buf_set_palette,"ax",%progbits
 1411              		.align	1
 1412              		.global	lv_img_buf_set_palette
 1413              		.syntax unified
 1414              		.thumb
 1415              		.thumb_func
 1417              	lv_img_buf_set_palette:
 1418              	.LVL185:
 1419              	.LFB59:
 298:lvgl/src/draw/lv_img_buf.c **** 
 299:lvgl/src/draw/lv_img_buf.c **** /**
 300:lvgl/src/draw/lv_img_buf.c ****  * Set the palette color of an indexed image. Valid only for `LV_IMG_CF_INDEXED1/2/4/8`
 301:lvgl/src/draw/lv_img_buf.c ****  * @param dsc pointer to an image descriptor
 302:lvgl/src/draw/lv_img_buf.c ****  * @param id the palette color to set:
 303:lvgl/src/draw/lv_img_buf.c ****  *   - for `LV_IMG_CF_INDEXED1`: 0..1
 304:lvgl/src/draw/lv_img_buf.c ****  *   - for `LV_IMG_CF_INDEXED2`: 0..3
 305:lvgl/src/draw/lv_img_buf.c ****  *   - for `LV_IMG_CF_INDEXED4`: 0..15
 306:lvgl/src/draw/lv_img_buf.c ****  *   - for `LV_IMG_CF_INDEXED8`: 0..255
 307:lvgl/src/draw/lv_img_buf.c ****  * @param c the color to set
 308:lvgl/src/draw/lv_img_buf.c ****  */
 309:lvgl/src/draw/lv_img_buf.c **** void lv_img_buf_set_palette(lv_img_dsc_t * dsc, uint8_t id, lv_color_t c)
 310:lvgl/src/draw/lv_img_buf.c **** {
 1420              		.loc 1 310 1 is_stmt 1 view -0
 1421              		.cfi_startproc
 1422              		@ args = 0, pretend = 0, frame = 8
 1423              		@ frame_needed = 0, uses_anonymous_args = 0
 1424              		.loc 1 310 1 is_stmt 0 view .LVU474
 1425 0000 30B5     		push	{r4, r5, lr}
 1426              	.LCFI12:
 1427              		.cfi_def_cfa_offset 12
 1428              		.cfi_offset 4, -12
 1429              		.cfi_offset 5, -8
 1430              		.cfi_offset 14, -4
 1431 0002 83B0     		sub	sp, sp, #12
 1432              	.LCFI13:
 1433              		.cfi_def_cfa_offset 24
 1434 0004 0446     		mov	r4, r0
 1435 0006 0D46     		mov	r5, r1
 1436 0008 1046     		mov	r0, r2	@ movhi
 1437              	.LVL186:
 311:lvgl/src/draw/lv_img_buf.c ****     if((dsc->header.cf == LV_IMG_CF_ALPHA_1BIT && id > 1) || (dsc->header.cf == LV_IMG_CF_ALPHA_2BI
 1438              		.loc 1 311 5 is_stmt 1 view .LVU475
ARM GAS  C:\usertemp\ccFesu0W.s 			page 52


 1439              		.loc 1 311 24 is_stmt 0 view .LVU476
 1440 000a 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 1441 000c 03F01F03 		and	r3, r3, #31
 1442              		.loc 1 311 7 view .LVU477
 1443 0010 0B2B     		cmp	r3, #11
 1444 0012 0ED0     		beq	.L67
 1445              	.L58:
 1446              		.loc 1 311 59 discriminator 3 view .LVU478
 1447 0014 0C2B     		cmp	r3, #12
 1448 0016 0FD0     		beq	.L68
 1449              	.L60:
 1450              		.loc 1 311 113 discriminator 6 view .LVU479
 1451 0018 0D2B     		cmp	r3, #13
 1452 001a 10D0     		beq	.L69
 1453              	.L61:
 312:lvgl/src/draw/lv_img_buf.c ****        (dsc->header.cf == LV_IMG_CF_ALPHA_4BIT && id > 15) || (dsc->header.cf == LV_IMG_CF_ALPHA_8B
 1454              		.loc 1 312 60 discriminator 1 view .LVU480
 1455 001c 0E2B     		cmp	r3, #14
 1456 001e 18D0     		beq	.L57
 313:lvgl/src/draw/lv_img_buf.c ****         LV_LOG_WARN("lv_img_buf_set_px_alpha: invalid 'id'");
 314:lvgl/src/draw/lv_img_buf.c ****         return;
 315:lvgl/src/draw/lv_img_buf.c ****     }
 316:lvgl/src/draw/lv_img_buf.c **** 
 317:lvgl/src/draw/lv_img_buf.c ****     lv_color32_t c32;
 1457              		.loc 1 317 5 is_stmt 1 view .LVU481
 318:lvgl/src/draw/lv_img_buf.c ****     c32.full      = lv_color_to32(c);
 1458              		.loc 1 318 5 view .LVU482
 1459              		.loc 1 318 21 is_stmt 0 view .LVU483
 1460 0020 FFF7FEFF 		bl	lv_color_to32
 1461              	.LVL187:
 1462              		.loc 1 318 19 discriminator 1 view .LVU484
 1463 0024 0190     		str	r0, [sp, #4]
 319:lvgl/src/draw/lv_img_buf.c ****     uint8_t * buf = (uint8_t *)dsc->data;
 1464              		.loc 1 319 5 is_stmt 1 view .LVU485
 1465              		.loc 1 319 15 is_stmt 0 view .LVU486
 1466 0026 A268     		ldr	r2, [r4, #8]
 1467              	.LVL188:
 320:lvgl/src/draw/lv_img_buf.c ****     lv_memcpy_small(&buf[id * sizeof(c32)], &c32, sizeof(c32));
 1468              		.loc 1 320 5 is_stmt 1 view .LVU487
 1469              		.loc 1 320 21 is_stmt 0 view .LVU488
 1470 0028 02EB8502 		add	r2, r2, r5, lsl #2
 1471              	.LVL189:
 1472              	.LBB71:
 1473              	.LBI71:
 194:lvgl/src/draw/../misc/lv_mem.h **** {
 1474              		.loc 3 194 44 is_stmt 1 view .LVU489
 1475              	.LBB72:
 196:lvgl/src/draw/../misc/lv_mem.h ****     const uint8_t * s8 = (const uint8_t *)src;
 1476              		.loc 3 196 5 view .LVU490
 197:lvgl/src/draw/../misc/lv_mem.h **** 
 1477              		.loc 3 197 5 view .LVU491
 199:lvgl/src/draw/../misc/lv_mem.h ****         *d8 = *s8;
 1478              		.loc 3 199 5 view .LVU492
 197:lvgl/src/draw/../misc/lv_mem.h **** 
 1479              		.loc 3 197 21 is_stmt 0 view .LVU493
 1480 002c 01A9     		add	r1, sp, #4
 1481              	.LVL190:
ARM GAS  C:\usertemp\ccFesu0W.s 			page 53


 199:lvgl/src/draw/../misc/lv_mem.h ****         *d8 = *s8;
 1482              		.loc 3 199 10 view .LVU494
 1483 002e 0423     		movs	r3, #4
 1484 0030 0DE0     		b	.L64
 1485              	.LVL191:
 1486              	.L67:
 199:lvgl/src/draw/../misc/lv_mem.h ****         *d8 = *s8;
 1487              		.loc 3 199 10 view .LVU495
 1488              	.LBE72:
 1489              	.LBE71:
 311:lvgl/src/draw/lv_img_buf.c ****        (dsc->header.cf == LV_IMG_CF_ALPHA_4BIT && id > 15) || (dsc->header.cf == LV_IMG_CF_ALPHA_8B
 1490              		.loc 1 311 48 discriminator 1 view .LVU496
 1491 0032 0129     		cmp	r1, #1
 1492 0034 EED9     		bls	.L58
 1493 0036 0CE0     		b	.L57
 1494              	.L68:
 311:lvgl/src/draw/lv_img_buf.c ****        (dsc->header.cf == LV_IMG_CF_ALPHA_4BIT && id > 15) || (dsc->header.cf == LV_IMG_CF_ALPHA_8B
 1495              		.loc 1 311 102 discriminator 4 view .LVU497
 1496 0038 032D     		cmp	r5, #3
 1497 003a EDD9     		bls	.L60
 1498 003c 09E0     		b	.L57
 1499              	.L69:
 312:lvgl/src/draw/lv_img_buf.c ****         LV_LOG_WARN("lv_img_buf_set_px_alpha: invalid 'id'");
 1500              		.loc 1 312 48 view .LVU498
 1501 003e 0F2D     		cmp	r5, #15
 1502 0040 ECD9     		bls	.L61
 1503 0042 06E0     		b	.L57
 1504              	.LVL192:
 1505              	.L65:
 1506              	.LBB74:
 1507              	.LBB73:
 200:lvgl/src/draw/../misc/lv_mem.h ****         d8++;
 1508              		.loc 3 200 9 is_stmt 1 view .LVU499
 200:lvgl/src/draw/../misc/lv_mem.h ****         d8++;
 1509              		.loc 3 200 15 is_stmt 0 view .LVU500
 1510 0044 11F8010B 		ldrb	r0, [r1], #1	@ zero_extendqisi2
 1511              	.LVL193:
 200:lvgl/src/draw/../misc/lv_mem.h ****         d8++;
 1512              		.loc 3 200 13 view .LVU501
 1513 0048 02F8010B 		strb	r0, [r2], #1
 1514              	.LVL194:
 201:lvgl/src/draw/../misc/lv_mem.h ****         s8++;
 1515              		.loc 3 201 9 is_stmt 1 view .LVU502
 202:lvgl/src/draw/../misc/lv_mem.h ****         len--;
 1516              		.loc 3 202 9 view .LVU503
 1517              		.loc 3 203 9 view .LVU504
 1518              		.loc 3 203 12 is_stmt 0 view .LVU505
 1519 004c 013B     		subs	r3, r3, #1
 1520              	.LVL195:
 1521              	.L64:
 199:lvgl/src/draw/../misc/lv_mem.h ****         *d8 = *s8;
 1522              		.loc 3 199 11 is_stmt 1 view .LVU506
 1523 004e 002B     		cmp	r3, #0
 1524 0050 F8D1     		bne	.L65
 1525              	.LVL196:
 1526              	.L57:
 199:lvgl/src/draw/../misc/lv_mem.h ****         *d8 = *s8;
ARM GAS  C:\usertemp\ccFesu0W.s 			page 54


 1527              		.loc 3 199 11 is_stmt 0 view .LVU507
 1528              	.LBE73:
 1529              	.LBE74:
 321:lvgl/src/draw/lv_img_buf.c **** }
 1530              		.loc 1 321 1 view .LVU508
 1531 0052 03B0     		add	sp, sp, #12
 1532              	.LCFI14:
 1533              		.cfi_def_cfa_offset 12
 1534              		@ sp needed
 1535 0054 30BD     		pop	{r4, r5, pc}
 1536              		.loc 1 321 1 view .LVU509
 1537              		.cfi_endproc
 1538              	.LFE59:
 1540              		.section	.text.lv_img_buf_free,"ax",%progbits
 1541              		.align	1
 1542              		.global	lv_img_buf_free
 1543              		.syntax unified
 1544              		.thumb
 1545              		.thumb_func
 1547              	lv_img_buf_free:
 1548              	.LVL197:
 1549              	.LFB61:
 322:lvgl/src/draw/lv_img_buf.c **** 
 323:lvgl/src/draw/lv_img_buf.c **** /**
 324:lvgl/src/draw/lv_img_buf.c ****  * Allocate an image buffer in RAM
 325:lvgl/src/draw/lv_img_buf.c ****  * @param w width of image
 326:lvgl/src/draw/lv_img_buf.c ****  * @param h height of image
 327:lvgl/src/draw/lv_img_buf.c ****  * @param cf a color format (`LV_IMG_CF_...`)
 328:lvgl/src/draw/lv_img_buf.c ****  * @return an allocated image, or NULL on failure
 329:lvgl/src/draw/lv_img_buf.c ****  */
 330:lvgl/src/draw/lv_img_buf.c **** lv_img_dsc_t * lv_img_buf_alloc(lv_coord_t w, lv_coord_t h, lv_img_cf_t cf)
 331:lvgl/src/draw/lv_img_buf.c **** {
 332:lvgl/src/draw/lv_img_buf.c ****     /*Allocate image descriptor*/
 333:lvgl/src/draw/lv_img_buf.c ****     lv_img_dsc_t * dsc = lv_mem_alloc(sizeof(lv_img_dsc_t));
 334:lvgl/src/draw/lv_img_buf.c ****     if(dsc == NULL)
 335:lvgl/src/draw/lv_img_buf.c ****         return NULL;
 336:lvgl/src/draw/lv_img_buf.c **** 
 337:lvgl/src/draw/lv_img_buf.c ****     lv_memset_00(dsc, sizeof(lv_img_dsc_t));
 338:lvgl/src/draw/lv_img_buf.c **** 
 339:lvgl/src/draw/lv_img_buf.c ****     /*Get image data size*/
 340:lvgl/src/draw/lv_img_buf.c ****     dsc->data_size = lv_img_buf_get_img_size(w, h, cf);
 341:lvgl/src/draw/lv_img_buf.c ****     if(dsc->data_size == 0) {
 342:lvgl/src/draw/lv_img_buf.c ****         lv_mem_free(dsc);
 343:lvgl/src/draw/lv_img_buf.c ****         return NULL;
 344:lvgl/src/draw/lv_img_buf.c ****     }
 345:lvgl/src/draw/lv_img_buf.c **** 
 346:lvgl/src/draw/lv_img_buf.c ****     /*Allocate raw buffer*/
 347:lvgl/src/draw/lv_img_buf.c ****     dsc->data = lv_mem_alloc(dsc->data_size);
 348:lvgl/src/draw/lv_img_buf.c ****     if(dsc->data == NULL) {
 349:lvgl/src/draw/lv_img_buf.c ****         lv_mem_free(dsc);
 350:lvgl/src/draw/lv_img_buf.c ****         return NULL;
 351:lvgl/src/draw/lv_img_buf.c ****     }
 352:lvgl/src/draw/lv_img_buf.c ****     lv_memset_00((uint8_t *)dsc->data, dsc->data_size);
 353:lvgl/src/draw/lv_img_buf.c **** 
 354:lvgl/src/draw/lv_img_buf.c ****     /*Fill in header*/
 355:lvgl/src/draw/lv_img_buf.c ****     dsc->header.always_zero = 0;
 356:lvgl/src/draw/lv_img_buf.c ****     dsc->header.w = w;
ARM GAS  C:\usertemp\ccFesu0W.s 			page 55


 357:lvgl/src/draw/lv_img_buf.c ****     dsc->header.h = h;
 358:lvgl/src/draw/lv_img_buf.c ****     dsc->header.cf = cf;
 359:lvgl/src/draw/lv_img_buf.c ****     return dsc;
 360:lvgl/src/draw/lv_img_buf.c **** }
 361:lvgl/src/draw/lv_img_buf.c **** 
 362:lvgl/src/draw/lv_img_buf.c **** /**
 363:lvgl/src/draw/lv_img_buf.c ****  * Free an allocated image buffer
 364:lvgl/src/draw/lv_img_buf.c ****  * @param dsc image buffer to free
 365:lvgl/src/draw/lv_img_buf.c ****  */
 366:lvgl/src/draw/lv_img_buf.c **** void lv_img_buf_free(lv_img_dsc_t * dsc)
 367:lvgl/src/draw/lv_img_buf.c **** {
 1550              		.loc 1 367 1 is_stmt 1 view -0
 1551              		.cfi_startproc
 1552              		@ args = 0, pretend = 0, frame = 0
 1553              		@ frame_needed = 0, uses_anonymous_args = 0
 368:lvgl/src/draw/lv_img_buf.c ****     if(dsc != NULL) {
 1554              		.loc 1 368 5 view .LVU511
 1555              		.loc 1 368 7 is_stmt 0 view .LVU512
 1556 0000 48B1     		cbz	r0, .L74
 367:lvgl/src/draw/lv_img_buf.c ****     if(dsc != NULL) {
 1557              		.loc 1 367 1 view .LVU513
 1558 0002 10B5     		push	{r4, lr}
 1559              	.LCFI15:
 1560              		.cfi_def_cfa_offset 8
 1561              		.cfi_offset 4, -8
 1562              		.cfi_offset 14, -4
 1563 0004 0446     		mov	r4, r0
 369:lvgl/src/draw/lv_img_buf.c ****         if(dsc->data != NULL)
 1564              		.loc 1 369 9 is_stmt 1 view .LVU514
 1565              		.loc 1 369 15 is_stmt 0 view .LVU515
 1566 0006 8068     		ldr	r0, [r0, #8]
 1567              	.LVL198:
 1568              		.loc 1 369 11 view .LVU516
 1569 0008 08B1     		cbz	r0, .L72
 370:lvgl/src/draw/lv_img_buf.c ****             lv_mem_free((void *)dsc->data);
 1570              		.loc 1 370 13 is_stmt 1 view .LVU517
 1571 000a FFF7FEFF 		bl	lv_mem_free
 1572              	.LVL199:
 1573              	.L72:
 371:lvgl/src/draw/lv_img_buf.c **** 
 372:lvgl/src/draw/lv_img_buf.c ****         lv_mem_free(dsc);
 1574              		.loc 1 372 9 view .LVU518
 1575 000e 2046     		mov	r0, r4
 1576 0010 FFF7FEFF 		bl	lv_mem_free
 1577              	.LVL200:
 373:lvgl/src/draw/lv_img_buf.c ****     }
 374:lvgl/src/draw/lv_img_buf.c **** }
 1578              		.loc 1 374 1 is_stmt 0 view .LVU519
 1579 0014 10BD     		pop	{r4, pc}
 1580              	.LVL201:
 1581              	.L74:
 1582              	.LCFI16:
 1583              		.cfi_def_cfa_offset 0
 1584              		.cfi_restore 4
 1585              		.cfi_restore 14
 1586              		.loc 1 374 1 view .LVU520
 1587 0016 7047     		bx	lr
ARM GAS  C:\usertemp\ccFesu0W.s 			page 56


 1588              		.cfi_endproc
 1589              	.LFE61:
 1591              		.section	.text.lv_img_buf_get_img_size,"ax",%progbits
 1592              		.align	1
 1593              		.global	lv_img_buf_get_img_size
 1594              		.syntax unified
 1595              		.thumb
 1596              		.thumb_func
 1598              	lv_img_buf_get_img_size:
 1599              	.LVL202:
 1600              	.LFB62:
 375:lvgl/src/draw/lv_img_buf.c **** 
 376:lvgl/src/draw/lv_img_buf.c **** /**
 377:lvgl/src/draw/lv_img_buf.c ****  * Get the memory consumption of a raw bitmap, given color format and dimensions.
 378:lvgl/src/draw/lv_img_buf.c ****  * @param w width
 379:lvgl/src/draw/lv_img_buf.c ****  * @param h height
 380:lvgl/src/draw/lv_img_buf.c ****  * @param cf color format
 381:lvgl/src/draw/lv_img_buf.c ****  * @return size in bytes
 382:lvgl/src/draw/lv_img_buf.c ****  */
 383:lvgl/src/draw/lv_img_buf.c **** uint32_t lv_img_buf_get_img_size(lv_coord_t w, lv_coord_t h, lv_img_cf_t cf)
 384:lvgl/src/draw/lv_img_buf.c **** {
 1601              		.loc 1 384 1 is_stmt 1 view -0
 1602              		.cfi_startproc
 1603              		@ args = 0, pretend = 0, frame = 0
 1604              		@ frame_needed = 0, uses_anonymous_args = 0
 1605              		@ link register save eliminated.
 385:lvgl/src/draw/lv_img_buf.c ****     switch(cf) {
 1606              		.loc 1 385 5 view .LVU522
 1607 0000 043A     		subs	r2, r2, #4
 1608              	.LVL203:
 1609              		.loc 1 385 5 is_stmt 0 view .LVU523
 1610 0002 0A2A     		cmp	r2, #10
 1611 0004 58D8     		bhi	.L97
 1612 0006 DFE802F0 		tbb	[pc, r2]
 1613              	.L80:
 1614 000a 06       		.byte	(.L90-.L80)/2
 1615 000b 0A       		.byte	(.L89-.L80)/2
 1616 000c 0F       		.byte	(.L88-.L80)/2
 1617 000d 31       		.byte	(.L87-.L80)/2
 1618 000e 3C       		.byte	(.L86-.L80)/2
 1619 000f 47       		.byte	(.L85-.L80)/2
 1620 0010 52       		.byte	(.L84-.L80)/2
 1621 0011 13       		.byte	(.L83-.L80)/2
 1622 0012 1C       		.byte	(.L82-.L80)/2
 1623 0013 25       		.byte	(.L81-.L80)/2
 1624 0014 2E       		.byte	(.L79-.L80)/2
 1625 0015 00       		.p2align 1
 1626              	.L90:
 386:lvgl/src/draw/lv_img_buf.c ****         case LV_IMG_CF_TRUE_COLOR:
 387:lvgl/src/draw/lv_img_buf.c ****             return LV_IMG_BUF_SIZE_TRUE_COLOR(w, h);
 1627              		.loc 1 387 13 is_stmt 1 view .LVU524
 1628              		.loc 1 387 20 is_stmt 0 view .LVU525
 1629 0016 01FB00F0 		mul	r0, r1, r0
 1630              	.LVL204:
 1631              		.loc 1 387 20 view .LVU526
 1632 001a 4000     		lsls	r0, r0, #1
 1633 001c 7047     		bx	lr
ARM GAS  C:\usertemp\ccFesu0W.s 			page 57


 1634              	.LVL205:
 1635              	.L89:
 388:lvgl/src/draw/lv_img_buf.c ****         case LV_IMG_CF_TRUE_COLOR_ALPHA:
 389:lvgl/src/draw/lv_img_buf.c ****             return LV_IMG_BUF_SIZE_TRUE_COLOR_ALPHA(w, h);
 1636              		.loc 1 389 13 is_stmt 1 view .LVU527
 1637              		.loc 1 389 20 is_stmt 0 view .LVU528
 1638 001e 00FB01F1 		mul	r1, r0, r1
 1639              	.LVL206:
 1640              		.loc 1 389 20 view .LVU529
 1641 0022 01EB4100 		add	r0, r1, r1, lsl #1
 1642              	.LVL207:
 1643              		.loc 1 389 20 view .LVU530
 1644 0026 7047     		bx	lr
 1645              	.LVL208:
 1646              	.L88:
 390:lvgl/src/draw/lv_img_buf.c ****         case LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED:
 391:lvgl/src/draw/lv_img_buf.c ****             return LV_IMG_BUF_SIZE_TRUE_COLOR_CHROMA_KEYED(w, h);
 1647              		.loc 1 391 13 is_stmt 1 view .LVU531
 1648              		.loc 1 391 20 is_stmt 0 view .LVU532
 1649 0028 01FB00F0 		mul	r0, r1, r0
 1650              	.LVL209:
 1651              		.loc 1 391 20 view .LVU533
 1652 002c 4000     		lsls	r0, r0, #1
 1653 002e 7047     		bx	lr
 1654              	.LVL210:
 1655              	.L83:
 392:lvgl/src/draw/lv_img_buf.c ****         case LV_IMG_CF_ALPHA_1BIT:
 393:lvgl/src/draw/lv_img_buf.c ****             return LV_IMG_BUF_SIZE_ALPHA_1BIT(w, h);
 1656              		.loc 1 393 13 is_stmt 1 view .LVU534
 1657              		.loc 1 393 20 is_stmt 0 view .LVU535
 1658 0030 0346     		mov	r3, r0
 1659 0032 0028     		cmp	r0, #0
 1660 0034 03DB     		blt	.L98
 1661              	.L91:
 1662 0036 DB10     		asrs	r3, r3, #3
 1663 0038 03FB0110 		mla	r0, r3, r1, r1
 1664              	.LVL211:
 1665              		.loc 1 393 20 view .LVU536
 1666 003c 7047     		bx	lr
 1667              	.LVL212:
 1668              	.L98:
 1669              		.loc 1 393 20 view .LVU537
 1670 003e C31D     		adds	r3, r0, #7
 1671 0040 F9E7     		b	.L91
 1672              	.L82:
 394:lvgl/src/draw/lv_img_buf.c ****         case LV_IMG_CF_ALPHA_2BIT:
 395:lvgl/src/draw/lv_img_buf.c ****             return LV_IMG_BUF_SIZE_ALPHA_2BIT(w, h);
 1673              		.loc 1 395 13 is_stmt 1 view .LVU538
 1674              		.loc 1 395 20 is_stmt 0 view .LVU539
 1675 0042 0346     		mov	r3, r0
 1676 0044 0028     		cmp	r0, #0
 1677 0046 03DB     		blt	.L99
 1678              	.L92:
 1679 0048 9B10     		asrs	r3, r3, #2
 1680 004a 03FB0110 		mla	r0, r3, r1, r1
 1681              	.LVL213:
 1682              		.loc 1 395 20 view .LVU540
ARM GAS  C:\usertemp\ccFesu0W.s 			page 58


 1683 004e 7047     		bx	lr
 1684              	.LVL214:
 1685              	.L99:
 1686              		.loc 1 395 20 view .LVU541
 1687 0050 C31C     		adds	r3, r0, #3
 1688 0052 F9E7     		b	.L92
 1689              	.L81:
 396:lvgl/src/draw/lv_img_buf.c ****         case LV_IMG_CF_ALPHA_4BIT:
 397:lvgl/src/draw/lv_img_buf.c ****             return LV_IMG_BUF_SIZE_ALPHA_4BIT(w, h);
 1690              		.loc 1 397 13 is_stmt 1 view .LVU542
 1691              		.loc 1 397 20 is_stmt 0 view .LVU543
 1692 0054 0346     		mov	r3, r0
 1693 0056 0028     		cmp	r0, #0
 1694 0058 03DB     		blt	.L100
 1695              	.L93:
 1696 005a 5B10     		asrs	r3, r3, #1
 1697 005c 03FB0110 		mla	r0, r3, r1, r1
 1698              	.LVL215:
 1699              		.loc 1 397 20 view .LVU544
 1700 0060 7047     		bx	lr
 1701              	.LVL216:
 1702              	.L100:
 1703              		.loc 1 397 20 view .LVU545
 1704 0062 431C     		adds	r3, r0, #1
 1705 0064 F9E7     		b	.L93
 1706              	.L79:
 398:lvgl/src/draw/lv_img_buf.c ****         case LV_IMG_CF_ALPHA_8BIT:
 399:lvgl/src/draw/lv_img_buf.c ****             return LV_IMG_BUF_SIZE_ALPHA_8BIT(w, h);
 1707              		.loc 1 399 13 is_stmt 1 view .LVU546
 1708              		.loc 1 399 20 is_stmt 0 view .LVU547
 1709 0066 01FB00F0 		mul	r0, r1, r0
 1710              	.LVL217:
 1711              		.loc 1 399 20 view .LVU548
 1712 006a 7047     		bx	lr
 1713              	.LVL218:
 1714              	.L87:
 400:lvgl/src/draw/lv_img_buf.c ****         case LV_IMG_CF_INDEXED_1BIT:
 401:lvgl/src/draw/lv_img_buf.c ****             return LV_IMG_BUF_SIZE_INDEXED_1BIT(w, h);
 1715              		.loc 1 401 13 is_stmt 1 view .LVU549
 1716              		.loc 1 401 20 is_stmt 0 view .LVU550
 1717 006c 0346     		mov	r3, r0
 1718 006e 0028     		cmp	r0, #0
 1719 0070 05DB     		blt	.L101
 1720              	.L94:
 1721 0072 DB10     		asrs	r3, r3, #3
 1722 0074 03FB0113 		mla	r3, r3, r1, r1
 1723 0078 03F10800 		add	r0, r3, #8
 1724              	.LVL219:
 1725              		.loc 1 401 20 view .LVU551
 1726 007c 7047     		bx	lr
 1727              	.LVL220:
 1728              	.L101:
 1729              		.loc 1 401 20 view .LVU552
 1730 007e C31D     		adds	r3, r0, #7
 1731 0080 F7E7     		b	.L94
 1732              	.L86:
 402:lvgl/src/draw/lv_img_buf.c ****         case LV_IMG_CF_INDEXED_2BIT:
ARM GAS  C:\usertemp\ccFesu0W.s 			page 59


 403:lvgl/src/draw/lv_img_buf.c ****             return LV_IMG_BUF_SIZE_INDEXED_2BIT(w, h);
 1733              		.loc 1 403 13 is_stmt 1 view .LVU553
 1734              		.loc 1 403 20 is_stmt 0 view .LVU554
 1735 0082 0346     		mov	r3, r0
 1736 0084 0028     		cmp	r0, #0
 1737 0086 05DB     		blt	.L102
 1738              	.L95:
 1739 0088 9B10     		asrs	r3, r3, #2
 1740 008a 03FB0113 		mla	r3, r3, r1, r1
 1741 008e 03F11000 		add	r0, r3, #16
 1742              	.LVL221:
 1743              		.loc 1 403 20 view .LVU555
 1744 0092 7047     		bx	lr
 1745              	.LVL222:
 1746              	.L102:
 1747              		.loc 1 403 20 view .LVU556
 1748 0094 C31C     		adds	r3, r0, #3
 1749 0096 F7E7     		b	.L95
 1750              	.L85:
 404:lvgl/src/draw/lv_img_buf.c ****         case LV_IMG_CF_INDEXED_4BIT:
 405:lvgl/src/draw/lv_img_buf.c ****             return LV_IMG_BUF_SIZE_INDEXED_4BIT(w, h);
 1751              		.loc 1 405 13 is_stmt 1 view .LVU557
 1752              		.loc 1 405 20 is_stmt 0 view .LVU558
 1753 0098 0346     		mov	r3, r0
 1754 009a 0028     		cmp	r0, #0
 1755 009c 05DB     		blt	.L103
 1756              	.L96:
 1757 009e 5B10     		asrs	r3, r3, #1
 1758 00a0 03FB0113 		mla	r3, r3, r1, r1
 1759 00a4 03F14000 		add	r0, r3, #64
 1760              	.LVL223:
 1761              		.loc 1 405 20 view .LVU559
 1762 00a8 7047     		bx	lr
 1763              	.LVL224:
 1764              	.L103:
 1765              		.loc 1 405 20 view .LVU560
 1766 00aa 431C     		adds	r3, r0, #1
 1767 00ac F7E7     		b	.L96
 1768              	.L84:
 406:lvgl/src/draw/lv_img_buf.c ****         case LV_IMG_CF_INDEXED_8BIT:
 407:lvgl/src/draw/lv_img_buf.c ****             return LV_IMG_BUF_SIZE_INDEXED_8BIT(w, h);
 1769              		.loc 1 407 13 is_stmt 1 view .LVU561
 1770              		.loc 1 407 20 is_stmt 0 view .LVU562
 1771 00ae 01FB00F0 		mul	r0, r1, r0
 1772              	.LVL225:
 1773              		.loc 1 407 20 view .LVU563
 1774 00b2 00F58060 		add	r0, r0, #1024
 1775 00b6 7047     		bx	lr
 1776              	.LVL226:
 1777              	.L97:
 385:lvgl/src/draw/lv_img_buf.c ****         case LV_IMG_CF_TRUE_COLOR:
 1778              		.loc 1 385 5 view .LVU564
 1779 00b8 0020     		movs	r0, #0
 1780              	.LVL227:
 408:lvgl/src/draw/lv_img_buf.c ****         default:
 409:lvgl/src/draw/lv_img_buf.c ****             return 0;
 410:lvgl/src/draw/lv_img_buf.c ****     }
ARM GAS  C:\usertemp\ccFesu0W.s 			page 60


 411:lvgl/src/draw/lv_img_buf.c **** }
 1781              		.loc 1 411 1 view .LVU565
 1782 00ba 7047     		bx	lr
 1783              		.cfi_endproc
 1784              	.LFE62:
 1786              		.section	.text.lv_img_buf_alloc,"ax",%progbits
 1787              		.align	1
 1788              		.global	lv_img_buf_alloc
 1789              		.syntax unified
 1790              		.thumb
 1791              		.thumb_func
 1793              	lv_img_buf_alloc:
 1794              	.LVL228:
 1795              	.LFB60:
 331:lvgl/src/draw/lv_img_buf.c ****     /*Allocate image descriptor*/
 1796              		.loc 1 331 1 is_stmt 1 view -0
 1797              		.cfi_startproc
 1798              		@ args = 0, pretend = 0, frame = 0
 1799              		@ frame_needed = 0, uses_anonymous_args = 0
 331:lvgl/src/draw/lv_img_buf.c ****     /*Allocate image descriptor*/
 1800              		.loc 1 331 1 is_stmt 0 view .LVU567
 1801 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1802              	.LCFI17:
 1803              		.cfi_def_cfa_offset 24
 1804              		.cfi_offset 4, -24
 1805              		.cfi_offset 5, -20
 1806              		.cfi_offset 6, -16
 1807              		.cfi_offset 7, -12
 1808              		.cfi_offset 8, -8
 1809              		.cfi_offset 14, -4
 1810 0004 0746     		mov	r7, r0
 1811 0006 0E46     		mov	r6, r1
 1812 0008 1546     		mov	r5, r2
 333:lvgl/src/draw/lv_img_buf.c ****     if(dsc == NULL)
 1813              		.loc 1 333 5 is_stmt 1 view .LVU568
 333:lvgl/src/draw/lv_img_buf.c ****     if(dsc == NULL)
 1814              		.loc 1 333 26 is_stmt 0 view .LVU569
 1815 000a 0C20     		movs	r0, #12
 1816              	.LVL229:
 333:lvgl/src/draw/lv_img_buf.c ****     if(dsc == NULL)
 1817              		.loc 1 333 26 view .LVU570
 1818 000c FFF7FEFF 		bl	lv_mem_alloc
 1819              	.LVL230:
 334:lvgl/src/draw/lv_img_buf.c ****         return NULL;
 1820              		.loc 1 334 5 is_stmt 1 view .LVU571
 334:lvgl/src/draw/lv_img_buf.c ****         return NULL;
 1821              		.loc 1 334 7 is_stmt 0 view .LVU572
 1822 0010 0446     		mov	r4, r0
 1823 0012 08B3     		cbz	r0, .L104
 337:lvgl/src/draw/lv_img_buf.c **** 
 1824              		.loc 1 337 5 is_stmt 1 view .LVU573
 1825 0014 0C21     		movs	r1, #12
 1826 0016 FFF7FEFF 		bl	lv_memset_00
 1827              	.LVL231:
 340:lvgl/src/draw/lv_img_buf.c ****     if(dsc->data_size == 0) {
 1828              		.loc 1 340 5 view .LVU574
 340:lvgl/src/draw/lv_img_buf.c ****     if(dsc->data_size == 0) {
ARM GAS  C:\usertemp\ccFesu0W.s 			page 61


 1829              		.loc 1 340 22 is_stmt 0 view .LVU575
 1830 001a 2A46     		mov	r2, r5
 1831 001c 3146     		mov	r1, r6
 1832 001e 3846     		mov	r0, r7
 1833 0020 FFF7FEFF 		bl	lv_img_buf_get_img_size
 1834              	.LVL232:
 340:lvgl/src/draw/lv_img_buf.c ****     if(dsc->data_size == 0) {
 1835              		.loc 1 340 20 discriminator 1 view .LVU576
 1836 0024 6060     		str	r0, [r4, #4]
 341:lvgl/src/draw/lv_img_buf.c ****         lv_mem_free(dsc);
 1837              		.loc 1 341 5 is_stmt 1 view .LVU577
 341:lvgl/src/draw/lv_img_buf.c ****         lv_mem_free(dsc);
 1838              		.loc 1 341 7 is_stmt 0 view .LVU578
 1839 0026 D0B1     		cbz	r0, .L109
 347:lvgl/src/draw/lv_img_buf.c ****     if(dsc->data == NULL) {
 1840              		.loc 1 347 5 is_stmt 1 view .LVU579
 347:lvgl/src/draw/lv_img_buf.c ****     if(dsc->data == NULL) {
 1841              		.loc 1 347 17 is_stmt 0 view .LVU580
 1842 0028 FFF7FEFF 		bl	lv_mem_alloc
 1843              	.LVL233:
 1844 002c 8046     		mov	r8, r0
 347:lvgl/src/draw/lv_img_buf.c ****     if(dsc->data == NULL) {
 1845              		.loc 1 347 15 discriminator 1 view .LVU581
 1846 002e A060     		str	r0, [r4, #8]
 348:lvgl/src/draw/lv_img_buf.c ****         lv_mem_free(dsc);
 1847              		.loc 1 348 5 is_stmt 1 view .LVU582
 348:lvgl/src/draw/lv_img_buf.c ****         lv_mem_free(dsc);
 1848              		.loc 1 348 7 is_stmt 0 view .LVU583
 1849 0030 D0B1     		cbz	r0, .L110
 352:lvgl/src/draw/lv_img_buf.c **** 
 1850              		.loc 1 352 5 is_stmt 1 view .LVU584
 1851 0032 6168     		ldr	r1, [r4, #4]
 1852 0034 FFF7FEFF 		bl	lv_memset_00
 1853              	.LVL234:
 355:lvgl/src/draw/lv_img_buf.c ****     dsc->header.w = w;
 1854              		.loc 1 355 5 view .LVU585
 355:lvgl/src/draw/lv_img_buf.c ****     dsc->header.w = w;
 1855              		.loc 1 355 29 is_stmt 0 view .LVU586
 1856 0038 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 1857 003a 23F0E003 		bic	r3, r3, #224
 1858 003e 2370     		strb	r3, [r4]
 356:lvgl/src/draw/lv_img_buf.c ****     dsc->header.h = h;
 1859              		.loc 1 356 5 is_stmt 1 view .LVU587
 356:lvgl/src/draw/lv_img_buf.c ****     dsc->header.h = h;
 1860              		.loc 1 356 19 is_stmt 0 view .LVU588
 1861 0040 2368     		ldr	r3, [r4]
 1862 0042 67F39423 		bfi	r3, r7, #10, #11
 1863 0046 2360     		str	r3, [r4]
 357:lvgl/src/draw/lv_img_buf.c ****     dsc->header.cf = cf;
 1864              		.loc 1 357 5 is_stmt 1 view .LVU589
 357:lvgl/src/draw/lv_img_buf.c ****     dsc->header.cf = cf;
 1865              		.loc 1 357 19 is_stmt 0 view .LVU590
 1866 0048 6388     		ldrh	r3, [r4, #2]
 1867 004a 66F34F13 		bfi	r3, r6, #5, #11
 1868 004e 6380     		strh	r3, [r4, #2]	@ movhi
 358:lvgl/src/draw/lv_img_buf.c ****     return dsc;
 1869              		.loc 1 358 5 is_stmt 1 view .LVU591
ARM GAS  C:\usertemp\ccFesu0W.s 			page 62


 358:lvgl/src/draw/lv_img_buf.c ****     return dsc;
 1870              		.loc 1 358 20 is_stmt 0 view .LVU592
 1871 0050 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 1872 0052 65F30403 		bfi	r3, r5, #0, #5
 1873 0056 2370     		strb	r3, [r4]
 359:lvgl/src/draw/lv_img_buf.c **** }
 1874              		.loc 1 359 5 is_stmt 1 view .LVU593
 1875              	.LVL235:
 1876              	.L104:
 360:lvgl/src/draw/lv_img_buf.c **** 
 1877              		.loc 1 360 1 is_stmt 0 view .LVU594
 1878 0058 2046     		mov	r0, r4
 1879 005a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1880              	.LVL236:
 1881              	.L109:
 342:lvgl/src/draw/lv_img_buf.c ****         return NULL;
 1882              		.loc 1 342 9 is_stmt 1 view .LVU595
 1883 005e 2046     		mov	r0, r4
 1884 0060 FFF7FEFF 		bl	lv_mem_free
 1885              	.LVL237:
 343:lvgl/src/draw/lv_img_buf.c ****     }
 1886              		.loc 1 343 9 view .LVU596
 343:lvgl/src/draw/lv_img_buf.c ****     }
 1887              		.loc 1 343 16 is_stmt 0 view .LVU597
 1888 0064 0024     		movs	r4, #0
 1889              	.LVL238:
 343:lvgl/src/draw/lv_img_buf.c ****     }
 1890              		.loc 1 343 16 view .LVU598
 1891 0066 F7E7     		b	.L104
 1892              	.LVL239:
 1893              	.L110:
 349:lvgl/src/draw/lv_img_buf.c ****         return NULL;
 1894              		.loc 1 349 9 is_stmt 1 view .LVU599
 1895 0068 2046     		mov	r0, r4
 1896 006a FFF7FEFF 		bl	lv_mem_free
 1897              	.LVL240:
 350:lvgl/src/draw/lv_img_buf.c ****     }
 1898              		.loc 1 350 9 view .LVU600
 350:lvgl/src/draw/lv_img_buf.c ****     }
 1899              		.loc 1 350 16 is_stmt 0 view .LVU601
 1900 006e 4446     		mov	r4, r8
 1901              	.LVL241:
 350:lvgl/src/draw/lv_img_buf.c ****     }
 1902              		.loc 1 350 16 view .LVU602
 1903 0070 F2E7     		b	.L104
 1904              		.cfi_endproc
 1905              	.LFE60:
 1907              		.section	.text._lv_img_buf_transform_init,"ax",%progbits
 1908              		.align	1
 1909              		.global	_lv_img_buf_transform_init
 1910              		.syntax unified
 1911              		.thumb
 1912              		.thumb_func
 1914              	_lv_img_buf_transform_init:
 1915              	.LVL242:
 1916              	.LFB63:
 412:lvgl/src/draw/lv_img_buf.c **** 
ARM GAS  C:\usertemp\ccFesu0W.s 			page 63


 413:lvgl/src/draw/lv_img_buf.c **** #if LV_DRAW_COMPLEX
 414:lvgl/src/draw/lv_img_buf.c **** /**
 415:lvgl/src/draw/lv_img_buf.c ****  * Initialize a descriptor to transform an image
 416:lvgl/src/draw/lv_img_buf.c ****  * @param dsc pointer to an `lv_img_transform_dsc_t` variable whose `cfg` field is initialized
 417:lvgl/src/draw/lv_img_buf.c ****  */
 418:lvgl/src/draw/lv_img_buf.c **** void _lv_img_buf_transform_init(lv_img_transform_dsc_t * dsc)
 419:lvgl/src/draw/lv_img_buf.c **** {
 1917              		.loc 1 419 1 is_stmt 1 view -0
 1918              		.cfi_startproc
 1919              		@ args = 0, pretend = 0, frame = 0
 1920              		@ frame_needed = 0, uses_anonymous_args = 0
 1921              		.loc 1 419 1 is_stmt 0 view .LVU604
 1922 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 1923              	.LCFI18:
 1924              		.cfi_def_cfa_offset 32
 1925              		.cfi_offset 4, -32
 1926              		.cfi_offset 5, -28
 1927              		.cfi_offset 6, -24
 1928              		.cfi_offset 7, -20
 1929              		.cfi_offset 8, -16
 1930              		.cfi_offset 9, -12
 1931              		.cfi_offset 10, -8
 1932              		.cfi_offset 14, -4
 1933 0004 0446     		mov	r4, r0
 420:lvgl/src/draw/lv_img_buf.c ****     dsc->tmp.pivot_x_256 = dsc->cfg.pivot_x * 256;
 1934              		.loc 1 420 5 is_stmt 1 view .LVU605
 1935              		.loc 1 420 36 is_stmt 0 view .LVU606
 1936 0006 B0F90830 		ldrsh	r3, [r0, #8]
 1937              		.loc 1 420 45 view .LVU607
 1938 000a 1B02     		lsls	r3, r3, #8
 1939              		.loc 1 420 26 view .LVU608
 1940 000c 4362     		str	r3, [r0, #36]
 421:lvgl/src/draw/lv_img_buf.c ****     dsc->tmp.pivot_y_256 = dsc->cfg.pivot_y * 256;
 1941              		.loc 1 421 5 is_stmt 1 view .LVU609
 1942              		.loc 1 421 36 is_stmt 0 view .LVU610
 1943 000e B0F90A30 		ldrsh	r3, [r0, #10]
 1944              		.loc 1 421 45 view .LVU611
 1945 0012 1B02     		lsls	r3, r3, #8
 1946              		.loc 1 421 26 view .LVU612
 1947 0014 8362     		str	r3, [r0, #40]
 422:lvgl/src/draw/lv_img_buf.c **** 
 423:lvgl/src/draw/lv_img_buf.c ****     int32_t angle_low = dsc->cfg.angle / 10;
 1948              		.loc 1 423 5 is_stmt 1 view .LVU613
 1949              		.loc 1 423 33 is_stmt 0 view .LVU614
 1950 0016 B0F90C50 		ldrsh	r5, [r0, #12]
 1951              		.loc 1 423 40 view .LVU615
 1952 001a 434F     		ldr	r7, .L115
 1953 001c 87FB0532 		smull	r3, r2, r7, r5
 1954 0020 EB17     		asrs	r3, r5, #31
 1955 0022 C3EBA203 		rsb	r3, r3, r2, asr #2
 1956 0026 1BB2     		sxth	r3, r3
 1957              	.LVL243:
 424:lvgl/src/draw/lv_img_buf.c ****     int32_t angle_high = angle_low + 1;
 1958              		.loc 1 424 5 is_stmt 1 view .LVU616
 1959              		.loc 1 424 13 is_stmt 0 view .LVU617
 1960 0028 03F1010A 		add	r10, r3, #1
 1961              	.LVL244:
ARM GAS  C:\usertemp\ccFesu0W.s 			page 64


 425:lvgl/src/draw/lv_img_buf.c ****     int32_t angle_rem = dsc->cfg.angle  - (angle_low * 10);
 1962              		.loc 1 425 5 is_stmt 1 view .LVU618
 1963              		.loc 1 425 13 is_stmt 0 view .LVU619
 1964 002c 6FF00902 		mvn	r2, #9
 1965 0030 02FB0355 		mla	r5, r2, r3, r5
 1966              	.LVL245:
 426:lvgl/src/draw/lv_img_buf.c **** 
 427:lvgl/src/draw/lv_img_buf.c ****     int32_t s1 = lv_trigo_sin(-angle_low);
 1967              		.loc 1 427 5 is_stmt 1 view .LVU620
 1968              		.loc 1 427 18 is_stmt 0 view .LVU621
 1969 0034 1FFA83F8 		uxth	r8, r3
 1970 0038 C8F10000 		rsb	r0, r8, #0
 1971              	.LVL246:
 1972              		.loc 1 427 18 view .LVU622
 1973 003c 00B2     		sxth	r0, r0
 1974 003e FFF7FEFF 		bl	lv_trigo_sin
 1975              	.LVL247:
 1976              		.loc 1 427 18 view .LVU623
 1977 0042 8146     		mov	r9, r0
 1978              	.LVL248:
 428:lvgl/src/draw/lv_img_buf.c ****     int32_t s2 = lv_trigo_sin(-angle_high);
 1979              		.loc 1 428 5 is_stmt 1 view .LVU624
 1980              		.loc 1 428 18 is_stmt 0 view .LVU625
 1981 0044 1FFA8AFA 		uxth	r10, r10
 1982              	.LVL249:
 1983              		.loc 1 428 18 view .LVU626
 1984 0048 CAF10000 		rsb	r0, r10, #0
 1985              	.LVL250:
 1986              		.loc 1 428 18 view .LVU627
 1987 004c 00B2     		sxth	r0, r0
 1988 004e FFF7FEFF 		bl	lv_trigo_sin
 1989              	.LVL251:
 1990 0052 0646     		mov	r6, r0
 1991              	.LVL252:
 429:lvgl/src/draw/lv_img_buf.c **** 
 430:lvgl/src/draw/lv_img_buf.c ****     int32_t c1 = lv_trigo_sin(-angle_low + 90);
 1992              		.loc 1 430 5 is_stmt 1 view .LVU628
 1993              		.loc 1 430 42 is_stmt 0 view .LVU629
 1994 0054 C8F15A00 		rsb	r0, r8, #90
 1995              	.LVL253:
 1996              		.loc 1 430 18 view .LVU630
 1997 0058 00B2     		sxth	r0, r0
 1998 005a FFF7FEFF 		bl	lv_trigo_sin
 1999              	.LVL254:
 2000 005e 8046     		mov	r8, r0
 2001              	.LVL255:
 431:lvgl/src/draw/lv_img_buf.c ****     int32_t c2 = lv_trigo_sin(-angle_high + 90);
 2002              		.loc 1 431 5 is_stmt 1 view .LVU631
 2003              		.loc 1 431 43 is_stmt 0 view .LVU632
 2004 0060 CAF15A00 		rsb	r0, r10, #90
 2005              	.LVL256:
 2006              		.loc 1 431 18 view .LVU633
 2007 0064 00B2     		sxth	r0, r0
 2008 0066 FFF7FEFF 		bl	lv_trigo_sin
 2009              	.LVL257:
 432:lvgl/src/draw/lv_img_buf.c **** 
 433:lvgl/src/draw/lv_img_buf.c ****     dsc->tmp.sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
ARM GAS  C:\usertemp\ccFesu0W.s 			page 65


 2010              		.loc 1 433 5 is_stmt 1 view .LVU634
 2011              		.loc 1 433 32 is_stmt 0 view .LVU635
 2012 006a C5F10A02 		rsb	r2, r5, #10
 2013              		.loc 1 433 50 view .LVU636
 2014 006e 06FB05F3 		mul	r3, r6, r5
 2015              		.loc 1 433 45 view .LVU637
 2016 0072 09FB0233 		mla	r3, r9, r2, r3
 2017              		.loc 1 433 63 view .LVU638
 2018 0076 87FB0361 		smull	r6, r1, r7, r3
 2019              	.LVL258:
 2020              		.loc 1 433 63 view .LVU639
 2021 007a DB17     		asrs	r3, r3, #31
 2022 007c C3EBA103 		rsb	r3, r3, r1, asr #2
 2023              		.loc 1 433 20 view .LVU640
 2024 0080 E362     		str	r3, [r4, #44]
 434:lvgl/src/draw/lv_img_buf.c ****     dsc->tmp.cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
 2025              		.loc 1 434 5 is_stmt 1 view .LVU641
 2026              		.loc 1 434 50 is_stmt 0 view .LVU642
 2027 0082 00FB05F5 		mul	r5, r0, r5
 2028              	.LVL259:
 2029              		.loc 1 434 45 view .LVU643
 2030 0086 08FB0250 		mla	r0, r8, r2, r5
 2031              	.LVL260:
 2032              		.loc 1 434 63 view .LVU644
 2033 008a 87FB0027 		smull	r2, r7, r7, r0
 2034 008e C517     		asrs	r5, r0, #31
 2035 0090 C5EBA705 		rsb	r5, r5, r7, asr #2
 2036              		.loc 1 434 20 view .LVU645
 2037 0094 2563     		str	r5, [r4, #48]
 435:lvgl/src/draw/lv_img_buf.c **** 
 436:lvgl/src/draw/lv_img_buf.c ****     /*Use smaller value to avoid overflow*/
 437:lvgl/src/draw/lv_img_buf.c ****     dsc->tmp.sinma = dsc->tmp.sinma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
 2038              		.loc 1 437 5 is_stmt 1 view .LVU646
 2039              		.loc 1 437 37 is_stmt 0 view .LVU647
 2040 0096 5B11     		asrs	r3, r3, #5
 2041              		.loc 1 437 20 view .LVU648
 2042 0098 E362     		str	r3, [r4, #44]
 438:lvgl/src/draw/lv_img_buf.c ****     dsc->tmp.cosma = dsc->tmp.cosma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
 2043              		.loc 1 438 5 is_stmt 1 view .LVU649
 2044              		.loc 1 438 37 is_stmt 0 view .LVU650
 2045 009a 6D11     		asrs	r5, r5, #5
 2046              		.loc 1 438 20 view .LVU651
 2047 009c 2563     		str	r5, [r4, #48]
 439:lvgl/src/draw/lv_img_buf.c **** 
 440:lvgl/src/draw/lv_img_buf.c ****     dsc->tmp.chroma_keyed = lv_img_cf_is_chroma_keyed(dsc->cfg.cf) ? 1 : 0;
 2048              		.loc 1 440 5 is_stmt 1 view .LVU652
 2049              		.loc 1 440 29 is_stmt 0 view .LVU653
 2050 009e A07C     		ldrb	r0, [r4, #18]	@ zero_extendqisi2
 2051 00a0 FFF7FEFF 		bl	lv_img_cf_is_chroma_keyed
 2052              	.LVL261:
 2053              		.loc 1 440 27 discriminator 1 view .LVU654
 2054 00a4 94F83430 		ldrb	r3, [r4, #52]	@ zero_extendqisi2
 2055 00a8 60F30003 		bfi	r3, r0, #0, #1
 2056 00ac 84F83430 		strb	r3, [r4, #52]
 441:lvgl/src/draw/lv_img_buf.c ****     dsc->tmp.has_alpha = lv_img_cf_has_alpha(dsc->cfg.cf) ? 1 : 0;
 2057              		.loc 1 441 5 is_stmt 1 view .LVU655
 2058              		.loc 1 441 26 is_stmt 0 view .LVU656
ARM GAS  C:\usertemp\ccFesu0W.s 			page 66


 2059 00b0 A07C     		ldrb	r0, [r4, #18]	@ zero_extendqisi2
 2060 00b2 FFF7FEFF 		bl	lv_img_cf_has_alpha
 2061              	.LVL262:
 2062              		.loc 1 441 24 discriminator 1 view .LVU657
 2063 00b6 94F83430 		ldrb	r3, [r4, #52]	@ zero_extendqisi2
 2064 00ba 60F34103 		bfi	r3, r0, #1, #1
 2065 00be 84F83430 		strb	r3, [r4, #52]
 442:lvgl/src/draw/lv_img_buf.c ****     if(dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR || dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 2066              		.loc 1 442 5 is_stmt 1 view .LVU658
 2067              		.loc 1 442 16 is_stmt 0 view .LVU659
 2068 00c2 A27C     		ldrb	r2, [r4, #18]	@ zero_extendqisi2
 2069              		.loc 1 442 89 view .LVU660
 2070 00c4 131F     		subs	r3, r2, #4
 2071 00c6 DBB2     		uxtb	r3, r3
 2072              		.loc 1 442 7 view .LVU661
 2073 00c8 022B     		cmp	r3, #2
 2074 00ca 26D8     		bhi	.L112
 443:lvgl/src/draw/lv_img_buf.c ****        dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 444:lvgl/src/draw/lv_img_buf.c ****         dsc->tmp.native_color = 1;
 2075              		.loc 1 444 9 is_stmt 1 view .LVU662
 2076              		.loc 1 444 31 is_stmt 0 view .LVU663
 2077 00cc 94F83430 		ldrb	r3, [r4, #52]	@ zero_extendqisi2
 2078 00d0 43F00403 		orr	r3, r3, #4
 2079 00d4 84F83430 		strb	r3, [r4, #52]
 2080              	.L113:
 445:lvgl/src/draw/lv_img_buf.c ****     }
 446:lvgl/src/draw/lv_img_buf.c ****     else {
 447:lvgl/src/draw/lv_img_buf.c ****         dsc->tmp.native_color = 0;
 448:lvgl/src/draw/lv_img_buf.c ****     }
 449:lvgl/src/draw/lv_img_buf.c **** 
 450:lvgl/src/draw/lv_img_buf.c ****     dsc->tmp.img_dsc.data = dsc->cfg.src;
 2081              		.loc 1 450 5 is_stmt 1 view .LVU664
 2082              		.loc 1 450 37 is_stmt 0 view .LVU665
 2083 00d8 2368     		ldr	r3, [r4]
 2084              		.loc 1 450 27 view .LVU666
 2085 00da 2362     		str	r3, [r4, #32]
 451:lvgl/src/draw/lv_img_buf.c ****     dsc->tmp.img_dsc.header.always_zero = 0;
 2086              		.loc 1 451 5 is_stmt 1 view .LVU667
 2087              		.loc 1 451 41 is_stmt 0 view .LVU668
 2088 00dc 237E     		ldrb	r3, [r4, #24]	@ zero_extendqisi2
 2089 00de 23F0E003 		bic	r3, r3, #224
 2090 00e2 2376     		strb	r3, [r4, #24]
 452:lvgl/src/draw/lv_img_buf.c ****     dsc->tmp.img_dsc.header.cf = dsc->cfg.cf;
 2091              		.loc 1 452 5 is_stmt 1 view .LVU669
 2092              		.loc 1 452 32 is_stmt 0 view .LVU670
 2093 00e4 DBB2     		uxtb	r3, r3
 2094 00e6 62F30403 		bfi	r3, r2, #0, #5
 2095 00ea 2376     		strb	r3, [r4, #24]
 453:lvgl/src/draw/lv_img_buf.c ****     dsc->tmp.img_dsc.header.w = dsc->cfg.src_w;
 2096              		.loc 1 453 5 is_stmt 1 view .LVU671
 2097              		.loc 1 453 41 is_stmt 0 view .LVU672
 2098 00ec A288     		ldrh	r2, [r4, #4]
 2099              		.loc 1 453 31 view .LVU673
 2100 00ee A369     		ldr	r3, [r4, #24]
 2101 00f0 62F39423 		bfi	r3, r2, #10, #11
 2102 00f4 A361     		str	r3, [r4, #24]
 454:lvgl/src/draw/lv_img_buf.c ****     dsc->tmp.img_dsc.header.h = dsc->cfg.src_h;
ARM GAS  C:\usertemp\ccFesu0W.s 			page 67


 2103              		.loc 1 454 5 is_stmt 1 view .LVU674
 2104              		.loc 1 454 41 is_stmt 0 view .LVU675
 2105 00f6 E288     		ldrh	r2, [r4, #6]
 2106              		.loc 1 454 31 view .LVU676
 2107 00f8 638B     		ldrh	r3, [r4, #26]
 2108 00fa 62F34F13 		bfi	r3, r2, #5, #11
 2109 00fe 6383     		strh	r3, [r4, #26]	@ movhi
 455:lvgl/src/draw/lv_img_buf.c **** 
 456:lvgl/src/draw/lv_img_buf.c ****     /*The inverse of the zoom will be sued during the transformation
 457:lvgl/src/draw/lv_img_buf.c ****      * + dsc->cfg.zoom / 2 for rounding*/
 458:lvgl/src/draw/lv_img_buf.c ****     dsc->tmp.zoom_inv = (((256 * 256) << _LV_ZOOM_INV_UPSCALE) + dsc->cfg.zoom / 2) / dsc->cfg.zoom
 2110              		.loc 1 458 5 is_stmt 1 view .LVU677
 2111              		.loc 1 458 74 is_stmt 0 view .LVU678
 2112 0100 E289     		ldrh	r2, [r4, #14]
 2113              		.loc 1 458 80 view .LVU679
 2114 0102 5308     		lsrs	r3, r2, #1
 2115              		.loc 1 458 64 view .LVU680
 2116 0104 03F50013 		add	r3, r3, #2097152
 2117              		.loc 1 458 85 view .LVU681
 2118 0108 93FBF2F3 		sdiv	r3, r3, r2
 2119              		.loc 1 458 23 view .LVU682
 2120 010c A363     		str	r3, [r4, #56]
 459:lvgl/src/draw/lv_img_buf.c **** 
 460:lvgl/src/draw/lv_img_buf.c ****     dsc->res.opa = LV_OPA_COVER;
 2121              		.loc 1 460 5 is_stmt 1 view .LVU683
 2122              		.loc 1 460 18 is_stmt 0 view .LVU684
 2123 010e FF23     		movs	r3, #255
 2124 0110 A375     		strb	r3, [r4, #22]
 461:lvgl/src/draw/lv_img_buf.c ****     dsc->res.color = dsc->cfg.color;
 2125              		.loc 1 461 5 is_stmt 1 view .LVU685
 2126              		.loc 1 461 20 is_stmt 0 view .LVU686
 2127 0112 238A     		ldrh	r3, [r4, #16]
 2128 0114 A382     		strh	r3, [r4, #20]	@ movhi
 462:lvgl/src/draw/lv_img_buf.c **** }
 2129              		.loc 1 462 1 view .LVU687
 2130 0116 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 2131              	.LVL263:
 2132              	.L112:
 447:lvgl/src/draw/lv_img_buf.c ****     }
 2133              		.loc 1 447 9 is_stmt 1 view .LVU688
 447:lvgl/src/draw/lv_img_buf.c ****     }
 2134              		.loc 1 447 31 is_stmt 0 view .LVU689
 2135 011a 94F83430 		ldrb	r3, [r4, #52]	@ zero_extendqisi2
 2136 011e 23F00403 		bic	r3, r3, #4
 2137 0122 84F83430 		strb	r3, [r4, #52]
 2138 0126 D7E7     		b	.L113
 2139              	.L116:
 2140              		.align	2
 2141              	.L115:
 2142 0128 67666666 		.word	1717986919
 2143              		.cfi_endproc
 2144              	.LFE63:
 2146              		.section	.text._lv_img_buf_get_transformed_area,"ax",%progbits
 2147              		.align	1
 2148              		.global	_lv_img_buf_get_transformed_area
 2149              		.syntax unified
 2150              		.thumb
ARM GAS  C:\usertemp\ccFesu0W.s 			page 68


 2151              		.thumb_func
 2153              	_lv_img_buf_get_transformed_area:
 2154              	.LVL264:
 2155              	.LFB64:
 463:lvgl/src/draw/lv_img_buf.c **** #endif
 464:lvgl/src/draw/lv_img_buf.c **** 
 465:lvgl/src/draw/lv_img_buf.c **** /**
 466:lvgl/src/draw/lv_img_buf.c ****  * Get the area of a rectangle if its rotated and scaled
 467:lvgl/src/draw/lv_img_buf.c ****  * @param res store the coordinates here
 468:lvgl/src/draw/lv_img_buf.c ****  * @param w width of the rectangle to transform
 469:lvgl/src/draw/lv_img_buf.c ****  * @param h height of the rectangle to transform
 470:lvgl/src/draw/lv_img_buf.c ****  * @param angle angle of rotation
 471:lvgl/src/draw/lv_img_buf.c ****  * @param zoom zoom, (256 no zoom)
 472:lvgl/src/draw/lv_img_buf.c ****  * @param pivot x,y pivot coordinates of rotation
 473:lvgl/src/draw/lv_img_buf.c ****  */
 474:lvgl/src/draw/lv_img_buf.c **** void _lv_img_buf_get_transformed_area(lv_area_t * res, lv_coord_t w, lv_coord_t h, int16_t angle, u
 475:lvgl/src/draw/lv_img_buf.c ****                                       const lv_point_t * pivot)
 476:lvgl/src/draw/lv_img_buf.c **** {
 2156              		.loc 1 476 1 is_stmt 1 view -0
 2157              		.cfi_startproc
 2158              		@ args = 8, pretend = 0, frame = 16
 2159              		@ frame_needed = 0, uses_anonymous_args = 0
 2160              		.loc 1 476 1 is_stmt 0 view .LVU691
 2161 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 2162              	.LCFI19:
 2163              		.cfi_def_cfa_offset 36
 2164              		.cfi_offset 4, -36
 2165              		.cfi_offset 5, -32
 2166              		.cfi_offset 6, -28
 2167              		.cfi_offset 7, -24
 2168              		.cfi_offset 8, -20
 2169              		.cfi_offset 9, -16
 2170              		.cfi_offset 10, -12
 2171              		.cfi_offset 11, -8
 2172              		.cfi_offset 14, -4
 2173 0004 85B0     		sub	sp, sp, #20
 2174              	.LCFI20:
 2175              		.cfi_def_cfa_offset 56
 2176 0006 0446     		mov	r4, r0
 2177 0008 BDF838C0 		ldrh	ip, [sp, #56]
 2178 000c 0F9D     		ldr	r5, [sp, #60]
 477:lvgl/src/draw/lv_img_buf.c **** #if LV_DRAW_COMPLEX
 478:lvgl/src/draw/lv_img_buf.c ****     if(angle == 0 && zoom == LV_IMG_ZOOM_NONE) {
 2179              		.loc 1 478 5 is_stmt 1 view .LVU692
 2180              		.loc 1 478 7 is_stmt 0 view .LVU693
 2181 000e 002B     		cmp	r3, #0
 2182 0010 08BF     		it	eq
 2183 0012 BCF5807F 		cmpeq	ip, #256
 2184 0016 34D0     		beq	.L123
 2185 0018 1846     		mov	r0, r3
 2186              	.LVL265:
 479:lvgl/src/draw/lv_img_buf.c ****         res->x1 = 0;
 480:lvgl/src/draw/lv_img_buf.c ****         res->y1 = 0;
 481:lvgl/src/draw/lv_img_buf.c ****         res->x2 = w - 1;
 482:lvgl/src/draw/lv_img_buf.c ****         res->y2 = h - 1;
 483:lvgl/src/draw/lv_img_buf.c ****         return;
 484:lvgl/src/draw/lv_img_buf.c ****     }
ARM GAS  C:\usertemp\ccFesu0W.s 			page 69


 485:lvgl/src/draw/lv_img_buf.c **** 
 486:lvgl/src/draw/lv_img_buf.c ****     res->x1 = (((int32_t)(-pivot->x) * zoom) >> 8) - 1;
 2187              		.loc 1 486 5 is_stmt 1 view .LVU694
 2188              		.loc 1 486 33 is_stmt 0 view .LVU695
 2189 001a B5F90030 		ldrsh	r3, [r5]
 2190              	.LVL266:
 2191              		.loc 1 486 27 view .LVU696
 2192 001e 5B42     		rsbs	r3, r3, #0
 2193              		.loc 1 486 38 view .LVU697
 2194 0020 0CFB03F3 		mul	r3, ip, r3
 2195              		.loc 1 486 46 view .LVU698
 2196 0024 1B12     		asrs	r3, r3, #8
 2197              		.loc 1 486 52 view .LVU699
 2198 0026 013B     		subs	r3, r3, #1
 2199 0028 1FFA83FE 		uxth	lr, r3
 2200              		.loc 1 486 13 view .LVU700
 2201 002c 2380     		strh	r3, [r4]	@ movhi
 487:lvgl/src/draw/lv_img_buf.c ****     res->y1 = (((int32_t)(-pivot->y) * zoom) >> 8) - 1;
 2202              		.loc 1 487 5 is_stmt 1 view .LVU701
 2203              		.loc 1 487 33 is_stmt 0 view .LVU702
 2204 002e B5F90260 		ldrsh	r6, [r5, #2]
 2205              		.loc 1 487 27 view .LVU703
 2206 0032 7642     		rsbs	r6, r6, #0
 2207              		.loc 1 487 38 view .LVU704
 2208 0034 06FB0CF6 		mul	r6, r6, ip
 2209              		.loc 1 487 46 view .LVU705
 2210 0038 3612     		asrs	r6, r6, #8
 2211              		.loc 1 487 52 view .LVU706
 2212 003a 013E     		subs	r6, r6, #1
 2213 003c B3B2     		uxth	r3, r6
 2214              		.loc 1 487 13 view .LVU707
 2215 003e 6680     		strh	r6, [r4, #2]	@ movhi
 488:lvgl/src/draw/lv_img_buf.c ****     res->x2 = (((int32_t)(w - pivot->x) * zoom) >> 8) + 2;
 2216              		.loc 1 488 5 is_stmt 1 view .LVU708
 2217              		.loc 1 488 36 is_stmt 0 view .LVU709
 2218 0040 B5F90060 		ldrsh	r6, [r5]
 2219              		.loc 1 488 29 view .LVU710
 2220 0044 891B     		subs	r1, r1, r6
 2221              	.LVL267:
 2222              		.loc 1 488 41 view .LVU711
 2223 0046 01FB0CF1 		mul	r1, r1, ip
 2224              		.loc 1 488 49 view .LVU712
 2225 004a 0912     		asrs	r1, r1, #8
 2226              		.loc 1 488 55 view .LVU713
 2227 004c 0231     		adds	r1, r1, #2
 2228 004e 8EB2     		uxth	r6, r1
 2229              		.loc 1 488 13 view .LVU714
 2230 0050 A180     		strh	r1, [r4, #4]	@ movhi
 489:lvgl/src/draw/lv_img_buf.c ****     res->y2 = (((int32_t)(h - pivot->y) * zoom) >> 8) + 2;
 2231              		.loc 1 489 5 is_stmt 1 view .LVU715
 2232              		.loc 1 489 36 is_stmt 0 view .LVU716
 2233 0052 B5F90210 		ldrsh	r1, [r5, #2]
 2234              		.loc 1 489 29 view .LVU717
 2235 0056 521A     		subs	r2, r2, r1
 2236              	.LVL268:
 2237              		.loc 1 489 41 view .LVU718
 2238 0058 02FB0CF2 		mul	r2, r2, ip
ARM GAS  C:\usertemp\ccFesu0W.s 			page 70


 2239              		.loc 1 489 49 view .LVU719
 2240 005c 1212     		asrs	r2, r2, #8
 2241              		.loc 1 489 55 view .LVU720
 2242 005e 0232     		adds	r2, r2, #2
 2243 0060 91B2     		uxth	r1, r2
 2244              		.loc 1 489 13 view .LVU721
 2245 0062 E280     		strh	r2, [r4, #6]	@ movhi
 490:lvgl/src/draw/lv_img_buf.c **** 
 491:lvgl/src/draw/lv_img_buf.c ****     if(angle == 0) {
 2246              		.loc 1 491 5 is_stmt 1 view .LVU722
 2247              		.loc 1 491 7 is_stmt 0 view .LVU723
 2248 0064 B8B9     		cbnz	r0, .L120
 492:lvgl/src/draw/lv_img_buf.c ****         res->x1 += pivot->x;
 2249              		.loc 1 492 9 is_stmt 1 view .LVU724
 2250              		.loc 1 492 25 is_stmt 0 view .LVU725
 2251 0066 2A88     		ldrh	r2, [r5]
 2252              		.loc 1 492 17 view .LVU726
 2253 0068 9644     		add	lr, lr, r2
 2254 006a A4F800E0 		strh	lr, [r4]	@ movhi
 493:lvgl/src/draw/lv_img_buf.c ****         res->y1 += pivot->y;
 2255              		.loc 1 493 9 is_stmt 1 view .LVU727
 2256              		.loc 1 493 25 is_stmt 0 view .LVU728
 2257 006e 6A88     		ldrh	r2, [r5, #2]
 2258              		.loc 1 493 17 view .LVU729
 2259 0070 1344     		add	r3, r3, r2
 2260 0072 6380     		strh	r3, [r4, #2]	@ movhi
 494:lvgl/src/draw/lv_img_buf.c ****         res->x2 += pivot->x;
 2261              		.loc 1 494 9 is_stmt 1 view .LVU730
 2262              		.loc 1 494 25 is_stmt 0 view .LVU731
 2263 0074 2B88     		ldrh	r3, [r5]
 2264              		.loc 1 494 17 view .LVU732
 2265 0076 1E44     		add	r6, r6, r3
 2266 0078 A680     		strh	r6, [r4, #4]	@ movhi
 495:lvgl/src/draw/lv_img_buf.c ****         res->y2 += pivot->y;
 2267              		.loc 1 495 9 is_stmt 1 view .LVU733
 2268              		.loc 1 495 25 is_stmt 0 view .LVU734
 2269 007a 6B88     		ldrh	r3, [r5, #2]
 2270              		.loc 1 495 17 view .LVU735
 2271 007c 1944     		add	r1, r1, r3
 2272 007e E180     		strh	r1, [r4, #6]	@ movhi
 496:lvgl/src/draw/lv_img_buf.c ****         return;
 2273              		.loc 1 496 9 is_stmt 1 view .LVU736
 2274 0080 06E0     		b	.L117
 2275              	.LVL269:
 2276              	.L123:
 479:lvgl/src/draw/lv_img_buf.c ****         res->y1 = 0;
 2277              		.loc 1 479 9 view .LVU737
 479:lvgl/src/draw/lv_img_buf.c ****         res->y1 = 0;
 2278              		.loc 1 479 17 is_stmt 0 view .LVU738
 2279 0082 0023     		movs	r3, #0
 2280              	.LVL270:
 479:lvgl/src/draw/lv_img_buf.c ****         res->y1 = 0;
 2281              		.loc 1 479 17 view .LVU739
 2282 0084 0380     		strh	r3, [r0]	@ movhi
 480:lvgl/src/draw/lv_img_buf.c ****         res->x2 = w - 1;
 2283              		.loc 1 480 9 is_stmt 1 view .LVU740
 480:lvgl/src/draw/lv_img_buf.c ****         res->x2 = w - 1;
ARM GAS  C:\usertemp\ccFesu0W.s 			page 71


 2284              		.loc 1 480 17 is_stmt 0 view .LVU741
 2285 0086 4380     		strh	r3, [r0, #2]	@ movhi
 481:lvgl/src/draw/lv_img_buf.c ****         res->y2 = h - 1;
 2286              		.loc 1 481 9 is_stmt 1 view .LVU742
 481:lvgl/src/draw/lv_img_buf.c ****         res->y2 = h - 1;
 2287              		.loc 1 481 21 is_stmt 0 view .LVU743
 2288 0088 0139     		subs	r1, r1, #1
 2289              	.LVL271:
 481:lvgl/src/draw/lv_img_buf.c ****         res->y2 = h - 1;
 2290              		.loc 1 481 17 view .LVU744
 2291 008a 8180     		strh	r1, [r0, #4]	@ movhi
 482:lvgl/src/draw/lv_img_buf.c ****         return;
 2292              		.loc 1 482 9 is_stmt 1 view .LVU745
 482:lvgl/src/draw/lv_img_buf.c ****         return;
 2293              		.loc 1 482 21 is_stmt 0 view .LVU746
 2294 008c 013A     		subs	r2, r2, #1
 2295              	.LVL272:
 482:lvgl/src/draw/lv_img_buf.c ****         return;
 2296              		.loc 1 482 17 view .LVU747
 2297 008e C280     		strh	r2, [r0, #6]	@ movhi
 483:lvgl/src/draw/lv_img_buf.c ****     }
 2298              		.loc 1 483 9 is_stmt 1 view .LVU748
 2299              	.LVL273:
 2300              	.L117:
 497:lvgl/src/draw/lv_img_buf.c ****     }
 498:lvgl/src/draw/lv_img_buf.c **** 
 499:lvgl/src/draw/lv_img_buf.c ****     int32_t angle_low = angle / 10;
 500:lvgl/src/draw/lv_img_buf.c ****     int32_t angle_high = angle_low + 1;
 501:lvgl/src/draw/lv_img_buf.c ****     int32_t angle_rem = angle  - (angle_low * 10);
 502:lvgl/src/draw/lv_img_buf.c **** 
 503:lvgl/src/draw/lv_img_buf.c ****     int32_t s1 = lv_trigo_sin(angle_low);
 504:lvgl/src/draw/lv_img_buf.c ****     int32_t s2 = lv_trigo_sin(angle_high);
 505:lvgl/src/draw/lv_img_buf.c **** 
 506:lvgl/src/draw/lv_img_buf.c ****     int32_t c1 = lv_trigo_sin(angle_low + 90);
 507:lvgl/src/draw/lv_img_buf.c ****     int32_t c2 = lv_trigo_sin(angle_high + 90);
 508:lvgl/src/draw/lv_img_buf.c **** 
 509:lvgl/src/draw/lv_img_buf.c ****     int32_t sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
 510:lvgl/src/draw/lv_img_buf.c ****     int32_t cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
 511:lvgl/src/draw/lv_img_buf.c **** 
 512:lvgl/src/draw/lv_img_buf.c ****     /*Use smaller value to avoid overflow*/
 513:lvgl/src/draw/lv_img_buf.c ****     sinma = sinma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
 514:lvgl/src/draw/lv_img_buf.c ****     cosma = cosma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
 515:lvgl/src/draw/lv_img_buf.c **** 
 516:lvgl/src/draw/lv_img_buf.c ****     lv_point_t lt;
 517:lvgl/src/draw/lv_img_buf.c ****     lv_point_t rt;
 518:lvgl/src/draw/lv_img_buf.c ****     lv_point_t lb;
 519:lvgl/src/draw/lv_img_buf.c ****     lv_point_t rb;
 520:lvgl/src/draw/lv_img_buf.c **** 
 521:lvgl/src/draw/lv_img_buf.c ****     lv_coord_t xt;
 522:lvgl/src/draw/lv_img_buf.c ****     lv_coord_t yt;
 523:lvgl/src/draw/lv_img_buf.c **** 
 524:lvgl/src/draw/lv_img_buf.c ****     xt = res->x1;
 525:lvgl/src/draw/lv_img_buf.c ****     yt = res->y1;
 526:lvgl/src/draw/lv_img_buf.c ****     lt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 527:lvgl/src/draw/lv_img_buf.c ****     lt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 528:lvgl/src/draw/lv_img_buf.c **** 
 529:lvgl/src/draw/lv_img_buf.c ****     xt = res->x2;
ARM GAS  C:\usertemp\ccFesu0W.s 			page 72


 530:lvgl/src/draw/lv_img_buf.c ****     yt = res->y1;
 531:lvgl/src/draw/lv_img_buf.c ****     rt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 532:lvgl/src/draw/lv_img_buf.c ****     rt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 533:lvgl/src/draw/lv_img_buf.c **** 
 534:lvgl/src/draw/lv_img_buf.c ****     xt = res->x1;
 535:lvgl/src/draw/lv_img_buf.c ****     yt = res->y2;
 536:lvgl/src/draw/lv_img_buf.c ****     lb.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 537:lvgl/src/draw/lv_img_buf.c ****     lb.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 538:lvgl/src/draw/lv_img_buf.c **** 
 539:lvgl/src/draw/lv_img_buf.c ****     xt = res->x2;
 540:lvgl/src/draw/lv_img_buf.c ****     yt = res->y2;
 541:lvgl/src/draw/lv_img_buf.c ****     rb.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 542:lvgl/src/draw/lv_img_buf.c ****     rb.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 543:lvgl/src/draw/lv_img_buf.c **** 
 544:lvgl/src/draw/lv_img_buf.c ****     res->x1 = LV_MIN4(lb.x, lt.x, rb.x, rt.x);
 545:lvgl/src/draw/lv_img_buf.c ****     res->x2 = LV_MAX4(lb.x, lt.x, rb.x, rt.x);
 546:lvgl/src/draw/lv_img_buf.c ****     res->y1 = LV_MIN4(lb.y, lt.y, rb.y, rt.y);
 547:lvgl/src/draw/lv_img_buf.c ****     res->y2 = LV_MAX4(lb.y, lt.y, rb.y, rt.y);
 548:lvgl/src/draw/lv_img_buf.c **** #else
 549:lvgl/src/draw/lv_img_buf.c ****     LV_UNUSED(angle);
 550:lvgl/src/draw/lv_img_buf.c ****     LV_UNUSED(zoom);
 551:lvgl/src/draw/lv_img_buf.c ****     LV_UNUSED(pivot);
 552:lvgl/src/draw/lv_img_buf.c ****     res->x1 = 0;
 553:lvgl/src/draw/lv_img_buf.c ****     res->y1 = 0;
 554:lvgl/src/draw/lv_img_buf.c ****     res->x2 = w - 1;
 555:lvgl/src/draw/lv_img_buf.c ****     res->y2 = h - 1;
 556:lvgl/src/draw/lv_img_buf.c **** #endif
 557:lvgl/src/draw/lv_img_buf.c **** }
 2301              		.loc 1 557 1 is_stmt 0 view .LVU749
 2302 0090 05B0     		add	sp, sp, #20
 2303              	.LCFI21:
 2304              		.cfi_remember_state
 2305              		.cfi_def_cfa_offset 36
 2306              		@ sp needed
 2307 0092 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 2308              	.LVL274:
 2309              	.L120:
 2310              	.LCFI22:
 2311              		.cfi_restore_state
 499:lvgl/src/draw/lv_img_buf.c ****     int32_t angle_high = angle_low + 1;
 2312              		.loc 1 499 5 is_stmt 1 view .LVU750
 499:lvgl/src/draw/lv_img_buf.c ****     int32_t angle_high = angle_low + 1;
 2313              		.loc 1 499 31 is_stmt 0 view .LVU751
 2314 0096 DFF87091 		ldr	r9, .L124
 2315 009a 89FB0023 		smull	r2, r3, r9, r0
 2316 009e 4FEAE078 		asr	r8, r0, #31
 2317 00a2 C8EBA308 		rsb	r8, r8, r3, asr #2
 2318 00a6 0FFA88F8 		sxth	r8, r8
 2319              	.LVL275:
 500:lvgl/src/draw/lv_img_buf.c ****     int32_t angle_rem = angle  - (angle_low * 10);
 2320              		.loc 1 500 5 is_stmt 1 view .LVU752
 500:lvgl/src/draw/lv_img_buf.c ****     int32_t angle_rem = angle  - (angle_low * 10);
 2321              		.loc 1 500 13 is_stmt 0 view .LVU753
 2322 00aa 08F1010A 		add	r10, r8, #1
 2323              	.LVL276:
 501:lvgl/src/draw/lv_img_buf.c **** 
 2324              		.loc 1 501 5 is_stmt 1 view .LVU754
ARM GAS  C:\usertemp\ccFesu0W.s 			page 73


 501:lvgl/src/draw/lv_img_buf.c **** 
 2325              		.loc 1 501 13 is_stmt 0 view .LVU755
 2326 00ae 6FF00907 		mvn	r7, #9
 2327 00b2 07FB0807 		mla	r7, r7, r8, r0
 2328              	.LVL277:
 503:lvgl/src/draw/lv_img_buf.c ****     int32_t s2 = lv_trigo_sin(angle_high);
 2329              		.loc 1 503 5 is_stmt 1 view .LVU756
 503:lvgl/src/draw/lv_img_buf.c ****     int32_t s2 = lv_trigo_sin(angle_high);
 2330              		.loc 1 503 18 is_stmt 0 view .LVU757
 2331 00b6 4046     		mov	r0, r8
 2332 00b8 FFF7FEFF 		bl	lv_trigo_sin
 2333              	.LVL278:
 2334 00bc 8346     		mov	fp, r0
 2335              	.LVL279:
 504:lvgl/src/draw/lv_img_buf.c **** 
 2336              		.loc 1 504 5 is_stmt 1 view .LVU758
 504:lvgl/src/draw/lv_img_buf.c **** 
 2337              		.loc 1 504 18 is_stmt 0 view .LVU759
 2338 00be 0FFA8AF0 		sxth	r0, r10
 2339              	.LVL280:
 504:lvgl/src/draw/lv_img_buf.c **** 
 2340              		.loc 1 504 18 view .LVU760
 2341 00c2 FFF7FEFF 		bl	lv_trigo_sin
 2342              	.LVL281:
 2343 00c6 0646     		mov	r6, r0
 2344              	.LVL282:
 506:lvgl/src/draw/lv_img_buf.c ****     int32_t c2 = lv_trigo_sin(angle_high + 90);
 2345              		.loc 1 506 5 is_stmt 1 view .LVU761
 506:lvgl/src/draw/lv_img_buf.c ****     int32_t c2 = lv_trigo_sin(angle_high + 90);
 2346              		.loc 1 506 41 is_stmt 0 view .LVU762
 2347 00c8 08F15A00 		add	r0, r8, #90
 2348              	.LVL283:
 506:lvgl/src/draw/lv_img_buf.c ****     int32_t c2 = lv_trigo_sin(angle_high + 90);
 2349              		.loc 1 506 18 view .LVU763
 2350 00cc 00B2     		sxth	r0, r0
 2351 00ce FFF7FEFF 		bl	lv_trigo_sin
 2352              	.LVL284:
 2353 00d2 8046     		mov	r8, r0
 2354              	.LVL285:
 507:lvgl/src/draw/lv_img_buf.c **** 
 2355              		.loc 1 507 5 is_stmt 1 view .LVU764
 507:lvgl/src/draw/lv_img_buf.c **** 
 2356              		.loc 1 507 42 is_stmt 0 view .LVU765
 2357 00d4 0AF15A00 		add	r0, r10, #90
 2358              	.LVL286:
 507:lvgl/src/draw/lv_img_buf.c **** 
 2359              		.loc 1 507 18 view .LVU766
 2360 00d8 00B2     		sxth	r0, r0
 2361 00da FFF7FEFF 		bl	lv_trigo_sin
 2362              	.LVL287:
 509:lvgl/src/draw/lv_img_buf.c ****     int32_t cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
 2363              		.loc 1 509 5 is_stmt 1 view .LVU767
 509:lvgl/src/draw/lv_img_buf.c ****     int32_t cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
 2364              		.loc 1 509 31 is_stmt 0 view .LVU768
 2365 00de C7F10A02 		rsb	r2, r7, #10
 509:lvgl/src/draw/lv_img_buf.c ****     int32_t cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
 2366              		.loc 1 509 49 view .LVU769
ARM GAS  C:\usertemp\ccFesu0W.s 			page 74


 2367 00e2 07FB06F6 		mul	r6, r7, r6
 2368              	.LVL288:
 509:lvgl/src/draw/lv_img_buf.c ****     int32_t cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
 2369              		.loc 1 509 44 view .LVU770
 2370 00e6 0BFB0266 		mla	r6, fp, r2, r6
 509:lvgl/src/draw/lv_img_buf.c ****     int32_t cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
 2371              		.loc 1 509 13 view .LVU771
 2372 00ea 89FB0631 		smull	r3, r1, r9, r6
 2373 00ee F317     		asrs	r3, r6, #31
 2374 00f0 C3EBA103 		rsb	r3, r3, r1, asr #2
 2375              	.LVL289:
 510:lvgl/src/draw/lv_img_buf.c **** 
 2376              		.loc 1 510 5 is_stmt 1 view .LVU772
 510:lvgl/src/draw/lv_img_buf.c **** 
 2377              		.loc 1 510 49 is_stmt 0 view .LVU773
 2378 00f4 07FB00F0 		mul	r0, r7, r0
 2379              	.LVL290:
 510:lvgl/src/draw/lv_img_buf.c **** 
 2380              		.loc 1 510 44 view .LVU774
 2381 00f8 08FB0200 		mla	r0, r8, r2, r0
 510:lvgl/src/draw/lv_img_buf.c **** 
 2382              		.loc 1 510 13 view .LVU775
 2383 00fc 89FB0029 		smull	r2, r9, r9, r0
 2384 0100 C117     		asrs	r1, r0, #31
 2385 0102 C1EBA901 		rsb	r1, r1, r9, asr #2
 2386              	.LVL291:
 513:lvgl/src/draw/lv_img_buf.c ****     cosma = cosma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
 2387              		.loc 1 513 5 is_stmt 1 view .LVU776
 513:lvgl/src/draw/lv_img_buf.c ****     cosma = cosma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
 2388              		.loc 1 513 11 is_stmt 0 view .LVU777
 2389 0106 5B11     		asrs	r3, r3, #5
 2390              	.LVL292:
 514:lvgl/src/draw/lv_img_buf.c **** 
 2391              		.loc 1 514 5 is_stmt 1 view .LVU778
 514:lvgl/src/draw/lv_img_buf.c **** 
 2392              		.loc 1 514 11 is_stmt 0 view .LVU779
 2393 0108 4911     		asrs	r1, r1, #5
 2394              	.LVL293:
 516:lvgl/src/draw/lv_img_buf.c ****     lv_point_t rt;
 2395              		.loc 1 516 5 is_stmt 1 view .LVU780
 517:lvgl/src/draw/lv_img_buf.c ****     lv_point_t lb;
 2396              		.loc 1 517 5 view .LVU781
 518:lvgl/src/draw/lv_img_buf.c ****     lv_point_t rb;
 2397              		.loc 1 518 5 view .LVU782
 519:lvgl/src/draw/lv_img_buf.c **** 
 2398              		.loc 1 519 5 view .LVU783
 521:lvgl/src/draw/lv_img_buf.c ****     lv_coord_t yt;
 2399              		.loc 1 521 5 view .LVU784
 522:lvgl/src/draw/lv_img_buf.c **** 
 2400              		.loc 1 522 5 view .LVU785
 524:lvgl/src/draw/lv_img_buf.c ****     yt = res->y1;
 2401              		.loc 1 524 5 view .LVU786
 524:lvgl/src/draw/lv_img_buf.c ****     yt = res->y1;
 2402              		.loc 1 524 8 is_stmt 0 view .LVU787
 2403 010a B4F90060 		ldrsh	r6, [r4]
 2404              	.LVL294:
 525:lvgl/src/draw/lv_img_buf.c ****     lt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
ARM GAS  C:\usertemp\ccFesu0W.s 			page 75


 2405              		.loc 1 525 5 is_stmt 1 view .LVU788
 525:lvgl/src/draw/lv_img_buf.c ****     lt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 2406              		.loc 1 525 8 is_stmt 0 view .LVU789
 2407 010e B4F90220 		ldrsh	r2, [r4, #2]
 2408              	.LVL295:
 526:lvgl/src/draw/lv_img_buf.c ****     lt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 2409              		.loc 1 526 5 is_stmt 1 view .LVU790
 526:lvgl/src/draw/lv_img_buf.c ****     lt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 2410              		.loc 1 526 20 is_stmt 0 view .LVU791
 2411 0112 01FB06F7 		mul	r7, r1, r6
 2412              	.LVL296:
 526:lvgl/src/draw/lv_img_buf.c ****     lt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 2413              		.loc 1 526 33 view .LVU792
 2414 0116 03FB02F0 		mul	r0, r3, r2
 526:lvgl/src/draw/lv_img_buf.c ****     lt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 2415              		.loc 1 526 25 view .LVU793
 2416 011a A7EB0008 		sub	r8, r7, r0
 2417              	.LVL297:
 526:lvgl/src/draw/lv_img_buf.c ****     lt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 2418              		.loc 1 526 76 view .LVU794
 2419 011e B5F800C0 		ldrh	ip, [r5]
 526:lvgl/src/draw/lv_img_buf.c ****     lt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 2420              		.loc 1 526 69 view .LVU795
 2421 0122 0CEBA828 		add	r8, ip, r8, asr #10
 2422 0126 0FFA88F8 		sxth	r8, r8
 526:lvgl/src/draw/lv_img_buf.c ****     lt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 2423              		.loc 1 526 10 view .LVU796
 2424 012a ADF80C80 		strh	r8, [sp, #12]	@ movhi
 527:lvgl/src/draw/lv_img_buf.c **** 
 2425              		.loc 1 527 5 is_stmt 1 view .LVU797
 527:lvgl/src/draw/lv_img_buf.c **** 
 2426              		.loc 1 527 20 is_stmt 0 view .LVU798
 2427 012e 03FB06F6 		mul	r6, r3, r6
 2428              	.LVL298:
 527:lvgl/src/draw/lv_img_buf.c **** 
 2429              		.loc 1 527 33 view .LVU799
 2430 0132 01FB02F2 		mul	r2, r1, r2
 2431              	.LVL299:
 527:lvgl/src/draw/lv_img_buf.c **** 
 2432              		.loc 1 527 25 view .LVU800
 2433 0136 06EB020E 		add	lr, r6, r2
 527:lvgl/src/draw/lv_img_buf.c **** 
 2434              		.loc 1 527 76 view .LVU801
 2435 013a 6D88     		ldrh	r5, [r5, #2]
 527:lvgl/src/draw/lv_img_buf.c **** 
 2436              		.loc 1 527 69 view .LVU802
 2437 013c 05EBAE2E 		add	lr, r5, lr, asr #10
 2438 0140 0FFA8EFE 		sxth	lr, lr
 527:lvgl/src/draw/lv_img_buf.c **** 
 2439              		.loc 1 527 10 view .LVU803
 2440 0144 ADF80EE0 		strh	lr, [sp, #14]	@ movhi
 529:lvgl/src/draw/lv_img_buf.c ****     yt = res->y1;
 2441              		.loc 1 529 5 is_stmt 1 view .LVU804
 529:lvgl/src/draw/lv_img_buf.c ****     yt = res->y1;
 2442              		.loc 1 529 8 is_stmt 0 view .LVU805
 2443 0148 B4F90490 		ldrsh	r9, [r4, #4]
 2444              	.LVL300:
ARM GAS  C:\usertemp\ccFesu0W.s 			page 76


 530:lvgl/src/draw/lv_img_buf.c ****     rt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 2445              		.loc 1 530 5 is_stmt 1 view .LVU806
 531:lvgl/src/draw/lv_img_buf.c ****     rt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 2446              		.loc 1 531 5 view .LVU807
 531:lvgl/src/draw/lv_img_buf.c ****     rt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 2447              		.loc 1 531 20 is_stmt 0 view .LVU808
 2448 014c 01FB09FB 		mul	fp, r1, r9
 2449              	.LVL301:
 531:lvgl/src/draw/lv_img_buf.c ****     rt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 2450              		.loc 1 531 25 view .LVU809
 2451 0150 ABEB0000 		sub	r0, fp, r0
 531:lvgl/src/draw/lv_img_buf.c ****     rt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 2452              		.loc 1 531 69 view .LVU810
 2453 0154 0CEBA020 		add	r0, ip, r0, asr #10
 2454 0158 00B2     		sxth	r0, r0
 531:lvgl/src/draw/lv_img_buf.c ****     rt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 2455              		.loc 1 531 10 view .LVU811
 2456 015a ADF80800 		strh	r0, [sp, #8]	@ movhi
 532:lvgl/src/draw/lv_img_buf.c **** 
 2457              		.loc 1 532 5 is_stmt 1 view .LVU812
 532:lvgl/src/draw/lv_img_buf.c **** 
 2458              		.loc 1 532 20 is_stmt 0 view .LVU813
 2459 015e 03FB09F9 		mul	r9, r3, r9
 2460              	.LVL302:
 532:lvgl/src/draw/lv_img_buf.c **** 
 2461              		.loc 1 532 25 view .LVU814
 2462 0162 4A44     		add	r2, r2, r9
 532:lvgl/src/draw/lv_img_buf.c **** 
 2463              		.loc 1 532 69 view .LVU815
 2464 0164 05EBA222 		add	r2, r5, r2, asr #10
 2465 0168 12B2     		sxth	r2, r2
 532:lvgl/src/draw/lv_img_buf.c **** 
 2466              		.loc 1 532 10 view .LVU816
 2467 016a ADF80A20 		strh	r2, [sp, #10]	@ movhi
 534:lvgl/src/draw/lv_img_buf.c ****     yt = res->y2;
 2468              		.loc 1 534 5 is_stmt 1 view .LVU817
 2469              	.LVL303:
 535:lvgl/src/draw/lv_img_buf.c ****     lb.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 2470              		.loc 1 535 5 view .LVU818
 535:lvgl/src/draw/lv_img_buf.c ****     lb.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 2471              		.loc 1 535 8 is_stmt 0 view .LVU819
 2472 016e B4F906A0 		ldrsh	r10, [r4, #6]
 2473              	.LVL304:
 536:lvgl/src/draw/lv_img_buf.c ****     lb.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 2474              		.loc 1 536 5 is_stmt 1 view .LVU820
 536:lvgl/src/draw/lv_img_buf.c ****     lb.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 2475              		.loc 1 536 33 is_stmt 0 view .LVU821
 2476 0172 03FB0AF3 		mul	r3, r3, r10
 2477              	.LVL305:
 536:lvgl/src/draw/lv_img_buf.c ****     lb.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 2478              		.loc 1 536 25 view .LVU822
 2479 0176 FF1A     		subs	r7, r7, r3
 536:lvgl/src/draw/lv_img_buf.c ****     lb.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 2480              		.loc 1 536 69 view .LVU823
 2481 0178 0CEBA727 		add	r7, ip, r7, asr #10
 2482 017c 3FB2     		sxth	r7, r7
 536:lvgl/src/draw/lv_img_buf.c ****     lb.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
ARM GAS  C:\usertemp\ccFesu0W.s 			page 77


 2483              		.loc 1 536 10 view .LVU824
 2484 017e ADF80470 		strh	r7, [sp, #4]	@ movhi
 537:lvgl/src/draw/lv_img_buf.c **** 
 2485              		.loc 1 537 5 is_stmt 1 view .LVU825
 537:lvgl/src/draw/lv_img_buf.c **** 
 2486              		.loc 1 537 33 is_stmt 0 view .LVU826
 2487 0182 01FB0AFA 		mul	r10, r1, r10
 2488              	.LVL306:
 537:lvgl/src/draw/lv_img_buf.c **** 
 2489              		.loc 1 537 25 view .LVU827
 2490 0186 5644     		add	r6, r6, r10
 537:lvgl/src/draw/lv_img_buf.c **** 
 2491              		.loc 1 537 69 view .LVU828
 2492 0188 05EBA626 		add	r6, r5, r6, asr #10
 2493 018c 36B2     		sxth	r6, r6
 537:lvgl/src/draw/lv_img_buf.c **** 
 2494              		.loc 1 537 10 view .LVU829
 2495 018e ADF80660 		strh	r6, [sp, #6]	@ movhi
 539:lvgl/src/draw/lv_img_buf.c ****     yt = res->y2;
 2496              		.loc 1 539 5 is_stmt 1 view .LVU830
 2497              	.LVL307:
 540:lvgl/src/draw/lv_img_buf.c ****     rb.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 2498              		.loc 1 540 5 view .LVU831
 541:lvgl/src/draw/lv_img_buf.c ****     rb.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 2499              		.loc 1 541 5 view .LVU832
 541:lvgl/src/draw/lv_img_buf.c ****     rb.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 2500              		.loc 1 541 25 is_stmt 0 view .LVU833
 2501 0192 ABEB030B 		sub	fp, fp, r3
 541:lvgl/src/draw/lv_img_buf.c ****     rb.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 2502              		.loc 1 541 69 view .LVU834
 2503 0196 0CEBAB2C 		add	ip, ip, fp, asr #10
 2504 019a 0FFA8CFC 		sxth	ip, ip
 541:lvgl/src/draw/lv_img_buf.c ****     rb.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 2505              		.loc 1 541 10 view .LVU835
 2506 019e ADF800C0 		strh	ip, [sp]	@ movhi
 542:lvgl/src/draw/lv_img_buf.c **** 
 2507              		.loc 1 542 5 is_stmt 1 view .LVU836
 542:lvgl/src/draw/lv_img_buf.c **** 
 2508              		.loc 1 542 25 is_stmt 0 view .LVU837
 2509 01a2 D144     		add	r9, r9, r10
 542:lvgl/src/draw/lv_img_buf.c **** 
 2510              		.loc 1 542 69 view .LVU838
 2511 01a4 05EBA925 		add	r5, r5, r9, asr #10
 2512 01a8 2DB2     		sxth	r5, r5
 542:lvgl/src/draw/lv_img_buf.c **** 
 2513              		.loc 1 542 10 view .LVU839
 2514 01aa ADF80250 		strh	r5, [sp, #2]	@ movhi
 544:lvgl/src/draw/lv_img_buf.c ****     res->x2 = LV_MAX4(lb.x, lt.x, rb.x, rt.x);
 2515              		.loc 1 544 5 is_stmt 1 view .LVU840
 544:lvgl/src/draw/lv_img_buf.c ****     res->x2 = LV_MAX4(lb.x, lt.x, rb.x, rt.x);
 2516              		.loc 1 544 15 is_stmt 0 view .LVU841
 2517 01ae 0346     		mov	r3, r0
 2518 01b0 6045     		cmp	r0, ip
 2519 01b2 A8BF     		it	ge
 2520 01b4 6346     		movge	r3, ip
 2521 01b6 4146     		mov	r1, r8
 2522              	.LVL308:
ARM GAS  C:\usertemp\ccFesu0W.s 			page 78


 544:lvgl/src/draw/lv_img_buf.c ****     res->x2 = LV_MAX4(lb.x, lt.x, rb.x, rt.x);
 2523              		.loc 1 544 15 view .LVU842
 2524 01b8 B845     		cmp	r8, r7
 2525 01ba A8BF     		it	ge
 2526 01bc 3946     		movge	r1, r7
 2527 01be 8B42     		cmp	r3, r1
 2528 01c0 A8BF     		it	ge
 2529 01c2 0B46     		movge	r3, r1
 544:lvgl/src/draw/lv_img_buf.c ****     res->x2 = LV_MAX4(lb.x, lt.x, rb.x, rt.x);
 2530              		.loc 1 544 13 view .LVU843
 2531 01c4 2380     		strh	r3, [r4]	@ movhi
 545:lvgl/src/draw/lv_img_buf.c ****     res->y1 = LV_MIN4(lb.y, lt.y, rb.y, rt.y);
 2532              		.loc 1 545 5 is_stmt 1 view .LVU844
 545:lvgl/src/draw/lv_img_buf.c ****     res->y1 = LV_MIN4(lb.y, lt.y, rb.y, rt.y);
 2533              		.loc 1 545 15 is_stmt 0 view .LVU845
 2534 01c6 6045     		cmp	r0, ip
 2535 01c8 B8BF     		it	lt
 2536 01ca 6046     		movlt	r0, ip
 2537 01cc B845     		cmp	r8, r7
 2538 01ce B8BF     		it	lt
 2539 01d0 B846     		movlt	r8, r7
 2540 01d2 4045     		cmp	r0, r8
 2541 01d4 B8BF     		it	lt
 2542 01d6 4046     		movlt	r0, r8
 545:lvgl/src/draw/lv_img_buf.c ****     res->y1 = LV_MIN4(lb.y, lt.y, rb.y, rt.y);
 2543              		.loc 1 545 13 view .LVU846
 2544 01d8 A080     		strh	r0, [r4, #4]	@ movhi
 2545              	.LVL309:
 546:lvgl/src/draw/lv_img_buf.c ****     res->y2 = LV_MAX4(lb.y, lt.y, rb.y, rt.y);
 2546              		.loc 1 546 5 is_stmt 1 view .LVU847
 546:lvgl/src/draw/lv_img_buf.c ****     res->y2 = LV_MAX4(lb.y, lt.y, rb.y, rt.y);
 2547              		.loc 1 546 15 is_stmt 0 view .LVU848
 2548 01da 1346     		mov	r3, r2
 2549 01dc AA42     		cmp	r2, r5
 2550 01de A8BF     		it	ge
 2551 01e0 2B46     		movge	r3, r5
 2552 01e2 7146     		mov	r1, lr
 2553 01e4 B645     		cmp	lr, r6
 2554 01e6 A8BF     		it	ge
 2555 01e8 3146     		movge	r1, r6
 2556 01ea 8B42     		cmp	r3, r1
 2557 01ec A8BF     		it	ge
 2558 01ee 0B46     		movge	r3, r1
 546:lvgl/src/draw/lv_img_buf.c ****     res->y2 = LV_MAX4(lb.y, lt.y, rb.y, rt.y);
 2559              		.loc 1 546 13 view .LVU849
 2560 01f0 6380     		strh	r3, [r4, #2]	@ movhi
 547:lvgl/src/draw/lv_img_buf.c **** #else
 2561              		.loc 1 547 5 is_stmt 1 view .LVU850
 547:lvgl/src/draw/lv_img_buf.c **** #else
 2562              		.loc 1 547 15 is_stmt 0 view .LVU851
 2563 01f2 AA42     		cmp	r2, r5
 2564 01f4 B8BF     		it	lt
 2565 01f6 2A46     		movlt	r2, r5
 2566 01f8 B645     		cmp	lr, r6
 2567 01fa B8BF     		it	lt
 2568 01fc B646     		movlt	lr, r6
 2569 01fe 7245     		cmp	r2, lr
ARM GAS  C:\usertemp\ccFesu0W.s 			page 79


 2570 0200 B8BF     		it	lt
 2571 0202 7246     		movlt	r2, lr
 547:lvgl/src/draw/lv_img_buf.c **** #else
 2572              		.loc 1 547 13 view .LVU852
 2573 0204 E280     		strh	r2, [r4, #6]	@ movhi
 2574              	.LVL310:
 547:lvgl/src/draw/lv_img_buf.c **** #else
 2575              		.loc 1 547 13 view .LVU853
 2576 0206 43E7     		b	.L117
 2577              	.L125:
 2578              		.align	2
 2579              	.L124:
 2580 0208 67666666 		.word	1717986919
 2581              		.cfi_endproc
 2582              	.LFE64:
 2584              		.section	.text._lv_img_buf_transform_anti_alias,"ax",%progbits
 2585              		.align	1
 2586              		.global	_lv_img_buf_transform_anti_alias
 2587              		.syntax unified
 2588              		.thumb
 2589              		.thumb_func
 2591              	_lv_img_buf_transform_anti_alias:
 2592              	.LVL311:
 2593              	.LFB66:
 558:lvgl/src/draw/lv_img_buf.c **** 
 559:lvgl/src/draw/lv_img_buf.c **** 
 560:lvgl/src/draw/lv_img_buf.c **** #if LV_DRAW_COMPLEX
 561:lvgl/src/draw/lv_img_buf.c **** /**
 562:lvgl/src/draw/lv_img_buf.c ****  * Get which color and opa would come to a pixel if it were rotated
 563:lvgl/src/draw/lv_img_buf.c ****  * @param dsc a descriptor initialized by `lv_img_buf_rotate_init`
 564:lvgl/src/draw/lv_img_buf.c ****  * @param x the coordinate which color and opa should be get
 565:lvgl/src/draw/lv_img_buf.c ****  * @param y the coordinate which color and opa should be get
 566:lvgl/src/draw/lv_img_buf.c ****  * @return true: there is valid pixel on these x/y coordinates; false: the rotated pixel was out of
 567:lvgl/src/draw/lv_img_buf.c ****  * @note the result is written back to `dsc->res_color` and `dsc->res_opa`
 568:lvgl/src/draw/lv_img_buf.c ****  */
 569:lvgl/src/draw/lv_img_buf.c **** bool _lv_img_buf_transform(lv_img_transform_dsc_t * dsc, lv_coord_t x, lv_coord_t y)
 570:lvgl/src/draw/lv_img_buf.c **** {
 571:lvgl/src/draw/lv_img_buf.c ****     const uint8_t * src_u8 = (const uint8_t *)dsc->cfg.src;
 572:lvgl/src/draw/lv_img_buf.c **** 
 573:lvgl/src/draw/lv_img_buf.c ****     /*Get the target point relative coordinates to the pivot*/
 574:lvgl/src/draw/lv_img_buf.c ****     int32_t xt = x - dsc->cfg.pivot_x;
 575:lvgl/src/draw/lv_img_buf.c ****     int32_t yt = y - dsc->cfg.pivot_y;
 576:lvgl/src/draw/lv_img_buf.c **** 
 577:lvgl/src/draw/lv_img_buf.c ****     int32_t xs;
 578:lvgl/src/draw/lv_img_buf.c ****     int32_t ys;
 579:lvgl/src/draw/lv_img_buf.c ****     if(dsc->cfg.zoom == LV_IMG_ZOOM_NONE) {
 580:lvgl/src/draw/lv_img_buf.c ****         /*Get the source pixel from the upscaled image*/
 581:lvgl/src/draw/lv_img_buf.c ****         xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc
 582:lvgl/src/draw/lv_img_buf.c ****         ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc
 583:lvgl/src/draw/lv_img_buf.c ****     }
 584:lvgl/src/draw/lv_img_buf.c ****     else if(dsc->cfg.angle == 0) {
 585:lvgl/src/draw/lv_img_buf.c ****         xt = (int32_t)((int32_t)xt * dsc->tmp.zoom_inv) >> _LV_ZOOM_INV_UPSCALE;
 586:lvgl/src/draw/lv_img_buf.c ****         yt = (int32_t)((int32_t)yt * dsc->tmp.zoom_inv) >> _LV_ZOOM_INV_UPSCALE;
 587:lvgl/src/draw/lv_img_buf.c ****         xs = xt + dsc->tmp.pivot_x_256;
 588:lvgl/src/draw/lv_img_buf.c ****         ys = yt + dsc->tmp.pivot_y_256;
 589:lvgl/src/draw/lv_img_buf.c ****     }
 590:lvgl/src/draw/lv_img_buf.c ****     else {
ARM GAS  C:\usertemp\ccFesu0W.s 			page 80


 591:lvgl/src/draw/lv_img_buf.c ****         xt = (int32_t)((int32_t)xt * dsc->tmp.zoom_inv) >> _LV_ZOOM_INV_UPSCALE;
 592:lvgl/src/draw/lv_img_buf.c ****         yt = (int32_t)((int32_t)yt * dsc->tmp.zoom_inv) >> _LV_ZOOM_INV_UPSCALE;
 593:lvgl/src/draw/lv_img_buf.c ****         xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tm
 594:lvgl/src/draw/lv_img_buf.c ****         ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tm
 595:lvgl/src/draw/lv_img_buf.c ****     }
 596:lvgl/src/draw/lv_img_buf.c **** 
 597:lvgl/src/draw/lv_img_buf.c ****     /*Get the integer part of the source pixel*/
 598:lvgl/src/draw/lv_img_buf.c ****     int32_t xs_int = xs >> 8;
 599:lvgl/src/draw/lv_img_buf.c ****     int32_t ys_int = ys >> 8;
 600:lvgl/src/draw/lv_img_buf.c **** 
 601:lvgl/src/draw/lv_img_buf.c ****     if(xs_int >= dsc->cfg.src_w) return false;
 602:lvgl/src/draw/lv_img_buf.c ****     else if(xs_int < 0) return false;
 603:lvgl/src/draw/lv_img_buf.c **** 
 604:lvgl/src/draw/lv_img_buf.c ****     if(ys_int >= dsc->cfg.src_h) return false;
 605:lvgl/src/draw/lv_img_buf.c ****     else if(ys_int < 0) return false;
 606:lvgl/src/draw/lv_img_buf.c **** 
 607:lvgl/src/draw/lv_img_buf.c ****     uint8_t px_size;
 608:lvgl/src/draw/lv_img_buf.c ****     uint32_t pxi;
 609:lvgl/src/draw/lv_img_buf.c ****     if(dsc->tmp.native_color) {
 610:lvgl/src/draw/lv_img_buf.c ****         if(dsc->tmp.has_alpha == 0) {
 611:lvgl/src/draw/lv_img_buf.c ****             px_size = LV_COLOR_SIZE >> 3;
 612:lvgl/src/draw/lv_img_buf.c **** 
 613:lvgl/src/draw/lv_img_buf.c ****             pxi     = dsc->cfg.src_w * ys_int * px_size + xs_int * px_size;
 614:lvgl/src/draw/lv_img_buf.c ****             lv_memcpy_small(&dsc->res.color, &src_u8[pxi], px_size);
 615:lvgl/src/draw/lv_img_buf.c ****         }
 616:lvgl/src/draw/lv_img_buf.c ****         else {
 617:lvgl/src/draw/lv_img_buf.c ****             px_size = LV_IMG_PX_SIZE_ALPHA_BYTE;
 618:lvgl/src/draw/lv_img_buf.c ****             pxi     = dsc->cfg.src_w * ys_int * px_size + xs_int * px_size;
 619:lvgl/src/draw/lv_img_buf.c ****             lv_memcpy_small(&dsc->res.color, &src_u8[pxi], px_size - 1);
 620:lvgl/src/draw/lv_img_buf.c ****             dsc->res.opa = src_u8[pxi + px_size - 1];
 621:lvgl/src/draw/lv_img_buf.c ****         }
 622:lvgl/src/draw/lv_img_buf.c ****     }
 623:lvgl/src/draw/lv_img_buf.c ****     else {
 624:lvgl/src/draw/lv_img_buf.c ****         pxi = 0; /*unused*/
 625:lvgl/src/draw/lv_img_buf.c ****         px_size = 0;    /*unused*/
 626:lvgl/src/draw/lv_img_buf.c ****         dsc->res.color = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, xs_int, ys_int, dsc->cfg.color)
 627:lvgl/src/draw/lv_img_buf.c ****         dsc->res.opa = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, xs_int, ys_int);
 628:lvgl/src/draw/lv_img_buf.c ****     }
 629:lvgl/src/draw/lv_img_buf.c **** 
 630:lvgl/src/draw/lv_img_buf.c ****     if(dsc->tmp.chroma_keyed) {
 631:lvgl/src/draw/lv_img_buf.c ****         lv_color_t ct = LV_COLOR_CHROMA_KEY;
 632:lvgl/src/draw/lv_img_buf.c ****         if(dsc->res.color.full == ct.full) return false;
 633:lvgl/src/draw/lv_img_buf.c ****     }
 634:lvgl/src/draw/lv_img_buf.c **** 
 635:lvgl/src/draw/lv_img_buf.c ****     if(dsc->cfg.antialias == false) return true;
 636:lvgl/src/draw/lv_img_buf.c **** 
 637:lvgl/src/draw/lv_img_buf.c ****     dsc->tmp.xs = xs;
 638:lvgl/src/draw/lv_img_buf.c ****     dsc->tmp.ys = ys;
 639:lvgl/src/draw/lv_img_buf.c ****     dsc->tmp.xs_int = xs_int;
 640:lvgl/src/draw/lv_img_buf.c ****     dsc->tmp.ys_int = ys_int;
 641:lvgl/src/draw/lv_img_buf.c ****     dsc->tmp.pxi = pxi;
 642:lvgl/src/draw/lv_img_buf.c ****     dsc->tmp.px_size = px_size;
 643:lvgl/src/draw/lv_img_buf.c **** 
 644:lvgl/src/draw/lv_img_buf.c ****     bool ret;
 645:lvgl/src/draw/lv_img_buf.c ****     ret = _lv_img_buf_transform_anti_alias(dsc);
 646:lvgl/src/draw/lv_img_buf.c **** 
 647:lvgl/src/draw/lv_img_buf.c ****     return ret;
ARM GAS  C:\usertemp\ccFesu0W.s 			page 81


 648:lvgl/src/draw/lv_img_buf.c **** }
 649:lvgl/src/draw/lv_img_buf.c **** 
 650:lvgl/src/draw/lv_img_buf.c **** /**
 651:lvgl/src/draw/lv_img_buf.c ****  * Continue transformation by taking the neighbors into account
 652:lvgl/src/draw/lv_img_buf.c ****  * @param dsc pointer to the transformation descriptor
 653:lvgl/src/draw/lv_img_buf.c ****  */
 654:lvgl/src/draw/lv_img_buf.c **** bool _lv_img_buf_transform_anti_alias(lv_img_transform_dsc_t * dsc)
 655:lvgl/src/draw/lv_img_buf.c **** {
 2594              		.loc 1 655 1 is_stmt 1 view -0
 2595              		.cfi_startproc
 2596              		@ args = 0, pretend = 0, frame = 32
 2597              		@ frame_needed = 0, uses_anonymous_args = 0
 2598              		.loc 1 655 1 is_stmt 0 view .LVU855
 2599 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 2600              	.LCFI23:
 2601              		.cfi_def_cfa_offset 36
 2602              		.cfi_offset 4, -36
 2603              		.cfi_offset 5, -32
 2604              		.cfi_offset 6, -28
 2605              		.cfi_offset 7, -24
 2606              		.cfi_offset 8, -20
 2607              		.cfi_offset 9, -16
 2608              		.cfi_offset 10, -12
 2609              		.cfi_offset 11, -8
 2610              		.cfi_offset 14, -4
 2611 0004 89B0     		sub	sp, sp, #36
 2612              	.LCFI24:
 2613              		.cfi_def_cfa_offset 72
 2614 0006 0446     		mov	r4, r0
 656:lvgl/src/draw/lv_img_buf.c ****     const uint8_t * src_u8 = dsc->cfg.src;
 2615              		.loc 1 656 5 is_stmt 1 view .LVU856
 2616              		.loc 1 656 21 is_stmt 0 view .LVU857
 2617 0008 0268     		ldr	r2, [r0]
 2618              	.LVL312:
 657:lvgl/src/draw/lv_img_buf.c **** 
 658:lvgl/src/draw/lv_img_buf.c ****     /*Get the fractional part of the source pixel*/
 659:lvgl/src/draw/lv_img_buf.c ****     int xs_fract = dsc->tmp.xs & 0xff;
 2619              		.loc 1 659 5 is_stmt 1 view .LVU858
 2620              		.loc 1 659 28 is_stmt 0 view .LVU859
 2621 000a B0F93C50 		ldrsh	r5, [r0, #60]
 2622              		.loc 1 659 9 view .LVU860
 2623 000e E9B2     		uxtb	r1, r5
 2624              	.LVL313:
 660:lvgl/src/draw/lv_img_buf.c ****     int ys_fract = dsc->tmp.ys & 0xff;
 2625              		.loc 1 660 5 is_stmt 1 view .LVU861
 2626              		.loc 1 660 28 is_stmt 0 view .LVU862
 2627 0010 B0F93E60 		ldrsh	r6, [r0, #62]
 2628              		.loc 1 660 9 view .LVU863
 2629 0014 F3B2     		uxtb	r3, r6
 2630              	.LVL314:
 661:lvgl/src/draw/lv_img_buf.c ****     int32_t xn;      /*x neighbor*/
 2631              		.loc 1 661 5 is_stmt 1 view .LVU864
 662:lvgl/src/draw/lv_img_buf.c ****     lv_opa_t xr; /*x mix ratio*/
 2632              		.loc 1 662 5 view .LVU865
 663:lvgl/src/draw/lv_img_buf.c **** 
 664:lvgl/src/draw/lv_img_buf.c ****     if(xs_fract < 0x70) {
 2633              		.loc 1 664 5 view .LVU866
ARM GAS  C:\usertemp\ccFesu0W.s 			page 82


 2634              		.loc 1 664 7 is_stmt 0 view .LVU867
 2635 0016 6F29     		cmp	r1, #111
 2636 0018 29DC     		bgt	.L127
 665:lvgl/src/draw/lv_img_buf.c ****         xn = - 1;
 2637              		.loc 1 665 9 is_stmt 1 view .LVU868
 2638              	.LVL315:
 666:lvgl/src/draw/lv_img_buf.c ****         if(dsc->tmp.xs_int + xn < 0) xn = 0;
 2639              		.loc 1 666 9 view .LVU869
 2640              		.loc 1 666 20 is_stmt 0 view .LVU870
 2641 001a B0F94010 		ldrsh	r1, [r0, #64]
 2642              	.LVL316:
 2643              		.loc 1 666 11 view .LVU871
 2644 001e 0029     		cmp	r1, #0
 2645 0020 23DD     		ble	.L159
 665:lvgl/src/draw/lv_img_buf.c ****         xn = - 1;
 2646              		.loc 1 665 12 view .LVU872
 2647 0022 4FF0FF37 		mov	r7, #-1
 2648              	.L128:
 2649              	.LVL317:
 667:lvgl/src/draw/lv_img_buf.c ****         xr = xs_fract + 0x80;
 2650              		.loc 1 667 9 is_stmt 1 view .LVU873
 2651              		.loc 1 667 23 is_stmt 0 view .LVU874
 2652 0026 EDB2     		uxtb	r5, r5
 2653              		.loc 1 667 12 view .LVU875
 2654 0028 85F08005 		eor	r5, r5, #128
 2655              	.LVL318:
 2656              	.L129:
 668:lvgl/src/draw/lv_img_buf.c ****     }
 669:lvgl/src/draw/lv_img_buf.c ****     else if(xs_fract > 0x90) {
 670:lvgl/src/draw/lv_img_buf.c ****         xn = 1;
 671:lvgl/src/draw/lv_img_buf.c ****         if(dsc->tmp.xs_int + xn >= dsc->cfg.src_w) xn = 0;
 672:lvgl/src/draw/lv_img_buf.c ****         xr = (0xFF - xs_fract) + 0x80;
 673:lvgl/src/draw/lv_img_buf.c ****     }
 674:lvgl/src/draw/lv_img_buf.c ****     else {
 675:lvgl/src/draw/lv_img_buf.c ****         xn = 0;
 676:lvgl/src/draw/lv_img_buf.c ****         xr = 0xFF;
 677:lvgl/src/draw/lv_img_buf.c ****     }
 678:lvgl/src/draw/lv_img_buf.c **** 
 679:lvgl/src/draw/lv_img_buf.c ****     int32_t yn;      /*x neighbor*/
 2657              		.loc 1 679 5 is_stmt 1 view .LVU876
 680:lvgl/src/draw/lv_img_buf.c ****     lv_opa_t yr; /*x mix ratio*/
 2658              		.loc 1 680 5 view .LVU877
 681:lvgl/src/draw/lv_img_buf.c **** 
 682:lvgl/src/draw/lv_img_buf.c ****     if(ys_fract < 0x70) {
 2659              		.loc 1 682 5 view .LVU878
 2660              		.loc 1 682 7 is_stmt 0 view .LVU879
 2661 002c 6F2B     		cmp	r3, #111
 2662 002e 35DC     		bgt	.L131
 683:lvgl/src/draw/lv_img_buf.c ****         yn = - 1;
 2663              		.loc 1 683 9 is_stmt 1 view .LVU880
 2664              	.LVL319:
 684:lvgl/src/draw/lv_img_buf.c ****         if(dsc->tmp.ys_int + yn < 0) yn = 0;
 2665              		.loc 1 684 9 view .LVU881
 2666              		.loc 1 684 20 is_stmt 0 view .LVU882
 2667 0030 B4F94230 		ldrsh	r3, [r4, #66]
 2668              	.LVL320:
 2669              		.loc 1 684 11 view .LVU883
ARM GAS  C:\usertemp\ccFesu0W.s 			page 83


 2670 0034 002B     		cmp	r3, #0
 2671 0036 2EDD     		ble	.L162
 683:lvgl/src/draw/lv_img_buf.c ****         yn = - 1;
 2672              		.loc 1 683 12 view .LVU884
 2673 0038 4FF0FF39 		mov	r9, #-1
 2674              	.L132:
 2675              	.LVL321:
 685:lvgl/src/draw/lv_img_buf.c **** 
 686:lvgl/src/draw/lv_img_buf.c ****         yr = ys_fract + 0x80;
 2676              		.loc 1 686 9 is_stmt 1 view .LVU885
 2677              		.loc 1 686 23 is_stmt 0 view .LVU886
 2678 003c F6B2     		uxtb	r6, r6
 2679              		.loc 1 686 12 view .LVU887
 2680 003e 86F08006 		eor	r6, r6, #128
 2681              	.LVL322:
 2682              	.L133:
 687:lvgl/src/draw/lv_img_buf.c ****     }
 688:lvgl/src/draw/lv_img_buf.c ****     else if(ys_fract > 0x90) {
 689:lvgl/src/draw/lv_img_buf.c ****         yn = 1;
 690:lvgl/src/draw/lv_img_buf.c ****         if(dsc->tmp.ys_int + yn >= dsc->cfg.src_h) yn = 0;
 691:lvgl/src/draw/lv_img_buf.c **** 
 692:lvgl/src/draw/lv_img_buf.c ****         yr = (0xFF - ys_fract) + 0x80;
 693:lvgl/src/draw/lv_img_buf.c ****     }
 694:lvgl/src/draw/lv_img_buf.c ****     else {
 695:lvgl/src/draw/lv_img_buf.c ****         yn = 0;
 696:lvgl/src/draw/lv_img_buf.c ****         yr = 0xFF;
 697:lvgl/src/draw/lv_img_buf.c ****     }
 698:lvgl/src/draw/lv_img_buf.c **** 
 699:lvgl/src/draw/lv_img_buf.c ****     lv_color_t c00 = dsc->res.color;
 2683              		.loc 1 699 5 is_stmt 1 view .LVU888
 2684              		.loc 1 699 16 is_stmt 0 view .LVU889
 2685 0042 A38A     		ldrh	r3, [r4, #20]
 2686              	.LVL323:
 2687              		.loc 1 699 16 view .LVU890
 2688 0044 ADF80630 		strh	r3, [sp, #6]	@ movhi
 700:lvgl/src/draw/lv_img_buf.c ****     lv_color_t c01;
 2689              		.loc 1 700 5 is_stmt 1 view .LVU891
 701:lvgl/src/draw/lv_img_buf.c ****     lv_color_t c10;
 2690              		.loc 1 701 5 view .LVU892
 702:lvgl/src/draw/lv_img_buf.c ****     lv_color_t c11;
 2691              		.loc 1 702 5 view .LVU893
 703:lvgl/src/draw/lv_img_buf.c **** 
 704:lvgl/src/draw/lv_img_buf.c ****     lv_opa_t a00 = dsc->res.opa;
 2692              		.loc 1 704 5 view .LVU894
 2693              		.loc 1 704 14 is_stmt 0 view .LVU895
 2694 0048 94F816A0 		ldrb	r10, [r4, #22]	@ zero_extendqisi2
 2695              	.LVL324:
 705:lvgl/src/draw/lv_img_buf.c ****     lv_opa_t a10 = 0;
 2696              		.loc 1 705 5 is_stmt 1 view .LVU896
 706:lvgl/src/draw/lv_img_buf.c ****     lv_opa_t a01 = 0;
 2697              		.loc 1 706 5 view .LVU897
 707:lvgl/src/draw/lv_img_buf.c ****     lv_opa_t a11 = 0;
 2698              		.loc 1 707 5 view .LVU898
 708:lvgl/src/draw/lv_img_buf.c **** 
 709:lvgl/src/draw/lv_img_buf.c ****     if(dsc->tmp.native_color) {
 2699              		.loc 1 709 5 view .LVU899
 2700              		.loc 1 709 8 is_stmt 0 view .LVU900
ARM GAS  C:\usertemp\ccFesu0W.s 			page 84


 2701 004c 94F83430 		ldrb	r3, [r4, #52]	@ zero_extendqisi2
 2702              	.LVL325:
 2703              		.loc 1 709 7 view .LVU901
 2704 0050 13F0040F 		tst	r3, #4
 2705 0054 00F0C580 		beq	.L135
 710:lvgl/src/draw/lv_img_buf.c ****         lv_memcpy_small(&c01, &src_u8[dsc->tmp.pxi + dsc->tmp.px_size * xn], sizeof(lv_color_t));
 2706              		.loc 1 710 9 is_stmt 1 view .LVU902
 2707              		.loc 1 710 47 is_stmt 0 view .LVU903
 2708 0058 616C     		ldr	r1, [r4, #68]
 2709              		.loc 1 710 62 view .LVU904
 2710 005a 94F84830 		ldrb	r3, [r4, #72]	@ zero_extendqisi2
 2711              		.loc 1 710 52 view .LVU905
 2712 005e 07FB0311 		mla	r1, r7, r3, r1
 2713              		.loc 1 710 31 view .LVU906
 2714 0062 1144     		add	r1, r1, r2
 2715              	.LVL326:
 2716              	.LBB75:
 2717              	.LBI75:
 194:lvgl/src/draw/../misc/lv_mem.h **** {
 2718              		.loc 3 194 44 is_stmt 1 view .LVU907
 2719              	.LBB76:
 196:lvgl/src/draw/../misc/lv_mem.h ****     const uint8_t * s8 = (const uint8_t *)src;
 2720              		.loc 3 196 5 view .LVU908
 197:lvgl/src/draw/../misc/lv_mem.h **** 
 2721              		.loc 3 197 5 view .LVU909
 199:lvgl/src/draw/../misc/lv_mem.h ****         *d8 = *s8;
 2722              		.loc 3 199 5 view .LVU910
 196:lvgl/src/draw/../misc/lv_mem.h ****     const uint8_t * s8 = (const uint8_t *)src;
 2723              		.loc 3 196 15 is_stmt 0 view .LVU911
 2724 0064 07A8     		add	r0, sp, #28
 2725              	.LVL327:
 199:lvgl/src/draw/../misc/lv_mem.h ****         *d8 = *s8;
 2726              		.loc 3 199 10 view .LVU912
 2727 0066 0223     		movs	r3, #2
 2728 0068 34E0     		b	.L136
 2729              	.LVL328:
 2730              	.L159:
 199:lvgl/src/draw/../misc/lv_mem.h ****         *d8 = *s8;
 2731              		.loc 3 199 10 view .LVU913
 2732              	.LBE76:
 2733              	.LBE75:
 666:lvgl/src/draw/lv_img_buf.c ****         xr = xs_fract + 0x80;
 2734              		.loc 1 666 41 discriminator 1 view .LVU914
 2735 006a 0027     		movs	r7, #0
 2736 006c DBE7     		b	.L128
 2737              	.LVL329:
 2738              	.L127:
 669:lvgl/src/draw/lv_img_buf.c ****         xn = 1;
 2739              		.loc 1 669 10 is_stmt 1 view .LVU915
 669:lvgl/src/draw/lv_img_buf.c ****         xn = 1;
 2740              		.loc 1 669 12 is_stmt 0 view .LVU916
 2741 006e 9029     		cmp	r1, #144
 2742 0070 0EDD     		ble	.L160
 670:lvgl/src/draw/lv_img_buf.c ****         if(dsc->tmp.xs_int + xn >= dsc->cfg.src_w) xn = 0;
 2743              		.loc 1 670 9 is_stmt 1 view .LVU917
 2744              	.LVL330:
 671:lvgl/src/draw/lv_img_buf.c ****         xr = (0xFF - xs_fract) + 0x80;
ARM GAS  C:\usertemp\ccFesu0W.s 			page 85


 2745              		.loc 1 671 9 view .LVU918
 671:lvgl/src/draw/lv_img_buf.c ****         xr = (0xFF - xs_fract) + 0x80;
 2746              		.loc 1 671 20 is_stmt 0 view .LVU919
 2747 0072 B0F94010 		ldrsh	r1, [r0, #64]
 2748              	.LVL331:
 671:lvgl/src/draw/lv_img_buf.c ****         xr = (0xFF - xs_fract) + 0x80;
 2749              		.loc 1 671 28 view .LVU920
 2750 0076 0131     		adds	r1, r1, #1
 671:lvgl/src/draw/lv_img_buf.c ****         xr = (0xFF - xs_fract) + 0x80;
 2751              		.loc 1 671 44 view .LVU921
 2752 0078 B0F90400 		ldrsh	r0, [r0, #4]
 2753              	.LVL332:
 671:lvgl/src/draw/lv_img_buf.c ****         xr = (0xFF - xs_fract) + 0x80;
 2754              		.loc 1 671 11 view .LVU922
 2755 007c 8142     		cmp	r1, r0
 2756 007e 05DA     		bge	.L161
 670:lvgl/src/draw/lv_img_buf.c ****         if(dsc->tmp.xs_int + xn >= dsc->cfg.src_w) xn = 0;
 2757              		.loc 1 670 12 view .LVU923
 2758 0080 0127     		movs	r7, #1
 2759              	.L130:
 2760              	.LVL333:
 672:lvgl/src/draw/lv_img_buf.c ****     }
 2761              		.loc 1 672 9 is_stmt 1 view .LVU924
 672:lvgl/src/draw/lv_img_buf.c ****     }
 2762              		.loc 1 672 32 is_stmt 0 view .LVU925
 2763 0082 EDB2     		uxtb	r5, r5
 672:lvgl/src/draw/lv_img_buf.c ****     }
 2764              		.loc 1 672 12 view .LVU926
 2765 0084 C5F17F05 		rsb	r5, r5, #127
 2766              	.LVL334:
 672:lvgl/src/draw/lv_img_buf.c ****     }
 2767              		.loc 1 672 12 view .LVU927
 2768 0088 EDB2     		uxtb	r5, r5
 2769              	.LVL335:
 672:lvgl/src/draw/lv_img_buf.c ****     }
 2770              		.loc 1 672 12 view .LVU928
 2771 008a CFE7     		b	.L129
 2772              	.LVL336:
 2773              	.L161:
 671:lvgl/src/draw/lv_img_buf.c ****         xr = (0xFF - xs_fract) + 0x80;
 2774              		.loc 1 671 55 discriminator 1 view .LVU929
 2775 008c 0027     		movs	r7, #0
 2776 008e F8E7     		b	.L130
 2777              	.LVL337:
 2778              	.L160:
 676:lvgl/src/draw/lv_img_buf.c ****     }
 2779              		.loc 1 676 12 view .LVU930
 2780 0090 FF25     		movs	r5, #255
 675:lvgl/src/draw/lv_img_buf.c ****         xr = 0xFF;
 2781              		.loc 1 675 12 view .LVU931
 2782 0092 0027     		movs	r7, #0
 2783 0094 CAE7     		b	.L129
 2784              	.LVL338:
 2785              	.L162:
 684:lvgl/src/draw/lv_img_buf.c **** 
 2786              		.loc 1 684 41 discriminator 1 view .LVU932
 2787 0096 4FF00009 		mov	r9, #0
ARM GAS  C:\usertemp\ccFesu0W.s 			page 86


 2788 009a CFE7     		b	.L132
 2789              	.LVL339:
 2790              	.L131:
 688:lvgl/src/draw/lv_img_buf.c ****         yn = 1;
 2791              		.loc 1 688 10 is_stmt 1 view .LVU933
 688:lvgl/src/draw/lv_img_buf.c ****         yn = 1;
 2792              		.loc 1 688 12 is_stmt 0 view .LVU934
 2793 009c 902B     		cmp	r3, #144
 2794 009e 10DD     		ble	.L163
 689:lvgl/src/draw/lv_img_buf.c ****         if(dsc->tmp.ys_int + yn >= dsc->cfg.src_h) yn = 0;
 2795              		.loc 1 689 9 is_stmt 1 view .LVU935
 2796              	.LVL340:
 690:lvgl/src/draw/lv_img_buf.c **** 
 2797              		.loc 1 690 9 view .LVU936
 690:lvgl/src/draw/lv_img_buf.c **** 
 2798              		.loc 1 690 20 is_stmt 0 view .LVU937
 2799 00a0 B4F94230 		ldrsh	r3, [r4, #66]
 2800              	.LVL341:
 690:lvgl/src/draw/lv_img_buf.c **** 
 2801              		.loc 1 690 28 view .LVU938
 2802 00a4 0133     		adds	r3, r3, #1
 690:lvgl/src/draw/lv_img_buf.c **** 
 2803              		.loc 1 690 44 view .LVU939
 2804 00a6 B4F90610 		ldrsh	r1, [r4, #6]
 690:lvgl/src/draw/lv_img_buf.c **** 
 2805              		.loc 1 690 11 view .LVU940
 2806 00aa 8B42     		cmp	r3, r1
 2807 00ac 06DA     		bge	.L164
 689:lvgl/src/draw/lv_img_buf.c ****         if(dsc->tmp.ys_int + yn >= dsc->cfg.src_h) yn = 0;
 2808              		.loc 1 689 12 view .LVU941
 2809 00ae 4FF00109 		mov	r9, #1
 2810              	.L134:
 2811              	.LVL342:
 692:lvgl/src/draw/lv_img_buf.c ****     }
 2812              		.loc 1 692 9 is_stmt 1 view .LVU942
 692:lvgl/src/draw/lv_img_buf.c ****     }
 2813              		.loc 1 692 32 is_stmt 0 view .LVU943
 2814 00b2 F6B2     		uxtb	r6, r6
 692:lvgl/src/draw/lv_img_buf.c ****     }
 2815              		.loc 1 692 12 view .LVU944
 2816 00b4 C6F17F06 		rsb	r6, r6, #127
 2817              	.LVL343:
 692:lvgl/src/draw/lv_img_buf.c ****     }
 2818              		.loc 1 692 12 view .LVU945
 2819 00b8 F6B2     		uxtb	r6, r6
 2820              	.LVL344:
 692:lvgl/src/draw/lv_img_buf.c ****     }
 2821              		.loc 1 692 12 view .LVU946
 2822 00ba C2E7     		b	.L133
 2823              	.LVL345:
 2824              	.L164:
 690:lvgl/src/draw/lv_img_buf.c **** 
 2825              		.loc 1 690 55 discriminator 1 view .LVU947
 2826 00bc 4FF00009 		mov	r9, #0
 2827 00c0 F7E7     		b	.L134
 2828              	.LVL346:
 2829              	.L163:
ARM GAS  C:\usertemp\ccFesu0W.s 			page 87


 696:lvgl/src/draw/lv_img_buf.c ****     }
 2830              		.loc 1 696 12 view .LVU948
 2831 00c2 FF26     		movs	r6, #255
 695:lvgl/src/draw/lv_img_buf.c ****         yr = 0xFF;
 2832              		.loc 1 695 12 view .LVU949
 2833 00c4 4FF00009 		mov	r9, #0
 2834 00c8 BBE7     		b	.L133
 2835              	.LVL347:
 2836              	.L137:
 2837              	.LBB78:
 2838              	.LBB77:
 200:lvgl/src/draw/../misc/lv_mem.h ****         d8++;
 2839              		.loc 3 200 9 is_stmt 1 view .LVU950
 200:lvgl/src/draw/../misc/lv_mem.h ****         d8++;
 2840              		.loc 3 200 15 is_stmt 0 view .LVU951
 2841 00ca 11F801CB 		ldrb	ip, [r1], #1	@ zero_extendqisi2
 2842              	.LVL348:
 200:lvgl/src/draw/../misc/lv_mem.h ****         d8++;
 2843              		.loc 3 200 13 view .LVU952
 2844 00ce 00F801CB 		strb	ip, [r0], #1
 2845              	.LVL349:
 201:lvgl/src/draw/../misc/lv_mem.h ****         s8++;
 2846              		.loc 3 201 9 is_stmt 1 view .LVU953
 202:lvgl/src/draw/../misc/lv_mem.h ****         len--;
 2847              		.loc 3 202 9 view .LVU954
 2848              		.loc 3 203 9 view .LVU955
 2849              		.loc 3 203 12 is_stmt 0 view .LVU956
 2850 00d2 013B     		subs	r3, r3, #1
 2851              	.LVL350:
 2852              	.L136:
 199:lvgl/src/draw/../misc/lv_mem.h ****         *d8 = *s8;
 2853              		.loc 3 199 11 is_stmt 1 view .LVU957
 2854 00d4 002B     		cmp	r3, #0
 2855 00d6 F8D1     		bne	.L137
 204:lvgl/src/draw/../misc/lv_mem.h ****     }
 205:lvgl/src/draw/../misc/lv_mem.h **** 
 206:lvgl/src/draw/../misc/lv_mem.h ****     return dst;
 2856              		.loc 3 206 5 view .LVU958
 2857              	.LVL351:
 2858              		.loc 3 206 5 is_stmt 0 view .LVU959
 2859              	.LBE77:
 2860              	.LBE78:
 711:lvgl/src/draw/lv_img_buf.c ****         lv_memcpy_small(&c10, &src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn], sizeo
 2861              		.loc 1 711 9 is_stmt 1 view .LVU960
 2862              		.loc 1 711 47 is_stmt 0 view .LVU961
 2863 00d8 616C     		ldr	r1, [r4, #68]
 2864              		.loc 1 711 62 view .LVU962
 2865 00da B4F90430 		ldrsh	r3, [r4, #4]
 2866              		.loc 1 711 79 view .LVU963
 2867 00de 94F84800 		ldrb	r0, [r4, #72]	@ zero_extendqisi2
 2868              		.loc 1 711 69 view .LVU964
 2869 00e2 00FB03F3 		mul	r3, r0, r3
 2870              		.loc 1 711 52 view .LVU965
 2871 00e6 09FB0311 		mla	r1, r9, r3, r1
 2872              		.loc 1 711 31 view .LVU966
 2873 00ea 1144     		add	r1, r1, r2
 2874              	.LVL352:
ARM GAS  C:\usertemp\ccFesu0W.s 			page 88


 2875              	.LBB79:
 2876              	.LBI79:
 194:lvgl/src/draw/../misc/lv_mem.h **** {
 2877              		.loc 3 194 44 is_stmt 1 view .LVU967
 2878              	.LBB80:
 196:lvgl/src/draw/../misc/lv_mem.h ****     const uint8_t * s8 = (const uint8_t *)src;
 2879              		.loc 3 196 5 view .LVU968
 197:lvgl/src/draw/../misc/lv_mem.h **** 
 2880              		.loc 3 197 5 view .LVU969
 199:lvgl/src/draw/../misc/lv_mem.h ****         *d8 = *s8;
 2881              		.loc 3 199 5 view .LVU970
 196:lvgl/src/draw/../misc/lv_mem.h ****     const uint8_t * s8 = (const uint8_t *)src;
 2882              		.loc 3 196 15 is_stmt 0 view .LVU971
 2883 00ec 06A8     		add	r0, sp, #24
 2884              	.LVL353:
 196:lvgl/src/draw/../misc/lv_mem.h ****     const uint8_t * s8 = (const uint8_t *)src;
 2885              		.loc 3 196 15 view .LVU972
 2886              	.LBE80:
 2887              	.LBE79:
 2888              		.loc 1 711 31 view .LVU973
 2889 00ee 0223     		movs	r3, #2
 2890 00f0 04E0     		b	.L138
 2891              	.LVL354:
 2892              	.L139:
 2893              	.LBB82:
 2894              	.LBB81:
 200:lvgl/src/draw/../misc/lv_mem.h ****         d8++;
 2895              		.loc 3 200 9 is_stmt 1 view .LVU974
 200:lvgl/src/draw/../misc/lv_mem.h ****         d8++;
 2896              		.loc 3 200 15 is_stmt 0 view .LVU975
 2897 00f2 11F801CB 		ldrb	ip, [r1], #1	@ zero_extendqisi2
 2898              	.LVL355:
 200:lvgl/src/draw/../misc/lv_mem.h ****         d8++;
 2899              		.loc 3 200 13 view .LVU976
 2900 00f6 00F801CB 		strb	ip, [r0], #1
 2901              	.LVL356:
 201:lvgl/src/draw/../misc/lv_mem.h ****         s8++;
 2902              		.loc 3 201 9 is_stmt 1 view .LVU977
 202:lvgl/src/draw/../misc/lv_mem.h ****         len--;
 2903              		.loc 3 202 9 view .LVU978
 203:lvgl/src/draw/../misc/lv_mem.h ****     }
 2904              		.loc 3 203 9 view .LVU979
 203:lvgl/src/draw/../misc/lv_mem.h ****     }
 2905              		.loc 3 203 12 is_stmt 0 view .LVU980
 2906 00fa 013B     		subs	r3, r3, #1
 2907              	.LVL357:
 2908              	.L138:
 199:lvgl/src/draw/../misc/lv_mem.h ****         *d8 = *s8;
 2909              		.loc 3 199 11 is_stmt 1 view .LVU981
 2910 00fc 002B     		cmp	r3, #0
 2911 00fe F8D1     		bne	.L139
 2912              		.loc 3 206 5 view .LVU982
 2913              	.LVL358:
 2914              		.loc 3 206 5 is_stmt 0 view .LVU983
 2915              	.LBE81:
 2916              	.LBE82:
 712:lvgl/src/draw/lv_img_buf.c ****         lv_memcpy_small(&c11, &src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn + dsc->
ARM GAS  C:\usertemp\ccFesu0W.s 			page 89


 2917              		.loc 1 712 9 is_stmt 1 view .LVU984
 2918              		.loc 1 712 47 is_stmt 0 view .LVU985
 2919 0100 616C     		ldr	r1, [r4, #68]
 2920              		.loc 1 712 103 view .LVU986
 2921 0102 94F84800 		ldrb	r0, [r4, #72]	@ zero_extendqisi2
 2922              		.loc 1 712 62 view .LVU987
 2923 0106 B4F90430 		ldrsh	r3, [r4, #4]
 2924              		.loc 1 712 69 view .LVU988
 2925 010a 00FB03F3 		mul	r3, r0, r3
 2926              		.loc 1 712 88 view .LVU989
 2927 010e 09FB03F3 		mul	r3, r9, r3
 2928              		.loc 1 712 93 view .LVU990
 2929 0112 07FB0033 		mla	r3, r7, r0, r3
 2930 0116 0B44     		add	r3, r3, r1
 2931              		.loc 1 712 31 view .LVU991
 2932 0118 1344     		add	r3, r3, r2
 2933              	.LVL359:
 2934              	.LBB83:
 2935              	.LBI83:
 194:lvgl/src/draw/../misc/lv_mem.h **** {
 2936              		.loc 3 194 44 is_stmt 1 view .LVU992
 2937              	.LBB84:
 196:lvgl/src/draw/../misc/lv_mem.h ****     const uint8_t * s8 = (const uint8_t *)src;
 2938              		.loc 3 196 5 view .LVU993
 197:lvgl/src/draw/../misc/lv_mem.h **** 
 2939              		.loc 3 197 5 view .LVU994
 199:lvgl/src/draw/../misc/lv_mem.h ****         *d8 = *s8;
 2940              		.loc 3 199 5 view .LVU995
 196:lvgl/src/draw/../misc/lv_mem.h ****     const uint8_t * s8 = (const uint8_t *)src;
 2941              		.loc 3 196 15 is_stmt 0 view .LVU996
 2942 011a 05A8     		add	r0, sp, #20
 2943              	.LVL360:
 196:lvgl/src/draw/../misc/lv_mem.h ****     const uint8_t * s8 = (const uint8_t *)src;
 2944              		.loc 3 196 15 view .LVU997
 2945              	.LBE84:
 2946              	.LBE83:
 2947              		.loc 1 712 31 view .LVU998
 2948 011c 0221     		movs	r1, #2
 2949 011e 04E0     		b	.L140
 2950              	.LVL361:
 2951              	.L141:
 2952              	.LBB86:
 2953              	.LBB85:
 200:lvgl/src/draw/../misc/lv_mem.h ****         d8++;
 2954              		.loc 3 200 9 is_stmt 1 view .LVU999
 200:lvgl/src/draw/../misc/lv_mem.h ****         d8++;
 2955              		.loc 3 200 15 is_stmt 0 view .LVU1000
 2956 0120 13F801CB 		ldrb	ip, [r3], #1	@ zero_extendqisi2
 2957              	.LVL362:
 200:lvgl/src/draw/../misc/lv_mem.h ****         d8++;
 2958              		.loc 3 200 13 view .LVU1001
 2959 0124 00F801CB 		strb	ip, [r0], #1
 2960              	.LVL363:
 201:lvgl/src/draw/../misc/lv_mem.h ****         s8++;
 2961              		.loc 3 201 9 is_stmt 1 view .LVU1002
 202:lvgl/src/draw/../misc/lv_mem.h ****         len--;
 2962              		.loc 3 202 9 view .LVU1003
ARM GAS  C:\usertemp\ccFesu0W.s 			page 90


 203:lvgl/src/draw/../misc/lv_mem.h ****     }
 2963              		.loc 3 203 9 view .LVU1004
 203:lvgl/src/draw/../misc/lv_mem.h ****     }
 2964              		.loc 3 203 12 is_stmt 0 view .LVU1005
 2965 0128 0139     		subs	r1, r1, #1
 2966              	.LVL364:
 2967              	.L140:
 199:lvgl/src/draw/../misc/lv_mem.h ****         *d8 = *s8;
 2968              		.loc 3 199 11 is_stmt 1 view .LVU1006
 2969 012a 0029     		cmp	r1, #0
 2970 012c F8D1     		bne	.L141
 2971              		.loc 3 206 5 view .LVU1007
 2972              	.LVL365:
 2973              		.loc 3 206 5 is_stmt 0 view .LVU1008
 2974              	.LBE85:
 2975              	.LBE86:
 713:lvgl/src/draw/lv_img_buf.c ****                         sizeof(lv_color_t));
 714:lvgl/src/draw/lv_img_buf.c ****         if(dsc->tmp.has_alpha) {
 2976              		.loc 1 714 9 is_stmt 1 view .LVU1009
 2977              		.loc 1 714 12 is_stmt 0 view .LVU1010
 2978 012e 94F83480 		ldrb	r8, [r4, #52]	@ zero_extendqisi2
 2979              		.loc 1 714 11 view .LVU1011
 2980 0132 18F00208 		ands	r8, r8, #2
 2981 0136 00F0A380 		beq	.L165
 715:lvgl/src/draw/lv_img_buf.c ****             a10 = src_u8[dsc->tmp.pxi + dsc->tmp.px_size * xn + dsc->tmp.px_size - 1];
 2982              		.loc 1 715 13 is_stmt 1 view .LVU1012
 2983              		.loc 1 715 34 is_stmt 0 view .LVU1013
 2984 013a 616C     		ldr	r1, [r4, #68]
 2985              		.loc 1 715 49 view .LVU1014
 2986 013c 94F84830 		ldrb	r3, [r4, #72]	@ zero_extendqisi2
 2987              		.loc 1 715 58 view .LVU1015
 2988 0140 03FB07F7 		mul	r7, r3, r7
 2989              	.LVL366:
 2990              		.loc 1 715 39 view .LVU1016
 2991 0144 C819     		adds	r0, r1, r7
 2992              		.loc 1 715 63 view .LVU1017
 2993 0146 1844     		add	r0, r0, r3
 2994              		.loc 1 715 25 view .LVU1018
 2995 0148 0138     		subs	r0, r0, #1
 2996              		.loc 1 715 17 view .LVU1019
 2997 014a 12F80080 		ldrb	r8, [r2, r0]	@ zero_extendqisi2
 2998              	.LVL367:
 716:lvgl/src/draw/lv_img_buf.c ****             a01 = src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn + dsc->tmp.px_size -
 2999              		.loc 1 716 13 is_stmt 1 view .LVU1020
 3000              		.loc 1 716 49 is_stmt 0 view .LVU1021
 3001 014e B4F90400 		ldrsh	r0, [r4, #4]
 3002              		.loc 1 716 56 view .LVU1022
 3003 0152 03FB00F0 		mul	r0, r3, r0
 3004              		.loc 1 716 75 view .LVU1023
 3005 0156 09FB00F0 		mul	r0, r9, r0
 3006              		.loc 1 716 39 view .LVU1024
 3007 015a 01EB000C 		add	ip, r1, r0
 3008              		.loc 1 716 80 view .LVU1025
 3009 015e 9C44     		add	ip, ip, r3
 3010              		.loc 1 716 25 view .LVU1026
 3011 0160 0CF1FF3C 		add	ip, ip, #-1
 3012              		.loc 1 716 17 view .LVU1027
ARM GAS  C:\usertemp\ccFesu0W.s 			page 91


 3013 0164 12F80C90 		ldrb	r9, [r2, ip]	@ zero_extendqisi2
 3014              	.LVL368:
 717:lvgl/src/draw/lv_img_buf.c ****             a11 = src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn + dsc->tmp.px_size *
 3015              		.loc 1 717 13 is_stmt 1 view .LVU1028
 3016              		.loc 1 717 80 is_stmt 0 view .LVU1029
 3017 0168 0744     		add	r7, r7, r0
 3018 016a 0F44     		add	r7, r7, r1
 3019              		.loc 1 717 104 view .LVU1030
 3020 016c 3B44     		add	r3, r3, r7
 3021              		.loc 1 717 25 view .LVU1031
 3022 016e 013B     		subs	r3, r3, #1
 3023              		.loc 1 717 17 view .LVU1032
 3024 0170 D05C     		ldrb	r0, [r2, r3]	@ zero_extendqisi2
 3025              	.LVL369:
 3026              	.L142:
 718:lvgl/src/draw/lv_img_buf.c ****         }
 719:lvgl/src/draw/lv_img_buf.c ****     }
 720:lvgl/src/draw/lv_img_buf.c ****     else {
 721:lvgl/src/draw/lv_img_buf.c ****         c01 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int, dsc
 722:lvgl/src/draw/lv_img_buf.c ****         c10 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int, dsc->tmp.ys_int + yn, dsc
 723:lvgl/src/draw/lv_img_buf.c ****         c11 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int + yn
 724:lvgl/src/draw/lv_img_buf.c **** 
 725:lvgl/src/draw/lv_img_buf.c ****         if(dsc->tmp.has_alpha) {
 726:lvgl/src/draw/lv_img_buf.c ****             a10 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int)
 727:lvgl/src/draw/lv_img_buf.c ****             a01 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int, dsc->tmp.ys_int + yn)
 728:lvgl/src/draw/lv_img_buf.c ****             a11 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int 
 729:lvgl/src/draw/lv_img_buf.c ****         }
 730:lvgl/src/draw/lv_img_buf.c ****     }
 731:lvgl/src/draw/lv_img_buf.c **** 
 732:lvgl/src/draw/lv_img_buf.c ****     lv_opa_t xr0 = xr;
 3027              		.loc 1 732 5 is_stmt 1 view .LVU1033
 733:lvgl/src/draw/lv_img_buf.c ****     lv_opa_t xr1 = xr;
 3028              		.loc 1 733 5 view .LVU1034
 734:lvgl/src/draw/lv_img_buf.c ****     if(dsc->tmp.has_alpha) {
 3029              		.loc 1 734 5 view .LVU1035
 3030              		.loc 1 734 8 is_stmt 0 view .LVU1036
 3031 0172 94F83430 		ldrb	r3, [r4, #52]	@ zero_extendqisi2
 3032              		.loc 1 734 7 view .LVU1037
 3033 0176 13F0020F 		tst	r3, #2
 3034 017a 00F08980 		beq	.L143
 3035              	.LBB87:
 735:lvgl/src/draw/lv_img_buf.c ****         lv_opa_t a0 = (a00 * xr + (a10 * (255 - xr))) >> 8;
 3036              		.loc 1 735 9 is_stmt 1 view .LVU1038
 3037              		.loc 1 735 47 is_stmt 0 view .LVU1039
 3038 017e C5F1FF03 		rsb	r3, r5, #255
 3039              		.loc 1 735 40 view .LVU1040
 3040 0182 03FB08F1 		mul	r1, r3, r8
 3041              		.loc 1 735 33 view .LVU1041
 3042 0186 05FB0A11 		mla	r1, r5, r10, r1
 3043              		.loc 1 735 18 view .LVU1042
 3044 018a C1F30721 		ubfx	r1, r1, #8, #8
 3045              	.LVL370:
 736:lvgl/src/draw/lv_img_buf.c ****         lv_opa_t a1 = (a01 * xr + (a11 * (255 - xr))) >> 8;
 3046              		.loc 1 736 9 is_stmt 1 view .LVU1043
 3047              		.loc 1 736 40 is_stmt 0 view .LVU1044
 3048 018e 00FB03F3 		mul	r3, r0, r3
 3049              		.loc 1 736 33 view .LVU1045
ARM GAS  C:\usertemp\ccFesu0W.s 			page 92


 3050 0192 05FB0933 		mla	r3, r5, r9, r3
 3051              		.loc 1 736 18 view .LVU1046
 3052 0196 C3F30723 		ubfx	r3, r3, #8, #8
 3053              	.LVL371:
 737:lvgl/src/draw/lv_img_buf.c ****         dsc->res.opa = (a0 * yr + (a1 * (255 - yr))) >> 8;
 3054              		.loc 1 737 9 is_stmt 1 view .LVU1047
 3055              		.loc 1 737 46 is_stmt 0 view .LVU1048
 3056 019a C6F1FF02 		rsb	r2, r6, #255
 3057              		.loc 1 737 39 view .LVU1049
 3058 019e 03FB02F2 		mul	r2, r3, r2
 3059              		.loc 1 737 33 view .LVU1050
 3060 01a2 06FB0122 		mla	r2, r6, r1, r2
 3061              		.loc 1 737 54 view .LVU1051
 3062 01a6 1212     		asrs	r2, r2, #8
 3063              		.loc 1 737 22 view .LVU1052
 3064 01a8 A275     		strb	r2, [r4, #22]
 738:lvgl/src/draw/lv_img_buf.c **** 
 739:lvgl/src/draw/lv_img_buf.c ****         if(a0 <= LV_OPA_MIN && a1 <= LV_OPA_MIN) return false;
 3065              		.loc 1 739 9 is_stmt 1 view .LVU1053
 3066              		.loc 1 739 11 is_stmt 0 view .LVU1054
 3067 01aa 0229     		cmp	r1, #2
 3068 01ac 98BF     		it	ls
 3069 01ae 022B     		cmpls	r3, #2
 3070 01b0 40F2A880 		bls	.L167
 740:lvgl/src/draw/lv_img_buf.c ****         if(a0 <= LV_OPA_MIN) yr = LV_OPA_TRANSP;
 3071              		.loc 1 740 9 is_stmt 1 view .LVU1055
 3072              		.loc 1 740 11 is_stmt 0 view .LVU1056
 3073 01b4 0229     		cmp	r1, #2
 3074 01b6 00D8     		bhi	.L145
 3075              		.loc 1 740 33 discriminator 1 view .LVU1057
 3076 01b8 0026     		movs	r6, #0
 3077              	.LVL372:
 3078              	.L145:
 741:lvgl/src/draw/lv_img_buf.c ****         if(a1 <= LV_OPA_MIN) yr = LV_OPA_COVER;
 3079              		.loc 1 741 9 is_stmt 1 view .LVU1058
 3080              		.loc 1 741 11 is_stmt 0 view .LVU1059
 3081 01ba 022B     		cmp	r3, #2
 3082 01bc 00D8     		bhi	.L146
 3083              		.loc 1 741 33 discriminator 1 view .LVU1060
 3084 01be FF26     		movs	r6, #255
 3085              	.LVL373:
 3086              	.L146:
 742:lvgl/src/draw/lv_img_buf.c ****         if(a00 <= LV_OPA_MIN) xr0 = LV_OPA_TRANSP;
 3087              		.loc 1 742 9 is_stmt 1 view .LVU1061
 3088              		.loc 1 742 11 is_stmt 0 view .LVU1062
 3089 01c0 BAF1020F 		cmp	r10, #2
 3090 01c4 62D9     		bls	.L170
 3091              	.LBE87:
 732:lvgl/src/draw/lv_img_buf.c ****     lv_opa_t xr1 = xr;
 3092              		.loc 1 732 14 view .LVU1063
 3093 01c6 2B46     		mov	r3, r5
 3094              	.LVL374:
 3095              	.L147:
 3096              	.LBB88:
 743:lvgl/src/draw/lv_img_buf.c ****         if(a10 <= LV_OPA_MIN) xr0 = LV_OPA_COVER;
 3097              		.loc 1 743 9 is_stmt 1 view .LVU1064
 3098              		.loc 1 743 11 is_stmt 0 view .LVU1065
ARM GAS  C:\usertemp\ccFesu0W.s 			page 93


 3099 01c8 B8F1020F 		cmp	r8, #2
 3100 01cc 00D8     		bhi	.L148
 3101              		.loc 1 743 35 discriminator 1 view .LVU1066
 3102 01ce FF23     		movs	r3, #255
 3103              	.LVL375:
 3104              	.L148:
 744:lvgl/src/draw/lv_img_buf.c ****         if(a01 <= LV_OPA_MIN) xr1 = LV_OPA_TRANSP;
 3105              		.loc 1 744 9 is_stmt 1 view .LVU1067
 3106              		.loc 1 744 11 is_stmt 0 view .LVU1068
 3107 01d0 B9F1020F 		cmp	r9, #2
 3108 01d4 00D8     		bhi	.L149
 3109              		.loc 1 744 35 discriminator 1 view .LVU1069
 3110 01d6 0025     		movs	r5, #0
 3111              	.LVL376:
 3112              	.L149:
 745:lvgl/src/draw/lv_img_buf.c ****         if(a11 <= LV_OPA_MIN) xr1 = LV_OPA_COVER;
 3113              		.loc 1 745 9 is_stmt 1 view .LVU1070
 3114              		.loc 1 745 11 is_stmt 0 view .LVU1071
 3115 01d8 0228     		cmp	r0, #2
 3116 01da 68D9     		bls	.L173
 3117 01dc 2F46     		mov	r7, r5
 3118 01de 1D46     		mov	r5, r3
 3119              	.LVL377:
 3120              		.loc 1 745 11 view .LVU1072
 3121 01e0 59E0     		b	.L150
 3122              	.LVL378:
 3123              	.L135:
 3124              		.loc 1 745 11 view .LVU1073
 3125              	.LBE88:
 721:lvgl/src/draw/lv_img_buf.c ****         c10 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int, dsc->tmp.ys_int + yn, dsc
 3126              		.loc 1 721 9 is_stmt 1 view .LVU1074
 721:lvgl/src/draw/lv_img_buf.c ****         c10 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int, dsc->tmp.ys_int + yn, dsc
 3127              		.loc 1 721 15 is_stmt 0 view .LVU1075
 3128 01e2 04F1180B 		add	fp, r4, #24
 721:lvgl/src/draw/lv_img_buf.c ****         c10 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int, dsc->tmp.ys_int + yn, dsc
 3129              		.loc 1 721 66 view .LVU1076
 3130 01e6 B4F84010 		ldrh	r1, [r4, #64]
 721:lvgl/src/draw/lv_img_buf.c ****         c10 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int, dsc->tmp.ys_int + yn, dsc
 3131              		.loc 1 721 74 view .LVU1077
 3132 01ea BFB2     		uxth	r7, r7
 3133              	.LVL379:
 721:lvgl/src/draw/lv_img_buf.c ****         c10 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int, dsc->tmp.ys_int + yn, dsc
 3134              		.loc 1 721 74 view .LVU1078
 3135 01ec 3944     		add	r1, r1, r7
 721:lvgl/src/draw/lv_img_buf.c ****         c10 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int, dsc->tmp.ys_int + yn, dsc
 3136              		.loc 1 721 15 view .LVU1079
 3137 01ee 238A     		ldrh	r3, [r4, #16]
 3138 01f0 B4F94220 		ldrsh	r2, [r4, #66]
 3139              	.LVL380:
 721:lvgl/src/draw/lv_img_buf.c ****         c10 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int, dsc->tmp.ys_int + yn, dsc
 3140              		.loc 1 721 15 view .LVU1080
 3141 01f4 09B2     		sxth	r1, r1
 3142 01f6 5846     		mov	r0, fp
 3143 01f8 FFF7FEFF 		bl	lv_img_buf_get_px_color
 3144              	.LVL381:
 721:lvgl/src/draw/lv_img_buf.c ****         c10 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int, dsc->tmp.ys_int + yn, dsc
 3145              		.loc 1 721 15 view .LVU1081
ARM GAS  C:\usertemp\ccFesu0W.s 			page 94


 3146 01fc ADF81C00 		strh	r0, [sp, #28]	@ movhi
 722:lvgl/src/draw/lv_img_buf.c ****         c11 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int + yn
 3147              		.loc 1 722 9 is_stmt 1 view .LVU1082
 722:lvgl/src/draw/lv_img_buf.c ****         c11 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int + yn
 3148              		.loc 1 722 83 is_stmt 0 view .LVU1083
 3149 0200 B4F84220 		ldrh	r2, [r4, #66]
 722:lvgl/src/draw/lv_img_buf.c ****         c11 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int + yn
 3150              		.loc 1 722 91 view .LVU1084
 3151 0204 1FFA89F9 		uxth	r9, r9
 3152              	.LVL382:
 722:lvgl/src/draw/lv_img_buf.c ****         c11 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int + yn
 3153              		.loc 1 722 91 view .LVU1085
 3154 0208 4A44     		add	r2, r2, r9
 722:lvgl/src/draw/lv_img_buf.c ****         c11 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int + yn
 3155              		.loc 1 722 15 view .LVU1086
 3156 020a 238A     		ldrh	r3, [r4, #16]
 3157 020c 12B2     		sxth	r2, r2
 3158 020e B4F94010 		ldrsh	r1, [r4, #64]
 3159 0212 5846     		mov	r0, fp
 3160 0214 FFF7FEFF 		bl	lv_img_buf_get_px_color
 3161              	.LVL383:
 3162 0218 ADF81800 		strh	r0, [sp, #24]	@ movhi
 723:lvgl/src/draw/lv_img_buf.c **** 
 3163              		.loc 1 723 9 is_stmt 1 view .LVU1087
 723:lvgl/src/draw/lv_img_buf.c **** 
 3164              		.loc 1 723 66 is_stmt 0 view .LVU1088
 3165 021c B4F84010 		ldrh	r1, [r4, #64]
 723:lvgl/src/draw/lv_img_buf.c **** 
 3166              		.loc 1 723 74 view .LVU1089
 3167 0220 3944     		add	r1, r1, r7
 723:lvgl/src/draw/lv_img_buf.c **** 
 3168              		.loc 1 723 88 view .LVU1090
 3169 0222 B4F84220 		ldrh	r2, [r4, #66]
 723:lvgl/src/draw/lv_img_buf.c **** 
 3170              		.loc 1 723 96 view .LVU1091
 3171 0226 4A44     		add	r2, r2, r9
 723:lvgl/src/draw/lv_img_buf.c **** 
 3172              		.loc 1 723 15 view .LVU1092
 3173 0228 238A     		ldrh	r3, [r4, #16]
 3174 022a 12B2     		sxth	r2, r2
 3175 022c 09B2     		sxth	r1, r1
 3176 022e 5846     		mov	r0, fp
 3177 0230 FFF7FEFF 		bl	lv_img_buf_get_px_color
 3178              	.LVL384:
 3179 0234 ADF81400 		strh	r0, [sp, #20]	@ movhi
 725:lvgl/src/draw/lv_img_buf.c ****             a10 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int)
 3180              		.loc 1 725 9 is_stmt 1 view .LVU1093
 725:lvgl/src/draw/lv_img_buf.c ****             a10 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int)
 3181              		.loc 1 725 12 is_stmt 0 view .LVU1094
 3182 0238 94F83480 		ldrb	r8, [r4, #52]	@ zero_extendqisi2
 725:lvgl/src/draw/lv_img_buf.c ****             a10 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int)
 3183              		.loc 1 725 11 view .LVU1095
 3184 023c 18F00208 		ands	r8, r8, #2
 3185 0240 21D0     		beq	.L166
 726:lvgl/src/draw/lv_img_buf.c ****             a01 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int, dsc->tmp.ys_int + yn)
 3186              		.loc 1 726 13 is_stmt 1 view .LVU1096
 726:lvgl/src/draw/lv_img_buf.c ****             a01 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int, dsc->tmp.ys_int + yn)
ARM GAS  C:\usertemp\ccFesu0W.s 			page 95


 3187              		.loc 1 726 70 is_stmt 0 view .LVU1097
 3188 0242 B4F94030 		ldrsh	r3, [r4, #64]
 726:lvgl/src/draw/lv_img_buf.c ****             a01 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int, dsc->tmp.ys_int + yn)
 3189              		.loc 1 726 78 view .LVU1098
 3190 0246 0293     		str	r3, [sp, #8]
 3191 0248 17FA83F7 		uxtah	r7, r7, r3
 726:lvgl/src/draw/lv_img_buf.c ****             a01 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int, dsc->tmp.ys_int + yn)
 3192              		.loc 1 726 19 view .LVU1099
 3193 024c 3AB2     		sxth	r2, r7
 3194 024e 1046     		mov	r0, r2
 3195 0250 B4F94270 		ldrsh	r7, [r4, #66]
 3196 0254 3A46     		mov	r2, r7
 3197 0256 0390     		str	r0, [sp, #12]
 3198 0258 0146     		mov	r1, r0
 3199 025a 5846     		mov	r0, fp
 3200 025c FFF7FEFF 		bl	lv_img_buf_get_px_alpha
 3201              	.LVL385:
 3202 0260 8046     		mov	r8, r0
 3203              	.LVL386:
 727:lvgl/src/draw/lv_img_buf.c ****             a11 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int 
 3204              		.loc 1 727 13 is_stmt 1 view .LVU1100
 727:lvgl/src/draw/lv_img_buf.c ****             a11 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int 
 3205              		.loc 1 727 95 is_stmt 0 view .LVU1101
 3206 0262 19FA87F7 		uxtah	r7, r9, r7
 727:lvgl/src/draw/lv_img_buf.c ****             a11 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int 
 3207              		.loc 1 727 19 view .LVU1102
 3208 0266 3FB2     		sxth	r7, r7
 3209 0268 3A46     		mov	r2, r7
 3210 026a 0299     		ldr	r1, [sp, #8]
 3211 026c 5846     		mov	r0, fp
 3212 026e FFF7FEFF 		bl	lv_img_buf_get_px_alpha
 3213              	.LVL387:
 3214 0272 8146     		mov	r9, r0
 3215              	.LVL388:
 728:lvgl/src/draw/lv_img_buf.c ****         }
 3216              		.loc 1 728 13 is_stmt 1 view .LVU1103
 728:lvgl/src/draw/lv_img_buf.c ****         }
 3217              		.loc 1 728 19 is_stmt 0 view .LVU1104
 3218 0274 3A46     		mov	r2, r7
 3219 0276 0399     		ldr	r1, [sp, #12]
 3220 0278 5846     		mov	r0, fp
 3221 027a FFF7FEFF 		bl	lv_img_buf_get_px_alpha
 3222              	.LVL389:
 728:lvgl/src/draw/lv_img_buf.c ****         }
 3223              		.loc 1 728 19 view .LVU1105
 3224 027e 78E7     		b	.L142
 3225              	.LVL390:
 3226              	.L165:
 707:lvgl/src/draw/lv_img_buf.c **** 
 3227              		.loc 1 707 14 view .LVU1106
 3228 0280 4046     		mov	r0, r8
 706:lvgl/src/draw/lv_img_buf.c ****     lv_opa_t a11 = 0;
 3229              		.loc 1 706 14 view .LVU1107
 3230 0282 C146     		mov	r9, r8
 3231              	.LVL391:
 706:lvgl/src/draw/lv_img_buf.c ****     lv_opa_t a11 = 0;
 3232              		.loc 1 706 14 view .LVU1108
ARM GAS  C:\usertemp\ccFesu0W.s 			page 96


 3233 0284 75E7     		b	.L142
 3234              	.LVL392:
 3235              	.L166:
 707:lvgl/src/draw/lv_img_buf.c **** 
 3236              		.loc 1 707 14 view .LVU1109
 3237 0286 4046     		mov	r0, r8
 706:lvgl/src/draw/lv_img_buf.c ****     lv_opa_t a11 = 0;
 3238              		.loc 1 706 14 view .LVU1110
 3239 0288 C146     		mov	r9, r8
 3240 028a 72E7     		b	.L142
 3241              	.LVL393:
 3242              	.L170:
 3243              	.LBB89:
 742:lvgl/src/draw/lv_img_buf.c ****         if(a10 <= LV_OPA_MIN) xr0 = LV_OPA_COVER;
 3244              		.loc 1 742 35 discriminator 1 view .LVU1111
 3245 028c 0023     		movs	r3, #0
 3246              	.LVL394:
 742:lvgl/src/draw/lv_img_buf.c ****         if(a10 <= LV_OPA_MIN) xr0 = LV_OPA_COVER;
 3247              		.loc 1 742 35 discriminator 1 view .LVU1112
 3248 028e 9BE7     		b	.L147
 3249              	.LVL395:
 3250              	.L143:
 742:lvgl/src/draw/lv_img_buf.c ****         if(a10 <= LV_OPA_MIN) xr0 = LV_OPA_COVER;
 3251              		.loc 1 742 35 discriminator 1 view .LVU1113
 3252              	.LBE89:
 746:lvgl/src/draw/lv_img_buf.c ****     }
 747:lvgl/src/draw/lv_img_buf.c ****     else {
 748:lvgl/src/draw/lv_img_buf.c ****         xr0 = xr;
 3253              		.loc 1 748 9 is_stmt 1 view .LVU1114
 749:lvgl/src/draw/lv_img_buf.c ****         xr1 = xr;
 3254              		.loc 1 749 9 view .LVU1115
 750:lvgl/src/draw/lv_img_buf.c ****         dsc->res.opa = LV_OPA_COVER;
 3255              		.loc 1 750 9 view .LVU1116
 3256              		.loc 1 750 22 is_stmt 0 view .LVU1117
 3257 0290 FF23     		movs	r3, #255
 3258 0292 A375     		strb	r3, [r4, #22]
 749:lvgl/src/draw/lv_img_buf.c ****         xr1 = xr;
 3259              		.loc 1 749 13 view .LVU1118
 3260 0294 2F46     		mov	r7, r5
 3261              	.LVL396:
 3262              	.L150:
 751:lvgl/src/draw/lv_img_buf.c ****     }
 752:lvgl/src/draw/lv_img_buf.c **** 
 753:lvgl/src/draw/lv_img_buf.c ****     lv_color_t c0;
 3263              		.loc 1 753 5 is_stmt 1 view .LVU1119
 754:lvgl/src/draw/lv_img_buf.c ****     if(xr0 == LV_OPA_TRANSP) c0 = c01;
 3264              		.loc 1 754 5 view .LVU1120
 3265              		.loc 1 754 7 is_stmt 0 view .LVU1121
 3266 0296 6DB9     		cbnz	r5, .L151
 3267              		.loc 1 754 30 is_stmt 1 discriminator 1 view .LVU1122
 3268              		.loc 1 754 33 is_stmt 0 discriminator 1 view .LVU1123
 3269 0298 BDF81C50 		ldrh	r5, [sp, #28]
 3270              	.LVL397:
 3271              	.L152:
 755:lvgl/src/draw/lv_img_buf.c ****     else if(xr0 == LV_OPA_COVER) c0 = c00;
 756:lvgl/src/draw/lv_img_buf.c ****     else c0 = lv_color_mix(c00, c01, xr0);
 757:lvgl/src/draw/lv_img_buf.c **** 
ARM GAS  C:\usertemp\ccFesu0W.s 			page 97


 758:lvgl/src/draw/lv_img_buf.c ****     lv_color_t c1;
 3272              		.loc 1 758 5 is_stmt 1 view .LVU1124
 759:lvgl/src/draw/lv_img_buf.c ****     if(xr1 == LV_OPA_TRANSP) c1 = c11;
 3273              		.loc 1 759 5 view .LVU1125
 3274              		.loc 1 759 7 is_stmt 0 view .LVU1126
 3275 029c C7B9     		cbnz	r7, .L154
 3276              		.loc 1 759 30 is_stmt 1 discriminator 1 view .LVU1127
 3277              		.loc 1 759 33 is_stmt 0 discriminator 1 view .LVU1128
 3278 029e BDF81410 		ldrh	r1, [sp, #20]
 3279              	.L155:
 760:lvgl/src/draw/lv_img_buf.c ****     else if(xr1 == LV_OPA_COVER) c1 = c10;
 761:lvgl/src/draw/lv_img_buf.c ****     else c1 = lv_color_mix(c10, c11, xr1);
 762:lvgl/src/draw/lv_img_buf.c **** 
 763:lvgl/src/draw/lv_img_buf.c ****     if(yr == LV_OPA_TRANSP) dsc->res.color = c1;
 3280              		.loc 1 763 5 is_stmt 1 view .LVU1129
 3281              		.loc 1 763 7 is_stmt 0 view .LVU1130
 3282 02a2 1EBB     		cbnz	r6, .L157
 3283              		.loc 1 763 29 is_stmt 1 discriminator 1 view .LVU1131
 3284              	.LVL398:
 3285              		.loc 1 763 44 is_stmt 0 discriminator 1 view .LVU1132
 3286 02a4 A182     		strh	r1, [r4, #20]	@ movhi
 764:lvgl/src/draw/lv_img_buf.c ****     else if(yr == LV_OPA_COVER) dsc->res.color = c0;
 765:lvgl/src/draw/lv_img_buf.c ****     else dsc->res.color = lv_color_mix(c0, c1, yr);
 766:lvgl/src/draw/lv_img_buf.c **** 
 767:lvgl/src/draw/lv_img_buf.c ****     return true;
 3287              		.loc 1 767 12 view .LVU1133
 3288 02a6 0120     		movs	r0, #1
 3289              	.LVL399:
 3290              	.L144:
 768:lvgl/src/draw/lv_img_buf.c **** }
 3291              		.loc 1 768 1 view .LVU1134
 3292 02a8 09B0     		add	sp, sp, #36
 3293              	.LCFI25:
 3294              		.cfi_remember_state
 3295              		.cfi_def_cfa_offset 36
 3296              		@ sp needed
 3297 02aa BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3298              	.LVL400:
 3299              	.L173:
 3300              	.LCFI26:
 3301              		.cfi_restore_state
 3302              	.LBB90:
 3303              		.loc 1 768 1 view .LVU1135
 3304 02ae 1D46     		mov	r5, r3
 3305              	.LVL401:
 745:lvgl/src/draw/lv_img_buf.c ****     }
 3306              		.loc 1 745 35 discriminator 1 view .LVU1136
 3307 02b0 FF27     		movs	r7, #255
 3308 02b2 F0E7     		b	.L150
 3309              	.LVL402:
 3310              	.L151:
 745:lvgl/src/draw/lv_img_buf.c ****     }
 3311              		.loc 1 745 35 discriminator 1 view .LVU1137
 3312              	.LBE90:
 755:lvgl/src/draw/lv_img_buf.c ****     else c0 = lv_color_mix(c00, c01, xr0);
 3313              		.loc 1 755 10 is_stmt 1 view .LVU1138
 755:lvgl/src/draw/lv_img_buf.c ****     else c0 = lv_color_mix(c00, c01, xr0);
ARM GAS  C:\usertemp\ccFesu0W.s 			page 98


 3314              		.loc 1 755 12 is_stmt 0 view .LVU1139
 3315 02b4 FF2D     		cmp	r5, #255
 3316 02b6 08D0     		beq	.L175
 756:lvgl/src/draw/lv_img_buf.c **** 
 3317              		.loc 1 756 10 is_stmt 1 view .LVU1140
 756:lvgl/src/draw/lv_img_buf.c **** 
 3318              		.loc 1 756 15 is_stmt 0 view .LVU1141
 3319 02b8 2A46     		mov	r2, r5
 3320 02ba BDF81C10 		ldrh	r1, [sp, #28]
 3321 02be BDF80600 		ldrh	r0, [sp, #6]
 3322              	.LVL403:
 756:lvgl/src/draw/lv_img_buf.c **** 
 3323              		.loc 1 756 15 view .LVU1142
 3324 02c2 FFF7FEFF 		bl	lv_color_mix
 3325              	.LVL404:
 3326 02c6 0546     		mov	r5, r0	@ movhi
 3327              	.LVL405:
 756:lvgl/src/draw/lv_img_buf.c **** 
 3328              		.loc 1 756 15 view .LVU1143
 3329 02c8 E8E7     		b	.L152
 3330              	.LVL406:
 3331              	.L175:
 755:lvgl/src/draw/lv_img_buf.c ****     else c0 = lv_color_mix(c00, c01, xr0);
 3332              		.loc 1 755 34 is_stmt 1 discriminator 1 view .LVU1144
 755:lvgl/src/draw/lv_img_buf.c ****     else c0 = lv_color_mix(c00, c01, xr0);
 3333              		.loc 1 755 37 is_stmt 0 discriminator 1 view .LVU1145
 3334 02ca BDF80650 		ldrh	r5, [sp, #6]
 3335              	.LVL407:
 755:lvgl/src/draw/lv_img_buf.c ****     else c0 = lv_color_mix(c00, c01, xr0);
 3336              		.loc 1 755 37 discriminator 1 view .LVU1146
 3337 02ce E5E7     		b	.L152
 3338              	.LVL408:
 3339              	.L154:
 760:lvgl/src/draw/lv_img_buf.c ****     else c1 = lv_color_mix(c10, c11, xr1);
 3340              		.loc 1 760 10 is_stmt 1 view .LVU1147
 760:lvgl/src/draw/lv_img_buf.c ****     else c1 = lv_color_mix(c10, c11, xr1);
 3341              		.loc 1 760 12 is_stmt 0 view .LVU1148
 3342 02d0 FF2F     		cmp	r7, #255
 3343 02d2 08D0     		beq	.L176
 761:lvgl/src/draw/lv_img_buf.c **** 
 3344              		.loc 1 761 10 is_stmt 1 view .LVU1149
 761:lvgl/src/draw/lv_img_buf.c **** 
 3345              		.loc 1 761 15 is_stmt 0 view .LVU1150
 3346 02d4 3A46     		mov	r2, r7
 3347 02d6 BDF81410 		ldrh	r1, [sp, #20]
 3348 02da BDF81800 		ldrh	r0, [sp, #24]
 3349 02de FFF7FEFF 		bl	lv_color_mix
 3350              	.LVL409:
 3351 02e2 0146     		mov	r1, r0	@ movhi
 761:lvgl/src/draw/lv_img_buf.c **** 
 3352              		.loc 1 761 15 view .LVU1151
 3353 02e4 DDE7     		b	.L155
 3354              	.L176:
 760:lvgl/src/draw/lv_img_buf.c ****     else c1 = lv_color_mix(c10, c11, xr1);
 3355              		.loc 1 760 34 is_stmt 1 discriminator 1 view .LVU1152
 760:lvgl/src/draw/lv_img_buf.c ****     else c1 = lv_color_mix(c10, c11, xr1);
 3356              		.loc 1 760 37 is_stmt 0 discriminator 1 view .LVU1153
ARM GAS  C:\usertemp\ccFesu0W.s 			page 99


 3357 02e6 BDF81810 		ldrh	r1, [sp, #24]
 3358 02ea DAE7     		b	.L155
 3359              	.L157:
 764:lvgl/src/draw/lv_img_buf.c ****     else dsc->res.color = lv_color_mix(c0, c1, yr);
 3360              		.loc 1 764 10 is_stmt 1 view .LVU1154
 764:lvgl/src/draw/lv_img_buf.c ****     else dsc->res.color = lv_color_mix(c0, c1, yr);
 3361              		.loc 1 764 12 is_stmt 0 view .LVU1155
 3362 02ec FF2E     		cmp	r6, #255
 3363 02ee 06D0     		beq	.L177
 765:lvgl/src/draw/lv_img_buf.c **** 
 3364              		.loc 1 765 10 is_stmt 1 view .LVU1156
 765:lvgl/src/draw/lv_img_buf.c **** 
 3365              		.loc 1 765 27 is_stmt 0 view .LVU1157
 3366 02f0 3246     		mov	r2, r6
 3367              	.LVL410:
 765:lvgl/src/draw/lv_img_buf.c **** 
 3368              		.loc 1 765 27 view .LVU1158
 3369 02f2 2846     		mov	r0, r5	@ movhi
 3370 02f4 FFF7FEFF 		bl	lv_color_mix
 3371              	.LVL411:
 3372 02f8 A082     		strh	r0, [r4, #20]	@ movhi
 767:lvgl/src/draw/lv_img_buf.c **** }
 3373              		.loc 1 767 12 view .LVU1159
 3374 02fa 0120     		movs	r0, #1
 3375 02fc D4E7     		b	.L144
 3376              	.LVL412:
 3377              	.L177:
 764:lvgl/src/draw/lv_img_buf.c ****     else dsc->res.color = lv_color_mix(c0, c1, yr);
 3378              		.loc 1 764 33 is_stmt 1 discriminator 1 view .LVU1160
 764:lvgl/src/draw/lv_img_buf.c ****     else dsc->res.color = lv_color_mix(c0, c1, yr);
 3379              		.loc 1 764 48 is_stmt 0 discriminator 1 view .LVU1161
 3380 02fe A582     		strh	r5, [r4, #20]	@ movhi
 767:lvgl/src/draw/lv_img_buf.c **** }
 3381              		.loc 1 767 12 view .LVU1162
 3382 0300 0120     		movs	r0, #1
 3383 0302 D1E7     		b	.L144
 3384              	.LVL413:
 3385              	.L167:
 3386              	.LBB91:
 739:lvgl/src/draw/lv_img_buf.c ****         if(a0 <= LV_OPA_MIN) yr = LV_OPA_TRANSP;
 3387              		.loc 1 739 57 discriminator 1 view .LVU1163
 3388 0304 0020     		movs	r0, #0
 3389              	.LVL414:
 739:lvgl/src/draw/lv_img_buf.c ****         if(a0 <= LV_OPA_MIN) yr = LV_OPA_TRANSP;
 3390              		.loc 1 739 57 discriminator 1 view .LVU1164
 3391 0306 CFE7     		b	.L144
 3392              	.LBE91:
 3393              		.cfi_endproc
 3394              	.LFE66:
 3396              		.section	.text._lv_img_buf_transform,"ax",%progbits
 3397              		.align	1
 3398              		.global	_lv_img_buf_transform
 3399              		.syntax unified
 3400              		.thumb
 3401              		.thumb_func
 3403              	_lv_img_buf_transform:
 3404              	.LVL415:
ARM GAS  C:\usertemp\ccFesu0W.s 			page 100


 3405              	.LFB65:
 570:lvgl/src/draw/lv_img_buf.c ****     const uint8_t * src_u8 = (const uint8_t *)dsc->cfg.src;
 3406              		.loc 1 570 1 is_stmt 1 view -0
 3407              		.cfi_startproc
 3408              		@ args = 0, pretend = 0, frame = 8
 3409              		@ frame_needed = 0, uses_anonymous_args = 0
 570:lvgl/src/draw/lv_img_buf.c ****     const uint8_t * src_u8 = (const uint8_t *)dsc->cfg.src;
 3410              		.loc 1 570 1 is_stmt 0 view .LVU1166
 3411 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 3412              	.LCFI27:
 3413              		.cfi_def_cfa_offset 36
 3414              		.cfi_offset 4, -36
 3415              		.cfi_offset 5, -32
 3416              		.cfi_offset 6, -28
 3417              		.cfi_offset 7, -24
 3418              		.cfi_offset 8, -20
 3419              		.cfi_offset 9, -16
 3420              		.cfi_offset 10, -12
 3421              		.cfi_offset 11, -8
 3422              		.cfi_offset 14, -4
 3423 0004 83B0     		sub	sp, sp, #12
 3424              	.LCFI28:
 3425              		.cfi_def_cfa_offset 48
 3426 0006 0446     		mov	r4, r0
 571:lvgl/src/draw/lv_img_buf.c **** 
 3427              		.loc 1 571 5 is_stmt 1 view .LVU1167
 571:lvgl/src/draw/lv_img_buf.c **** 
 3428              		.loc 1 571 21 is_stmt 0 view .LVU1168
 3429 0008 0068     		ldr	r0, [r0]
 3430              	.LVL416:
 574:lvgl/src/draw/lv_img_buf.c ****     int32_t yt = y - dsc->cfg.pivot_y;
 3431              		.loc 1 574 5 is_stmt 1 view .LVU1169
 574:lvgl/src/draw/lv_img_buf.c ****     int32_t yt = y - dsc->cfg.pivot_y;
 3432              		.loc 1 574 30 is_stmt 0 view .LVU1170
 3433 000a B4F90830 		ldrsh	r3, [r4, #8]
 574:lvgl/src/draw/lv_img_buf.c ****     int32_t yt = y - dsc->cfg.pivot_y;
 3434              		.loc 1 574 13 view .LVU1171
 3435 000e C91A     		subs	r1, r1, r3
 3436              	.LVL417:
 575:lvgl/src/draw/lv_img_buf.c **** 
 3437              		.loc 1 575 5 is_stmt 1 view .LVU1172
 575:lvgl/src/draw/lv_img_buf.c **** 
 3438              		.loc 1 575 30 is_stmt 0 view .LVU1173
 3439 0010 B4F90A30 		ldrsh	r3, [r4, #10]
 575:lvgl/src/draw/lv_img_buf.c **** 
 3440              		.loc 1 575 13 view .LVU1174
 3441 0014 D21A     		subs	r2, r2, r3
 3442              	.LVL418:
 577:lvgl/src/draw/lv_img_buf.c ****     int32_t ys;
 3443              		.loc 1 577 5 is_stmt 1 view .LVU1175
 578:lvgl/src/draw/lv_img_buf.c ****     if(dsc->cfg.zoom == LV_IMG_ZOOM_NONE) {
 3444              		.loc 1 578 5 view .LVU1176
 579:lvgl/src/draw/lv_img_buf.c ****         /*Get the source pixel from the upscaled image*/
 3445              		.loc 1 579 5 view .LVU1177
 579:lvgl/src/draw/lv_img_buf.c ****         /*Get the source pixel from the upscaled image*/
 3446              		.loc 1 579 16 is_stmt 0 view .LVU1178
 3447 0016 E389     		ldrh	r3, [r4, #14]
ARM GAS  C:\usertemp\ccFesu0W.s 			page 101


 579:lvgl/src/draw/lv_img_buf.c ****         /*Get the source pixel from the upscaled image*/
 3448              		.loc 1 579 7 view .LVU1179
 3449 0018 B3F5807F 		cmp	r3, #256
 3450 001c 0FD0     		beq	.L198
 584:lvgl/src/draw/lv_img_buf.c ****         xt = (int32_t)((int32_t)xt * dsc->tmp.zoom_inv) >> _LV_ZOOM_INV_UPSCALE;
 3451              		.loc 1 584 10 is_stmt 1 view .LVU1180
 584:lvgl/src/draw/lv_img_buf.c ****         xt = (int32_t)((int32_t)xt * dsc->tmp.zoom_inv) >> _LV_ZOOM_INV_UPSCALE;
 3452              		.loc 1 584 21 is_stmt 0 view .LVU1181
 3453 001e B4F90C30 		ldrsh	r3, [r4, #12]
 584:lvgl/src/draw/lv_img_buf.c ****         xt = (int32_t)((int32_t)xt * dsc->tmp.zoom_inv) >> _LV_ZOOM_INV_UPSCALE;
 3454              		.loc 1 584 12 view .LVU1182
 3455 0022 002B     		cmp	r3, #0
 3456 0024 41D1     		bne	.L181
 585:lvgl/src/draw/lv_img_buf.c ****         yt = (int32_t)((int32_t)yt * dsc->tmp.zoom_inv) >> _LV_ZOOM_INV_UPSCALE;
 3457              		.loc 1 585 9 is_stmt 1 view .LVU1183
 585:lvgl/src/draw/lv_img_buf.c ****         yt = (int32_t)((int32_t)yt * dsc->tmp.zoom_inv) >> _LV_ZOOM_INV_UPSCALE;
 3458              		.loc 1 585 46 is_stmt 0 view .LVU1184
 3459 0026 A36B     		ldr	r3, [r4, #56]
 585:lvgl/src/draw/lv_img_buf.c ****         yt = (int32_t)((int32_t)yt * dsc->tmp.zoom_inv) >> _LV_ZOOM_INV_UPSCALE;
 3460              		.loc 1 585 36 view .LVU1185
 3461 0028 03FB01F1 		mul	r1, r3, r1
 3462              	.LVL419:
 586:lvgl/src/draw/lv_img_buf.c ****         xs = xt + dsc->tmp.pivot_x_256;
 3463              		.loc 1 586 9 is_stmt 1 view .LVU1186
 586:lvgl/src/draw/lv_img_buf.c ****         xs = xt + dsc->tmp.pivot_x_256;
 3464              		.loc 1 586 36 is_stmt 0 view .LVU1187
 3465 002c 02FB03F3 		mul	r3, r2, r3
 3466              	.LVL420:
 587:lvgl/src/draw/lv_img_buf.c ****         ys = yt + dsc->tmp.pivot_y_256;
 3467              		.loc 1 587 9 is_stmt 1 view .LVU1188
 587:lvgl/src/draw/lv_img_buf.c ****         ys = yt + dsc->tmp.pivot_y_256;
 3468              		.loc 1 587 27 is_stmt 0 view .LVU1189
 3469 0030 656A     		ldr	r5, [r4, #36]
 587:lvgl/src/draw/lv_img_buf.c ****         ys = yt + dsc->tmp.pivot_y_256;
 3470              		.loc 1 587 12 view .LVU1190
 3471 0032 05EB6115 		add	r5, r5, r1, asr #5
 3472              	.LVL421:
 588:lvgl/src/draw/lv_img_buf.c ****     }
 3473              		.loc 1 588 9 is_stmt 1 view .LVU1191
 588:lvgl/src/draw/lv_img_buf.c ****     }
 3474              		.loc 1 588 27 is_stmt 0 view .LVU1192
 3475 0036 A66A     		ldr	r6, [r4, #40]
 588:lvgl/src/draw/lv_img_buf.c ****     }
 3476              		.loc 1 588 12 view .LVU1193
 3477 0038 06EB6316 		add	r6, r6, r3, asr #5
 3478              	.LVL422:
 588:lvgl/src/draw/lv_img_buf.c ****     }
 3479              		.loc 1 588 12 view .LVU1194
 3480 003c 0FE0     		b	.L180
 3481              	.LVL423:
 3482              	.L198:
 581:lvgl/src/draw/lv_img_buf.c ****         ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc
 3483              		.loc 1 581 9 is_stmt 1 view .LVU1195
 581:lvgl/src/draw/lv_img_buf.c ****         ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc
 3484              		.loc 1 581 24 is_stmt 0 view .LVU1196
 3485 003e 236B     		ldr	r3, [r4, #48]
 581:lvgl/src/draw/lv_img_buf.c ****         ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc
ARM GAS  C:\usertemp\ccFesu0W.s 			page 102


 3486              		.loc 1 581 31 view .LVU1197
 3487 0040 01FB03F6 		mul	r6, r1, r3
 581:lvgl/src/draw/lv_img_buf.c ****         ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc
 3488              		.loc 1 581 46 view .LVU1198
 3489 0044 E76A     		ldr	r7, [r4, #44]
 581:lvgl/src/draw/lv_img_buf.c ****         ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc
 3490              		.loc 1 581 36 view .LVU1199
 3491 0046 02FB1766 		mls	r6, r2, r7, r6
 581:lvgl/src/draw/lv_img_buf.c ****         ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc
 3492              		.loc 1 581 105 view .LVU1200
 3493 004a 656A     		ldr	r5, [r4, #36]
 581:lvgl/src/draw/lv_img_buf.c ****         ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc
 3494              		.loc 1 581 12 view .LVU1201
 3495 004c 05EBA605 		add	r5, r5, r6, asr #2
 3496              	.LVL424:
 582:lvgl/src/draw/lv_img_buf.c ****     }
 3497              		.loc 1 582 9 is_stmt 1 view .LVU1202
 582:lvgl/src/draw/lv_img_buf.c ****     }
 3498              		.loc 1 582 53 is_stmt 0 view .LVU1203
 3499 0050 02FB03F3 		mul	r3, r2, r3
 582:lvgl/src/draw/lv_img_buf.c ****     }
 3500              		.loc 1 582 36 view .LVU1204
 3501 0054 01FB0733 		mla	r3, r1, r7, r3
 582:lvgl/src/draw/lv_img_buf.c ****     }
 3502              		.loc 1 582 105 view .LVU1205
 3503 0058 A66A     		ldr	r6, [r4, #40]
 582:lvgl/src/draw/lv_img_buf.c ****     }
 3504              		.loc 1 582 12 view .LVU1206
 3505 005a 06EBA306 		add	r6, r6, r3, asr #2
 3506              	.LVL425:
 3507              	.L180:
 598:lvgl/src/draw/lv_img_buf.c ****     int32_t ys_int = ys >> 8;
 3508              		.loc 1 598 5 is_stmt 1 view .LVU1207
 598:lvgl/src/draw/lv_img_buf.c ****     int32_t ys_int = ys >> 8;
 3509              		.loc 1 598 13 is_stmt 0 view .LVU1208
 3510 005e 4FEA2528 		asr	r8, r5, #8
 3511              	.LVL426:
 599:lvgl/src/draw/lv_img_buf.c **** 
 3512              		.loc 1 599 5 is_stmt 1 view .LVU1209
 599:lvgl/src/draw/lv_img_buf.c **** 
 3513              		.loc 1 599 13 is_stmt 0 view .LVU1210
 3514 0062 3712     		asrs	r7, r6, #8
 3515              	.LVL427:
 601:lvgl/src/draw/lv_img_buf.c ****     else if(xs_int < 0) return false;
 3516              		.loc 1 601 5 is_stmt 1 view .LVU1211
 601:lvgl/src/draw/lv_img_buf.c ****     else if(xs_int < 0) return false;
 3517              		.loc 1 601 26 is_stmt 0 view .LVU1212
 3518 0064 B4F90430 		ldrsh	r3, [r4, #4]
 601:lvgl/src/draw/lv_img_buf.c ****     else if(xs_int < 0) return false;
 3519              		.loc 1 601 7 view .LVU1213
 3520 0068 B3EB252F 		cmp	r3, r5, asr #8
 3521 006c 40F38780 		ble	.L192
 602:lvgl/src/draw/lv_img_buf.c **** 
 3522              		.loc 1 602 10 is_stmt 1 view .LVU1214
 602:lvgl/src/draw/lv_img_buf.c **** 
 3523              		.loc 1 602 12 is_stmt 0 view .LVU1215
 3524 0070 B8F1000F 		cmp	r8, #0
ARM GAS  C:\usertemp\ccFesu0W.s 			page 103


 3525 0074 C0F28780 		blt	.L193
 604:lvgl/src/draw/lv_img_buf.c ****     else if(ys_int < 0) return false;
 3526              		.loc 1 604 5 is_stmt 1 view .LVU1216
 604:lvgl/src/draw/lv_img_buf.c ****     else if(ys_int < 0) return false;
 3527              		.loc 1 604 26 is_stmt 0 view .LVU1217
 3528 0078 B4F90620 		ldrsh	r2, [r4, #6]
 604:lvgl/src/draw/lv_img_buf.c ****     else if(ys_int < 0) return false;
 3529              		.loc 1 604 7 view .LVU1218
 3530 007c BA42     		cmp	r2, r7
 3531 007e 40F38480 		ble	.L194
 605:lvgl/src/draw/lv_img_buf.c **** 
 3532              		.loc 1 605 10 is_stmt 1 view .LVU1219
 605:lvgl/src/draw/lv_img_buf.c **** 
 3533              		.loc 1 605 12 is_stmt 0 view .LVU1220
 3534 0082 002F     		cmp	r7, #0
 3535 0084 C0F28380 		blt	.L195
 607:lvgl/src/draw/lv_img_buf.c ****     uint32_t pxi;
 3536              		.loc 1 607 5 is_stmt 1 view .LVU1221
 608:lvgl/src/draw/lv_img_buf.c ****     if(dsc->tmp.native_color) {
 3537              		.loc 1 608 5 view .LVU1222
 609:lvgl/src/draw/lv_img_buf.c ****         if(dsc->tmp.has_alpha == 0) {
 3538              		.loc 1 609 5 view .LVU1223
 609:lvgl/src/draw/lv_img_buf.c ****         if(dsc->tmp.has_alpha == 0) {
 3539              		.loc 1 609 8 is_stmt 0 view .LVU1224
 3540 0088 94F83420 		ldrb	r2, [r4, #52]	@ zero_extendqisi2
 609:lvgl/src/draw/lv_img_buf.c ****         if(dsc->tmp.has_alpha == 0) {
 3541              		.loc 1 609 7 view .LVU1225
 3542 008c 12F00409 		ands	r9, r2, #4
 3543 0090 51D0     		beq	.L183
 610:lvgl/src/draw/lv_img_buf.c ****             px_size = LV_COLOR_SIZE >> 3;
 3544              		.loc 1 610 9 is_stmt 1 view .LVU1226
 610:lvgl/src/draw/lv_img_buf.c ****             px_size = LV_COLOR_SIZE >> 3;
 3545              		.loc 1 610 11 is_stmt 0 view .LVU1227
 3546 0092 12F0020F 		tst	r2, #2
 3547 0096 36D1     		bne	.L184
 611:lvgl/src/draw/lv_img_buf.c **** 
 3548              		.loc 1 611 13 is_stmt 1 view .LVU1228
 3549              	.LVL428:
 613:lvgl/src/draw/lv_img_buf.c ****             lv_memcpy_small(&dsc->res.color, &src_u8[pxi], px_size);
 3550              		.loc 1 613 13 view .LVU1229
 613:lvgl/src/draw/lv_img_buf.c ****             lv_memcpy_small(&dsc->res.color, &src_u8[pxi], px_size);
 3551              		.loc 1 613 57 is_stmt 0 view .LVU1230
 3552 0098 07FB0383 		mla	r3, r7, r3, r8
 3553 009c 5900     		lsls	r1, r3, #1
 3554              	.LVL429:
 614:lvgl/src/draw/lv_img_buf.c ****         }
 3555              		.loc 1 614 13 is_stmt 1 view .LVU1231
 614:lvgl/src/draw/lv_img_buf.c ****         }
 3556              		.loc 1 614 29 is_stmt 0 view .LVU1232
 3557 009e 04F1140C 		add	ip, r4, #20
 614:lvgl/src/draw/lv_img_buf.c ****         }
 3558              		.loc 1 614 46 view .LVU1233
 3559 00a2 00EB4303 		add	r3, r0, r3, lsl #1
 3560              	.LVL430:
 3561              	.LBB92:
 3562              	.LBI92:
 194:lvgl/src/draw/../misc/lv_mem.h **** {
ARM GAS  C:\usertemp\ccFesu0W.s 			page 104


 3563              		.loc 3 194 44 is_stmt 1 view .LVU1234
 3564              	.LBB93:
 196:lvgl/src/draw/../misc/lv_mem.h ****     const uint8_t * s8 = (const uint8_t *)src;
 3565              		.loc 3 196 5 view .LVU1235
 197:lvgl/src/draw/../misc/lv_mem.h **** 
 3566              		.loc 3 197 5 view .LVU1236
 199:lvgl/src/draw/../misc/lv_mem.h ****         *d8 = *s8;
 3567              		.loc 3 199 5 view .LVU1237
 199:lvgl/src/draw/../misc/lv_mem.h ****         *d8 = *s8;
 3568              		.loc 3 199 10 is_stmt 0 view .LVU1238
 3569 00a6 0222     		movs	r2, #2
 3570 00a8 1CE0     		b	.L185
 3571              	.LVL431:
 3572              	.L181:
 199:lvgl/src/draw/../misc/lv_mem.h ****         *d8 = *s8;
 3573              		.loc 3 199 10 view .LVU1239
 3574              	.LBE93:
 3575              	.LBE92:
 591:lvgl/src/draw/lv_img_buf.c ****         yt = (int32_t)((int32_t)yt * dsc->tmp.zoom_inv) >> _LV_ZOOM_INV_UPSCALE;
 3576              		.loc 1 591 9 is_stmt 1 view .LVU1240
 591:lvgl/src/draw/lv_img_buf.c ****         yt = (int32_t)((int32_t)yt * dsc->tmp.zoom_inv) >> _LV_ZOOM_INV_UPSCALE;
 3577              		.loc 1 591 46 is_stmt 0 view .LVU1241
 3578 00aa A36B     		ldr	r3, [r4, #56]
 591:lvgl/src/draw/lv_img_buf.c ****         yt = (int32_t)((int32_t)yt * dsc->tmp.zoom_inv) >> _LV_ZOOM_INV_UPSCALE;
 3579              		.loc 1 591 36 view .LVU1242
 3580 00ac 03FB01F1 		mul	r1, r3, r1
 3581              	.LVL432:
 591:lvgl/src/draw/lv_img_buf.c ****         yt = (int32_t)((int32_t)yt * dsc->tmp.zoom_inv) >> _LV_ZOOM_INV_UPSCALE;
 3582              		.loc 1 591 12 view .LVU1243
 3583 00b0 4911     		asrs	r1, r1, #5
 3584              	.LVL433:
 592:lvgl/src/draw/lv_img_buf.c ****         xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tm
 3585              		.loc 1 592 9 is_stmt 1 view .LVU1244
 592:lvgl/src/draw/lv_img_buf.c ****         xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tm
 3586              		.loc 1 592 36 is_stmt 0 view .LVU1245
 3587 00b2 02FB03F3 		mul	r3, r2, r3
 592:lvgl/src/draw/lv_img_buf.c ****         xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tm
 3588              		.loc 1 592 12 view .LVU1246
 3589 00b6 5B11     		asrs	r3, r3, #5
 3590              	.LVL434:
 593:lvgl/src/draw/lv_img_buf.c ****         ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tm
 3591              		.loc 1 593 9 is_stmt 1 view .LVU1247
 593:lvgl/src/draw/lv_img_buf.c ****         ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tm
 3592              		.loc 1 593 24 is_stmt 0 view .LVU1248
 3593 00b8 226B     		ldr	r2, [r4, #48]
 593:lvgl/src/draw/lv_img_buf.c ****         ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tm
 3594              		.loc 1 593 31 view .LVU1249
 3595 00ba 01FB02F6 		mul	r6, r1, r2
 593:lvgl/src/draw/lv_img_buf.c ****         ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tm
 3596              		.loc 1 593 46 view .LVU1250
 3597 00be E76A     		ldr	r7, [r4, #44]
 593:lvgl/src/draw/lv_img_buf.c ****         ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tm
 3598              		.loc 1 593 36 view .LVU1251
 3599 00c0 03FB1766 		mls	r6, r3, r7, r6
 593:lvgl/src/draw/lv_img_buf.c ****         ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tm
 3600              		.loc 1 593 101 view .LVU1252
 3601 00c4 656A     		ldr	r5, [r4, #36]
ARM GAS  C:\usertemp\ccFesu0W.s 			page 105


 593:lvgl/src/draw/lv_img_buf.c ****         ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tm
 3602              		.loc 1 593 12 view .LVU1253
 3603 00c6 05EBA625 		add	r5, r5, r6, asr #10
 3604              	.LVL435:
 594:lvgl/src/draw/lv_img_buf.c ****     }
 3605              		.loc 1 594 9 is_stmt 1 view .LVU1254
 594:lvgl/src/draw/lv_img_buf.c ****     }
 3606              		.loc 1 594 53 is_stmt 0 view .LVU1255
 3607 00ca 03FB02F2 		mul	r2, r3, r2
 594:lvgl/src/draw/lv_img_buf.c ****     }
 3608              		.loc 1 594 36 view .LVU1256
 3609 00ce 01FB0722 		mla	r2, r1, r7, r2
 594:lvgl/src/draw/lv_img_buf.c ****     }
 3610              		.loc 1 594 101 view .LVU1257
 3611 00d2 A66A     		ldr	r6, [r4, #40]
 594:lvgl/src/draw/lv_img_buf.c ****     }
 3612              		.loc 1 594 12 view .LVU1258
 3613 00d4 06EBA226 		add	r6, r6, r2, asr #10
 3614              	.LVL436:
 594:lvgl/src/draw/lv_img_buf.c ****     }
 3615              		.loc 1 594 12 view .LVU1259
 3616 00d8 C1E7     		b	.L180
 3617              	.LVL437:
 3618              	.L186:
 3619              	.LBB95:
 3620              	.LBB94:
 200:lvgl/src/draw/../misc/lv_mem.h ****         d8++;
 3621              		.loc 3 200 9 is_stmt 1 view .LVU1260
 200:lvgl/src/draw/../misc/lv_mem.h ****         d8++;
 3622              		.loc 3 200 15 is_stmt 0 view .LVU1261
 3623 00da 13F8010B 		ldrb	r0, [r3], #1	@ zero_extendqisi2
 3624              	.LVL438:
 200:lvgl/src/draw/../misc/lv_mem.h ****         d8++;
 3625              		.loc 3 200 13 view .LVU1262
 3626 00de 0CF8010B 		strb	r0, [ip], #1
 3627              	.LVL439:
 201:lvgl/src/draw/../misc/lv_mem.h ****         s8++;
 3628              		.loc 3 201 9 is_stmt 1 view .LVU1263
 202:lvgl/src/draw/../misc/lv_mem.h ****         len--;
 3629              		.loc 3 202 9 view .LVU1264
 203:lvgl/src/draw/../misc/lv_mem.h ****     }
 3630              		.loc 3 203 9 view .LVU1265
 203:lvgl/src/draw/../misc/lv_mem.h ****     }
 3631              		.loc 3 203 12 is_stmt 0 view .LVU1266
 3632 00e2 013A     		subs	r2, r2, #1
 3633              	.LVL440:
 3634              	.L185:
 199:lvgl/src/draw/../misc/lv_mem.h ****         *d8 = *s8;
 3635              		.loc 3 199 11 is_stmt 1 view .LVU1267
 3636 00e4 002A     		cmp	r2, #0
 3637 00e6 F8D1     		bne	.L186
 199:lvgl/src/draw/../misc/lv_mem.h ****         *d8 = *s8;
 3638              		.loc 3 199 11 is_stmt 0 view .LVU1268
 3639              	.LBE94:
 3640              	.LBE95:
 611:lvgl/src/draw/lv_img_buf.c **** 
 3641              		.loc 1 611 21 view .LVU1269
ARM GAS  C:\usertemp\ccFesu0W.s 			page 106


 3642 00e8 4FF00209 		mov	r9, #2
 3643              	.LVL441:
 3644              	.L187:
 630:lvgl/src/draw/lv_img_buf.c ****         lv_color_t ct = LV_COLOR_CHROMA_KEY;
 3645              		.loc 1 630 5 is_stmt 1 view .LVU1270
 630:lvgl/src/draw/lv_img_buf.c ****         lv_color_t ct = LV_COLOR_CHROMA_KEY;
 3646              		.loc 1 630 8 is_stmt 0 view .LVU1271
 3647 00ec 94F83430 		ldrb	r3, [r4, #52]	@ zero_extendqisi2
 630:lvgl/src/draw/lv_img_buf.c ****         lv_color_t ct = LV_COLOR_CHROMA_KEY;
 3648              		.loc 1 630 7 view .LVU1272
 3649 00f0 13F0010F 		tst	r3, #1
 3650 00f4 03D0     		beq	.L190
 3651              	.LBB96:
 631:lvgl/src/draw/lv_img_buf.c ****         if(dsc->res.color.full == ct.full) return false;
 3652              		.loc 1 631 9 is_stmt 1 view .LVU1273
 3653              	.LVL442:
 3654              	.LBB97:
 3655              	.LBI97:
 597:lvgl/src/draw/../misc/lv_color.h **** {
 3656              		.loc 2 597 26 view .LVU1274
 3657              	.LBB98:
 600:lvgl/src/draw/../misc/lv_color.h **** #if LV_COLOR_16_SWAP == 0
 3658              		.loc 2 600 5 view .LVU1275
 616:lvgl/src/draw/../misc/lv_color.h **** #else
 3659              		.loc 2 616 5 view .LVU1276
 621:lvgl/src/draw/../misc/lv_color.h **** #elif LV_COLOR_DEPTH == 32
 3660              		.loc 2 621 5 view .LVU1277
 621:lvgl/src/draw/../misc/lv_color.h **** #elif LV_COLOR_DEPTH == 32
 3661              		.loc 2 621 5 is_stmt 0 view .LVU1278
 3662              	.LBE98:
 3663              	.LBE97:
 632:lvgl/src/draw/lv_img_buf.c ****     }
 3664              		.loc 1 632 9 is_stmt 1 view .LVU1279
 632:lvgl/src/draw/lv_img_buf.c ****     }
 3665              		.loc 1 632 26 is_stmt 0 view .LVU1280
 3666 00f6 A38A     		ldrh	r3, [r4, #20]
 632:lvgl/src/draw/lv_img_buf.c ****     }
 3667              		.loc 1 632 11 view .LVU1281
 3668 00f8 B3F5FC6F 		cmp	r3, #2016
 3669 00fc 30D0     		beq	.L199
 3670              	.L190:
 3671              	.LBE96:
 635:lvgl/src/draw/lv_img_buf.c **** 
 3672              		.loc 1 635 5 is_stmt 1 view .LVU1282
 635:lvgl/src/draw/lv_img_buf.c **** 
 3673              		.loc 1 635 16 is_stmt 0 view .LVU1283
 3674 00fe E37C     		ldrb	r3, [r4, #19]	@ zero_extendqisi2
 635:lvgl/src/draw/lv_img_buf.c **** 
 3675              		.loc 1 635 7 view .LVU1284
 3676 0100 83BB     		cbnz	r3, .L200
 635:lvgl/src/draw/lv_img_buf.c **** 
 3677              		.loc 1 635 44 discriminator 1 view .LVU1285
 3678 0102 0120     		movs	r0, #1
 3679 0104 3CE0     		b	.L182
 3680              	.LVL443:
 3681              	.L184:
 617:lvgl/src/draw/lv_img_buf.c ****             pxi     = dsc->cfg.src_w * ys_int * px_size + xs_int * px_size;
ARM GAS  C:\usertemp\ccFesu0W.s 			page 107


 3682              		.loc 1 617 13 is_stmt 1 view .LVU1286
 618:lvgl/src/draw/lv_img_buf.c ****             lv_memcpy_small(&dsc->res.color, &src_u8[pxi], px_size - 1);
 3683              		.loc 1 618 13 view .LVU1287
 618:lvgl/src/draw/lv_img_buf.c ****             lv_memcpy_small(&dsc->res.color, &src_u8[pxi], px_size - 1);
 3684              		.loc 1 618 57 is_stmt 0 view .LVU1288
 3685 0106 07FB0383 		mla	r3, r7, r3, r8
 3686 010a 03EB4303 		add	r3, r3, r3, lsl #1
 618:lvgl/src/draw/lv_img_buf.c ****             lv_memcpy_small(&dsc->res.color, &src_u8[pxi], px_size - 1);
 3687              		.loc 1 618 21 view .LVU1289
 3688 010e 1946     		mov	r1, r3
 3689              	.LVL444:
 619:lvgl/src/draw/lv_img_buf.c ****             dsc->res.opa = src_u8[pxi + px_size - 1];
 3690              		.loc 1 619 13 is_stmt 1 view .LVU1290
 619:lvgl/src/draw/lv_img_buf.c ****             dsc->res.opa = src_u8[pxi + px_size - 1];
 3691              		.loc 1 619 29 is_stmt 0 view .LVU1291
 3692 0110 04F1140E 		add	lr, r4, #20
 619:lvgl/src/draw/lv_img_buf.c ****             dsc->res.opa = src_u8[pxi + px_size - 1];
 3693              		.loc 1 619 46 view .LVU1292
 3694 0114 00EB030C 		add	ip, r0, r3
 3695              	.LVL445:
 3696              	.LBB99:
 3697              	.LBI99:
 194:lvgl/src/draw/../misc/lv_mem.h **** {
 3698              		.loc 3 194 44 is_stmt 1 view .LVU1293
 3699              	.LBB100:
 196:lvgl/src/draw/../misc/lv_mem.h ****     const uint8_t * s8 = (const uint8_t *)src;
 3700              		.loc 3 196 5 view .LVU1294
 197:lvgl/src/draw/../misc/lv_mem.h **** 
 3701              		.loc 3 197 5 view .LVU1295
 199:lvgl/src/draw/../misc/lv_mem.h ****         *d8 = *s8;
 3702              		.loc 3 199 5 view .LVU1296
 199:lvgl/src/draw/../misc/lv_mem.h ****         *d8 = *s8;
 3703              		.loc 3 199 10 is_stmt 0 view .LVU1297
 3704 0118 0222     		movs	r2, #2
 3705 011a 04E0     		b	.L188
 3706              	.LVL446:
 3707              	.L189:
 200:lvgl/src/draw/../misc/lv_mem.h ****         d8++;
 3708              		.loc 3 200 9 is_stmt 1 view .LVU1298
 200:lvgl/src/draw/../misc/lv_mem.h ****         d8++;
 3709              		.loc 3 200 15 is_stmt 0 view .LVU1299
 3710 011c 1CF8019B 		ldrb	r9, [ip], #1	@ zero_extendqisi2
 3711              	.LVL447:
 200:lvgl/src/draw/../misc/lv_mem.h ****         d8++;
 3712              		.loc 3 200 13 view .LVU1300
 3713 0120 0EF8019B 		strb	r9, [lr], #1
 3714              	.LVL448:
 201:lvgl/src/draw/../misc/lv_mem.h ****         s8++;
 3715              		.loc 3 201 9 is_stmt 1 view .LVU1301
 202:lvgl/src/draw/../misc/lv_mem.h ****         len--;
 3716              		.loc 3 202 9 view .LVU1302
 203:lvgl/src/draw/../misc/lv_mem.h ****     }
 3717              		.loc 3 203 9 view .LVU1303
 203:lvgl/src/draw/../misc/lv_mem.h ****     }
 3718              		.loc 3 203 12 is_stmt 0 view .LVU1304
 3719 0124 013A     		subs	r2, r2, #1
 3720              	.LVL449:
ARM GAS  C:\usertemp\ccFesu0W.s 			page 108


 3721              	.L188:
 199:lvgl/src/draw/../misc/lv_mem.h ****         *d8 = *s8;
 3722              		.loc 3 199 11 is_stmt 1 view .LVU1305
 3723 0126 002A     		cmp	r2, #0
 3724 0128 F8D1     		bne	.L189
 3725              		.loc 3 206 5 view .LVU1306
 3726              	.LVL450:
 3727              		.loc 3 206 5 is_stmt 0 view .LVU1307
 3728              	.LBE100:
 3729              	.LBE99:
 620:lvgl/src/draw/lv_img_buf.c ****         }
 3730              		.loc 1 620 13 is_stmt 1 view .LVU1308
 620:lvgl/src/draw/lv_img_buf.c ****         }
 3731              		.loc 1 620 34 is_stmt 0 view .LVU1309
 3732 012a 1844     		add	r0, r0, r3
 3733              	.LVL451:
 620:lvgl/src/draw/lv_img_buf.c ****         }
 3734              		.loc 1 620 34 view .LVU1310
 3735 012c 8378     		ldrb	r3, [r0, #2]	@ zero_extendqisi2
 620:lvgl/src/draw/lv_img_buf.c ****         }
 3736              		.loc 1 620 26 view .LVU1311
 3737 012e A375     		strb	r3, [r4, #22]
 617:lvgl/src/draw/lv_img_buf.c ****             pxi     = dsc->cfg.src_w * ys_int * px_size + xs_int * px_size;
 3738              		.loc 1 617 21 view .LVU1312
 3739 0130 4FF00309 		mov	r9, #3
 3740 0134 DAE7     		b	.L187
 3741              	.LVL452:
 3742              	.L183:
 624:lvgl/src/draw/lv_img_buf.c ****         px_size = 0;    /*unused*/
 3743              		.loc 1 624 9 is_stmt 1 view .LVU1313
 625:lvgl/src/draw/lv_img_buf.c ****         dsc->res.color = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, xs_int, ys_int, dsc->cfg.color)
 3744              		.loc 1 625 9 view .LVU1314
 626:lvgl/src/draw/lv_img_buf.c ****         dsc->res.opa = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, xs_int, ys_int);
 3745              		.loc 1 626 9 view .LVU1315
 626:lvgl/src/draw/lv_img_buf.c ****         dsc->res.opa = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, xs_int, ys_int);
 3746              		.loc 1 626 26 is_stmt 0 view .LVU1316
 3747 0136 04F1180A 		add	r10, r4, #24
 3748 013a 0FFA88F1 		sxth	r1, r8
 3749 013e 0FFA87FB 		sxth	fp, r7
 3750 0142 238A     		ldrh	r3, [r4, #16]
 3751 0144 5A46     		mov	r2, fp
 3752 0146 0191     		str	r1, [sp, #4]
 3753 0148 5046     		mov	r0, r10
 3754              	.LVL453:
 626:lvgl/src/draw/lv_img_buf.c ****         dsc->res.opa = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, xs_int, ys_int);
 3755              		.loc 1 626 26 view .LVU1317
 3756 014a FFF7FEFF 		bl	lv_img_buf_get_px_color
 3757              	.LVL454:
 626:lvgl/src/draw/lv_img_buf.c ****         dsc->res.opa = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, xs_int, ys_int);
 3758              		.loc 1 626 26 view .LVU1318
 3759 014e A082     		strh	r0, [r4, #20]	@ movhi
 627:lvgl/src/draw/lv_img_buf.c ****     }
 3760              		.loc 1 627 9 is_stmt 1 view .LVU1319
 627:lvgl/src/draw/lv_img_buf.c ****     }
 3761              		.loc 1 627 24 is_stmt 0 view .LVU1320
 3762 0150 5A46     		mov	r2, fp
 3763 0152 0199     		ldr	r1, [sp, #4]
ARM GAS  C:\usertemp\ccFesu0W.s 			page 109


 3764 0154 5046     		mov	r0, r10
 3765 0156 FFF7FEFF 		bl	lv_img_buf_get_px_alpha
 3766              	.LVL455:
 627:lvgl/src/draw/lv_img_buf.c ****     }
 3767              		.loc 1 627 22 discriminator 1 view .LVU1321
 3768 015a A075     		strb	r0, [r4, #22]
 624:lvgl/src/draw/lv_img_buf.c ****         px_size = 0;    /*unused*/
 3769              		.loc 1 624 13 view .LVU1322
 3770 015c 0021     		movs	r1, #0
 3771 015e C5E7     		b	.L187
 3772              	.LVL456:
 3773              	.L199:
 3774              	.LBB101:
 632:lvgl/src/draw/lv_img_buf.c ****     }
 3775              		.loc 1 632 44 is_stmt 1 discriminator 1 view .LVU1323
 632:lvgl/src/draw/lv_img_buf.c ****     }
 3776              		.loc 1 632 51 is_stmt 0 discriminator 1 view .LVU1324
 3777 0160 0020     		movs	r0, #0
 3778 0162 0DE0     		b	.L182
 3779              	.L200:
 632:lvgl/src/draw/lv_img_buf.c ****     }
 3780              		.loc 1 632 51 discriminator 1 view .LVU1325
 3781              	.LBE101:
 637:lvgl/src/draw/lv_img_buf.c ****     dsc->tmp.ys = ys;
 3782              		.loc 1 637 5 is_stmt 1 view .LVU1326
 637:lvgl/src/draw/lv_img_buf.c ****     dsc->tmp.ys = ys;
 3783              		.loc 1 637 17 is_stmt 0 view .LVU1327
 3784 0164 A587     		strh	r5, [r4, #60]	@ movhi
 638:lvgl/src/draw/lv_img_buf.c ****     dsc->tmp.xs_int = xs_int;
 3785              		.loc 1 638 5 is_stmt 1 view .LVU1328
 638:lvgl/src/draw/lv_img_buf.c ****     dsc->tmp.xs_int = xs_int;
 3786              		.loc 1 638 17 is_stmt 0 view .LVU1329
 3787 0166 E687     		strh	r6, [r4, #62]	@ movhi
 639:lvgl/src/draw/lv_img_buf.c ****     dsc->tmp.ys_int = ys_int;
 3788              		.loc 1 639 5 is_stmt 1 view .LVU1330
 639:lvgl/src/draw/lv_img_buf.c ****     dsc->tmp.ys_int = ys_int;
 3789              		.loc 1 639 21 is_stmt 0 view .LVU1331
 3790 0168 A4F84080 		strh	r8, [r4, #64]	@ movhi
 640:lvgl/src/draw/lv_img_buf.c ****     dsc->tmp.pxi = pxi;
 3791              		.loc 1 640 5 is_stmt 1 view .LVU1332
 640:lvgl/src/draw/lv_img_buf.c ****     dsc->tmp.pxi = pxi;
 3792              		.loc 1 640 21 is_stmt 0 view .LVU1333
 3793 016c A4F84270 		strh	r7, [r4, #66]	@ movhi
 641:lvgl/src/draw/lv_img_buf.c ****     dsc->tmp.px_size = px_size;
 3794              		.loc 1 641 5 is_stmt 1 view .LVU1334
 641:lvgl/src/draw/lv_img_buf.c ****     dsc->tmp.px_size = px_size;
 3795              		.loc 1 641 18 is_stmt 0 view .LVU1335
 3796 0170 6164     		str	r1, [r4, #68]
 642:lvgl/src/draw/lv_img_buf.c **** 
 3797              		.loc 1 642 5 is_stmt 1 view .LVU1336
 642:lvgl/src/draw/lv_img_buf.c **** 
 3798              		.loc 1 642 22 is_stmt 0 view .LVU1337
 3799 0172 84F84890 		strb	r9, [r4, #72]
 644:lvgl/src/draw/lv_img_buf.c ****     ret = _lv_img_buf_transform_anti_alias(dsc);
 3800              		.loc 1 644 5 is_stmt 1 view .LVU1338
 645:lvgl/src/draw/lv_img_buf.c **** 
 3801              		.loc 1 645 5 view .LVU1339
ARM GAS  C:\usertemp\ccFesu0W.s 			page 110


 645:lvgl/src/draw/lv_img_buf.c **** 
 3802              		.loc 1 645 11 is_stmt 0 view .LVU1340
 3803 0176 2046     		mov	r0, r4
 3804 0178 FFF7FEFF 		bl	_lv_img_buf_transform_anti_alias
 3805              	.LVL457:
 647:lvgl/src/draw/lv_img_buf.c **** }
 3806              		.loc 1 647 5 is_stmt 1 view .LVU1341
 647:lvgl/src/draw/lv_img_buf.c **** }
 3807              		.loc 1 647 12 is_stmt 0 view .LVU1342
 3808 017c 00E0     		b	.L182
 3809              	.LVL458:
 3810              	.L192:
 601:lvgl/src/draw/lv_img_buf.c ****     else if(xs_int < 0) return false;
 3811              		.loc 1 601 41 discriminator 1 view .LVU1343
 3812 017e 0020     		movs	r0, #0
 3813              	.LVL459:
 3814              	.L182:
 648:lvgl/src/draw/lv_img_buf.c **** 
 3815              		.loc 1 648 1 view .LVU1344
 3816 0180 03B0     		add	sp, sp, #12
 3817              	.LCFI29:
 3818              		.cfi_remember_state
 3819              		.cfi_def_cfa_offset 36
 3820              		@ sp needed
 3821 0182 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3822              	.LVL460:
 3823              	.L193:
 3824              	.LCFI30:
 3825              		.cfi_restore_state
 602:lvgl/src/draw/lv_img_buf.c **** 
 3826              		.loc 1 602 32 discriminator 1 view .LVU1345
 3827 0186 0020     		movs	r0, #0
 3828              	.LVL461:
 602:lvgl/src/draw/lv_img_buf.c **** 
 3829              		.loc 1 602 32 discriminator 1 view .LVU1346
 3830 0188 FAE7     		b	.L182
 3831              	.LVL462:
 3832              	.L194:
 604:lvgl/src/draw/lv_img_buf.c ****     else if(ys_int < 0) return false;
 3833              		.loc 1 604 41 discriminator 1 view .LVU1347
 3834 018a 0020     		movs	r0, #0
 3835              	.LVL463:
 604:lvgl/src/draw/lv_img_buf.c ****     else if(ys_int < 0) return false;
 3836              		.loc 1 604 41 discriminator 1 view .LVU1348
 3837 018c F8E7     		b	.L182
 3838              	.LVL464:
 3839              	.L195:
 605:lvgl/src/draw/lv_img_buf.c **** 
 3840              		.loc 1 605 32 discriminator 1 view .LVU1349
 3841 018e 0020     		movs	r0, #0
 3842              	.LVL465:
 605:lvgl/src/draw/lv_img_buf.c **** 
 3843              		.loc 1 605 32 discriminator 1 view .LVU1350
 3844 0190 F6E7     		b	.L182
 3845              		.cfi_endproc
 3846              	.LFE65:
 3848              		.section	.rodata
ARM GAS  C:\usertemp\ccFesu0W.s 			page 111


 3849              		.align	2
 3850              		.set	.LANCHOR0,. + 0
 3851              	.LC0:
 3852 0000 00112233 		.ascii	"\000\021\"3DUfw\210\231\252\273\314\335\356\377"
 3852      44556677 
 3852      8899AABB 
 3852      CCDDEEFF 
 3853              		.text
 3854              	.Letext0:
 3855              		.file 4 "D:/armtoolchain/arm-gnu-toolchain-13.3.rel1-mingw-w64-i686-arm-none-eabi/lib/gcc/arm-none
 3856              		.file 5 "D:/armtoolchain/arm-gnu-toolchain-13.3.rel1-mingw-w64-i686-arm-none-eabi/arm-none-eabi/in
 3857              		.file 6 "D:/armtoolchain/arm-gnu-toolchain-13.3.rel1-mingw-w64-i686-arm-none-eabi/arm-none-eabi/in
 3858              		.file 7 "lvgl/src/draw/../misc/lv_area.h"
 3859              		.file 8 "lvgl/src/draw/lv_img_buf.h"
 3860              		.file 9 "lvgl/src/draw/lv_draw_img.h"
 3861              		.file 10 "lvgl/src/draw/../misc/lv_math.h"
ARM GAS  C:\usertemp\ccFesu0W.s 			page 112


DEFINED SYMBOLS
                            *ABS*:00000000 lv_img_buf.c
C:\usertemp\ccFesu0W.s:20     .text.lv_color_to32:00000000 $t
C:\usertemp\ccFesu0W.s:25     .text.lv_color_to32:00000000 lv_color_to32
C:\usertemp\ccFesu0W.s:71     .text.lv_color_mix:00000000 $t
C:\usertemp\ccFesu0W.s:76     .text.lv_color_mix:00000000 lv_color_mix
C:\usertemp\ccFesu0W.s:131    .text.lv_color_mix:0000002c $d
C:\usertemp\ccFesu0W.s:136    .text.lv_img_buf_get_px_color:00000000 $t
C:\usertemp\ccFesu0W.s:142    .text.lv_img_buf_get_px_color:00000000 lv_img_buf_get_px_color
C:\usertemp\ccFesu0W.s:203    .text.lv_img_buf_get_px_color:00000030 $d
C:\usertemp\ccFesu0W.s:465    .text.lv_img_buf_get_px_alpha:00000000 $t
C:\usertemp\ccFesu0W.s:471    .text.lv_img_buf_get_px_alpha:00000000 lv_img_buf_get_px_alpha
C:\usertemp\ccFesu0W.s:506    .text.lv_img_buf_get_px_alpha:0000001c $d
C:\usertemp\ccFesu0W.s:516    .text.lv_img_buf_get_px_alpha:00000026 $t
C:\usertemp\ccFesu0W.s:738    .text.lv_img_buf_get_px_alpha:000000f4 $d
C:\usertemp\ccFesu0W.s:744    .text.lv_img_buf_set_px_alpha:00000000 $t
C:\usertemp\ccFesu0W.s:750    .text.lv_img_buf_set_px_alpha:00000000 lv_img_buf_set_px_alpha
C:\usertemp\ccFesu0W.s:785    .text.lv_img_buf_set_px_alpha:00000026 $d
C:\usertemp\ccFesu0W.s:795    .text.lv_img_buf_set_px_alpha:00000030 $t
C:\usertemp\ccFesu0W.s:1020   .text.lv_img_buf_set_px_color:00000000 $t
C:\usertemp\ccFesu0W.s:1026   .text.lv_img_buf_set_px_color:00000000 lv_img_buf_set_px_color
C:\usertemp\ccFesu0W.s:1064   .text.lv_img_buf_set_px_color:00000020 $d
C:\usertemp\ccFesu0W.s:1411   .text.lv_img_buf_set_palette:00000000 $t
C:\usertemp\ccFesu0W.s:1417   .text.lv_img_buf_set_palette:00000000 lv_img_buf_set_palette
C:\usertemp\ccFesu0W.s:1541   .text.lv_img_buf_free:00000000 $t
C:\usertemp\ccFesu0W.s:1547   .text.lv_img_buf_free:00000000 lv_img_buf_free
C:\usertemp\ccFesu0W.s:1592   .text.lv_img_buf_get_img_size:00000000 $t
C:\usertemp\ccFesu0W.s:1598   .text.lv_img_buf_get_img_size:00000000 lv_img_buf_get_img_size
C:\usertemp\ccFesu0W.s:1614   .text.lv_img_buf_get_img_size:0000000a $d
C:\usertemp\ccFesu0W.s:1787   .text.lv_img_buf_alloc:00000000 $t
C:\usertemp\ccFesu0W.s:1793   .text.lv_img_buf_alloc:00000000 lv_img_buf_alloc
C:\usertemp\ccFesu0W.s:1908   .text._lv_img_buf_transform_init:00000000 $t
C:\usertemp\ccFesu0W.s:1914   .text._lv_img_buf_transform_init:00000000 _lv_img_buf_transform_init
C:\usertemp\ccFesu0W.s:2142   .text._lv_img_buf_transform_init:00000128 $d
C:\usertemp\ccFesu0W.s:2147   .text._lv_img_buf_get_transformed_area:00000000 $t
C:\usertemp\ccFesu0W.s:2153   .text._lv_img_buf_get_transformed_area:00000000 _lv_img_buf_get_transformed_area
C:\usertemp\ccFesu0W.s:2580   .text._lv_img_buf_get_transformed_area:00000208 $d
C:\usertemp\ccFesu0W.s:2585   .text._lv_img_buf_transform_anti_alias:00000000 $t
C:\usertemp\ccFesu0W.s:2591   .text._lv_img_buf_transform_anti_alias:00000000 _lv_img_buf_transform_anti_alias
C:\usertemp\ccFesu0W.s:3397   .text._lv_img_buf_transform:00000000 $t
C:\usertemp\ccFesu0W.s:3403   .text._lv_img_buf_transform:00000000 _lv_img_buf_transform
C:\usertemp\ccFesu0W.s:3849   .rodata:00000000 $d
C:\usertemp\ccFesu0W.s:214    .text.lv_img_buf_get_px_color:0000003b $d
C:\usertemp\ccFesu0W.s:214    .text.lv_img_buf_get_px_color:0000003c $t
C:\usertemp\ccFesu0W.s:1071   .text.lv_img_buf_set_px_color:00000027 $d
C:\usertemp\ccFesu0W.s:1071   .text.lv_img_buf_set_px_color:00000028 $t
C:\usertemp\ccFesu0W.s:1625   .text.lv_img_buf_get_img_size:00000015 $d
C:\usertemp\ccFesu0W.s:1625   .text.lv_img_buf_get_img_size:00000016 $t

UNDEFINED SYMBOLS
lv_img_cf_get_px_size
lv_mem_free
lv_mem_alloc
lv_memset_00
lv_trigo_sin
lv_img_cf_is_chroma_keyed
lv_img_cf_has_alpha
ARM GAS  C:\usertemp\ccFesu0W.s 			page 113


