ARM GAS  C:\usertemp\ccUMpah2.s 			page 1


   1              		.cpu cortex-m7
   2              		.arch armv7e-m
   3              		.fpu fpv5-d16
   4              		.eabi_attribute 28, 1
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.file	"sd_diskio.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.file 1 "FATFS/Target/sd_diskio.c"
  19              		.section	.text.SD_CheckStatus,"ax",%progbits
  20              		.align	1
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  25              	SD_CheckStatus:
  26              	.LVL0:
  27              	.LFB342:
   1:FATFS/Target/sd_diskio.c **** /* USER CODE BEGIN Header */
   2:FATFS/Target/sd_diskio.c **** /**
   3:FATFS/Target/sd_diskio.c ****   ******************************************************************************
   4:FATFS/Target/sd_diskio.c ****   * @file    sd_diskio.c
   5:FATFS/Target/sd_diskio.c ****   * @brief   SD Disk I/O driver
   6:FATFS/Target/sd_diskio.c ****   ******************************************************************************
   7:FATFS/Target/sd_diskio.c ****   * @attention
   8:FATFS/Target/sd_diskio.c ****   *
   9:FATFS/Target/sd_diskio.c ****   * <h2><center>&copy; Copyright (c) 2024 STMicroelectronics.
  10:FATFS/Target/sd_diskio.c ****   * All rights reserved.</center></h2>
  11:FATFS/Target/sd_diskio.c ****   *
  12:FATFS/Target/sd_diskio.c ****   * This software component is licensed by ST under Ultimate Liberty license
  13:FATFS/Target/sd_diskio.c ****   * SLA0044, the "License"; You may not use this file except in compliance with
  14:FATFS/Target/sd_diskio.c ****   * the License. You may obtain a copy of the License at:
  15:FATFS/Target/sd_diskio.c ****   *                             www.st.com/SLA0044
  16:FATFS/Target/sd_diskio.c ****   *
  17:FATFS/Target/sd_diskio.c ****   ******************************************************************************
  18:FATFS/Target/sd_diskio.c ****   */
  19:FATFS/Target/sd_diskio.c **** /* USER CODE END Header */
  20:FATFS/Target/sd_diskio.c **** 
  21:FATFS/Target/sd_diskio.c **** /* Note: code generation based on sd_diskio_dma_rtos_template_bspv1.c v2.1.4
  22:FATFS/Target/sd_diskio.c ****    as FreeRTOS is enabled. */
  23:FATFS/Target/sd_diskio.c **** 
  24:FATFS/Target/sd_diskio.c **** /* USER CODE BEGIN firstSection */
  25:FATFS/Target/sd_diskio.c **** /* can be used to modify / undefine following code or add new definitions */
  26:FATFS/Target/sd_diskio.c **** /* USER CODE END firstSection*/
  27:FATFS/Target/sd_diskio.c **** 
  28:FATFS/Target/sd_diskio.c **** /* Includes ------------------------------------------------------------------*/
  29:FATFS/Target/sd_diskio.c **** #include "ff_gen_drv.h"
  30:FATFS/Target/sd_diskio.c **** #include "sd_diskio.h"
  31:FATFS/Target/sd_diskio.c **** 
ARM GAS  C:\usertemp\ccUMpah2.s 			page 2


  32:FATFS/Target/sd_diskio.c **** #include <string.h>
  33:FATFS/Target/sd_diskio.c **** #include <stdio.h>
  34:FATFS/Target/sd_diskio.c **** 
  35:FATFS/Target/sd_diskio.c **** /* Private typedef -----------------------------------------------------------*/
  36:FATFS/Target/sd_diskio.c **** /* Private define ------------------------------------------------------------*/
  37:FATFS/Target/sd_diskio.c **** 
  38:FATFS/Target/sd_diskio.c **** #define QUEUE_SIZE         (uint32_t) 10
  39:FATFS/Target/sd_diskio.c **** #define READ_CPLT_MSG      (uint32_t) 1
  40:FATFS/Target/sd_diskio.c **** #define WRITE_CPLT_MSG     (uint32_t) 2
  41:FATFS/Target/sd_diskio.c **** /*
  42:FATFS/Target/sd_diskio.c **** ==================================================================
  43:FATFS/Target/sd_diskio.c **** enable the defines below to send custom rtos messages
  44:FATFS/Target/sd_diskio.c **** when an error or an abort occurs.
  45:FATFS/Target/sd_diskio.c **** Notice: depending on the HAL/SD driver the HAL_SD_ErrorCallback()
  46:FATFS/Target/sd_diskio.c **** may not be available.
  47:FATFS/Target/sd_diskio.c **** See BSP_SD_ErrorCallback() and BSP_SD_AbortCallback() below
  48:FATFS/Target/sd_diskio.c **** ==================================================================
  49:FATFS/Target/sd_diskio.c **** 
  50:FATFS/Target/sd_diskio.c **** #define RW_ERROR_MSG       (uint32_t) 3
  51:FATFS/Target/sd_diskio.c **** #define RW_ABORT_MSG       (uint32_t) 4
  52:FATFS/Target/sd_diskio.c **** */
  53:FATFS/Target/sd_diskio.c **** /*
  54:FATFS/Target/sd_diskio.c ****  * the following Timeout is useful to give the control back to the applications
  55:FATFS/Target/sd_diskio.c ****  * in case of errors in either BSP_SD_ReadCpltCallback() or BSP_SD_WriteCpltCallback()
  56:FATFS/Target/sd_diskio.c ****  * the value by default is as defined in the BSP platform driver otherwise 30 secs
  57:FATFS/Target/sd_diskio.c ****  */
  58:FATFS/Target/sd_diskio.c **** #define SD_TIMEOUT 30 * 1000
  59:FATFS/Target/sd_diskio.c **** 
  60:FATFS/Target/sd_diskio.c **** #define SD_DEFAULT_BLOCK_SIZE 512
  61:FATFS/Target/sd_diskio.c **** 
  62:FATFS/Target/sd_diskio.c **** /*
  63:FATFS/Target/sd_diskio.c ****  * Depending on the use case, the SD card initialization could be done at the
  64:FATFS/Target/sd_diskio.c ****  * application level: if it is the case define the flag below to disable
  65:FATFS/Target/sd_diskio.c ****  * the BSP_SD_Init() call in the SD_Initialize() and add a call to
  66:FATFS/Target/sd_diskio.c ****  * BSP_SD_Init() elsewhere in the application.
  67:FATFS/Target/sd_diskio.c ****  */
  68:FATFS/Target/sd_diskio.c **** /* USER CODE BEGIN disableSDInit */
  69:FATFS/Target/sd_diskio.c **** /* #define DISABLE_SD_INIT */
  70:FATFS/Target/sd_diskio.c **** /* USER CODE END disableSDInit */
  71:FATFS/Target/sd_diskio.c **** 
  72:FATFS/Target/sd_diskio.c **** /*
  73:FATFS/Target/sd_diskio.c ****  * when using cacheable memory region, it may be needed to maintain the cache
  74:FATFS/Target/sd_diskio.c ****  * validity. Enable the define below to activate a cache maintenance at each
  75:FATFS/Target/sd_diskio.c ****  * read and write operation.
  76:FATFS/Target/sd_diskio.c ****  * Notice: This is applicable only for cortex M7 based platform.
  77:FATFS/Target/sd_diskio.c ****  */
  78:FATFS/Target/sd_diskio.c **** /* USER CODE BEGIN enableSDDmaCacheMaintenance */
  79:FATFS/Target/sd_diskio.c **** /* #define ENABLE_SD_DMA_CACHE_MAINTENANCE  1 */
  80:FATFS/Target/sd_diskio.c **** /* USER CODE END enableSDDmaCacheMaintenance */
  81:FATFS/Target/sd_diskio.c **** 
  82:FATFS/Target/sd_diskio.c **** /*
  83:FATFS/Target/sd_diskio.c **** * Some DMA requires 4-Byte aligned address buffer to correctly read/write data,
  84:FATFS/Target/sd_diskio.c **** * in FatFs some accesses aren't thus we need a 4-byte aligned scratch buffer to correctly
  85:FATFS/Target/sd_diskio.c **** * transfer data
  86:FATFS/Target/sd_diskio.c **** */
  87:FATFS/Target/sd_diskio.c **** /* USER CODE BEGIN enableScratchBuffer */
  88:FATFS/Target/sd_diskio.c **** /* #define ENABLE_SCRATCH_BUFFER */
ARM GAS  C:\usertemp\ccUMpah2.s 			page 3


  89:FATFS/Target/sd_diskio.c **** /* USER CODE END enableScratchBuffer */
  90:FATFS/Target/sd_diskio.c **** 
  91:FATFS/Target/sd_diskio.c **** /* Private variables ---------------------------------------------------------*/
  92:FATFS/Target/sd_diskio.c **** #if defined(ENABLE_SCRATCH_BUFFER)
  93:FATFS/Target/sd_diskio.c **** #if defined (ENABLE_SD_DMA_CACHE_MAINTENANCE)
  94:FATFS/Target/sd_diskio.c **** ALIGN_32BYTES(static uint8_t scratch[BLOCKSIZE]); // 32-Byte aligned for cache maintenance
  95:FATFS/Target/sd_diskio.c **** #else
  96:FATFS/Target/sd_diskio.c **** __ALIGN_BEGIN static uint8_t scratch[BLOCKSIZE] __ALIGN_END;
  97:FATFS/Target/sd_diskio.c **** #endif
  98:FATFS/Target/sd_diskio.c **** #endif
  99:FATFS/Target/sd_diskio.c **** /* Disk status */
 100:FATFS/Target/sd_diskio.c **** static volatile DSTATUS Stat = STA_NOINIT;
 101:FATFS/Target/sd_diskio.c **** 
 102:FATFS/Target/sd_diskio.c **** #if (osCMSIS <= 0x20000U)
 103:FATFS/Target/sd_diskio.c **** static osMessageQId SDQueueID = NULL;
 104:FATFS/Target/sd_diskio.c **** #else
 105:FATFS/Target/sd_diskio.c **** static osMessageQueueId_t SDQueueID = NULL;
 106:FATFS/Target/sd_diskio.c **** #endif
 107:FATFS/Target/sd_diskio.c **** /* Private function prototypes -----------------------------------------------*/
 108:FATFS/Target/sd_diskio.c **** static DSTATUS SD_CheckStatus(BYTE lun);
 109:FATFS/Target/sd_diskio.c **** DSTATUS SD_initialize (BYTE);
 110:FATFS/Target/sd_diskio.c **** DSTATUS SD_status (BYTE);
 111:FATFS/Target/sd_diskio.c **** DRESULT SD_read (BYTE, BYTE*, DWORD, UINT);
 112:FATFS/Target/sd_diskio.c **** #if _USE_WRITE == 1
 113:FATFS/Target/sd_diskio.c **** DRESULT SD_write (BYTE, const BYTE*, DWORD, UINT);
 114:FATFS/Target/sd_diskio.c **** #endif /* _USE_WRITE == 1 */
 115:FATFS/Target/sd_diskio.c **** #if _USE_IOCTL == 1
 116:FATFS/Target/sd_diskio.c **** DRESULT SD_ioctl (BYTE, BYTE, void*);
 117:FATFS/Target/sd_diskio.c **** #endif  /* _USE_IOCTL == 1 */
 118:FATFS/Target/sd_diskio.c **** 
 119:FATFS/Target/sd_diskio.c **** const Diskio_drvTypeDef  SD_Driver =
 120:FATFS/Target/sd_diskio.c **** {
 121:FATFS/Target/sd_diskio.c ****   SD_initialize,
 122:FATFS/Target/sd_diskio.c ****   SD_status,
 123:FATFS/Target/sd_diskio.c ****   SD_read,
 124:FATFS/Target/sd_diskio.c **** #if  _USE_WRITE == 1
 125:FATFS/Target/sd_diskio.c ****   SD_write,
 126:FATFS/Target/sd_diskio.c **** #endif /* _USE_WRITE == 1 */
 127:FATFS/Target/sd_diskio.c **** 
 128:FATFS/Target/sd_diskio.c **** #if  _USE_IOCTL == 1
 129:FATFS/Target/sd_diskio.c ****   SD_ioctl,
 130:FATFS/Target/sd_diskio.c **** #endif /* _USE_IOCTL == 1 */
 131:FATFS/Target/sd_diskio.c **** };
 132:FATFS/Target/sd_diskio.c **** 
 133:FATFS/Target/sd_diskio.c **** /* USER CODE BEGIN beforeFunctionSection */
 134:FATFS/Target/sd_diskio.c **** /* can be used to modify / undefine following code or add new code */
 135:FATFS/Target/sd_diskio.c **** /* USER CODE END beforeFunctionSection */
 136:FATFS/Target/sd_diskio.c **** 
 137:FATFS/Target/sd_diskio.c **** /* Private functions ---------------------------------------------------------*/
 138:FATFS/Target/sd_diskio.c **** 
 139:FATFS/Target/sd_diskio.c **** static int SD_CheckStatusWithTimeout(uint32_t timeout)
 140:FATFS/Target/sd_diskio.c **** {
 141:FATFS/Target/sd_diskio.c ****   uint32_t timer;
 142:FATFS/Target/sd_diskio.c ****   /* block until SDIO peripheral is ready again or a timeout occur */
 143:FATFS/Target/sd_diskio.c **** #if (osCMSIS <= 0x20000U)
 144:FATFS/Target/sd_diskio.c ****   timer = osKernelSysTick();
 145:FATFS/Target/sd_diskio.c ****   while( osKernelSysTick() - timer < timeout)
ARM GAS  C:\usertemp\ccUMpah2.s 			page 4


 146:FATFS/Target/sd_diskio.c **** #else
 147:FATFS/Target/sd_diskio.c ****   timer = osKernelGetTickCount();
 148:FATFS/Target/sd_diskio.c ****   while( osKernelGetTickCount() - timer < timeout)
 149:FATFS/Target/sd_diskio.c **** #endif
 150:FATFS/Target/sd_diskio.c ****   {
 151:FATFS/Target/sd_diskio.c ****     if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 152:FATFS/Target/sd_diskio.c ****     {
 153:FATFS/Target/sd_diskio.c ****       return 0;
 154:FATFS/Target/sd_diskio.c ****     }
 155:FATFS/Target/sd_diskio.c ****   }
 156:FATFS/Target/sd_diskio.c **** 
 157:FATFS/Target/sd_diskio.c ****   return -1;
 158:FATFS/Target/sd_diskio.c **** }
 159:FATFS/Target/sd_diskio.c **** 
 160:FATFS/Target/sd_diskio.c **** static DSTATUS SD_CheckStatus(BYTE lun)
 161:FATFS/Target/sd_diskio.c **** {
  28              		.loc 1 161 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		.loc 1 161 1 is_stmt 0 view .LVU1
  33 0000 08B5     		push	{r3, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 8
  36              		.cfi_offset 3, -8
  37              		.cfi_offset 14, -4
 162:FATFS/Target/sd_diskio.c ****   Stat = STA_NOINIT;
  38              		.loc 1 162 3 is_stmt 1 view .LVU2
  39              		.loc 1 162 8 is_stmt 0 view .LVU3
  40 0002 074B     		ldr	r3, .L4
  41 0004 0122     		movs	r2, #1
  42 0006 1A70     		strb	r2, [r3]
 163:FATFS/Target/sd_diskio.c **** 
 164:FATFS/Target/sd_diskio.c ****   if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
  43              		.loc 1 164 3 is_stmt 1 view .LVU4
  44              		.loc 1 164 6 is_stmt 0 view .LVU5
  45 0008 FFF7FEFF 		bl	BSP_SD_GetCardState
  46              	.LVL1:
  47              		.loc 1 164 5 discriminator 1 view .LVU6
  48 000c 20B9     		cbnz	r0, .L2
 165:FATFS/Target/sd_diskio.c ****   {
 166:FATFS/Target/sd_diskio.c ****     Stat &= ~STA_NOINIT;
  49              		.loc 1 166 5 is_stmt 1 view .LVU7
  50              		.loc 1 166 10 is_stmt 0 view .LVU8
  51 000e 044A     		ldr	r2, .L4
  52 0010 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
  53 0012 03F0FE03 		and	r3, r3, #254
  54 0016 1370     		strb	r3, [r2]
  55              	.L2:
 167:FATFS/Target/sd_diskio.c ****   }
 168:FATFS/Target/sd_diskio.c **** 
 169:FATFS/Target/sd_diskio.c ****   return Stat;
  56              		.loc 1 169 3 is_stmt 1 view .LVU9
  57              		.loc 1 169 10 is_stmt 0 view .LVU10
  58 0018 014B     		ldr	r3, .L4
  59 001a 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 170:FATFS/Target/sd_diskio.c **** }
ARM GAS  C:\usertemp\ccUMpah2.s 			page 5


  60              		.loc 1 170 1 view .LVU11
  61 001c 08BD     		pop	{r3, pc}
  62              	.L5:
  63 001e 00BF     		.align	2
  64              	.L4:
  65 0020 00000000 		.word	Stat
  66              		.cfi_endproc
  67              	.LFE342:
  69              		.section	.text.SD_initialize,"ax",%progbits
  70              		.align	1
  71              		.global	SD_initialize
  72              		.syntax unified
  73              		.thumb
  74              		.thumb_func
  76              	SD_initialize:
  77              	.LVL2:
  78              	.LFB343:
 171:FATFS/Target/sd_diskio.c **** 
 172:FATFS/Target/sd_diskio.c **** /**
 173:FATFS/Target/sd_diskio.c ****   * @brief  Initializes a Drive
 174:FATFS/Target/sd_diskio.c ****   * @param  lun : not used
 175:FATFS/Target/sd_diskio.c ****   * @retval DSTATUS: Operation status
 176:FATFS/Target/sd_diskio.c ****   */
 177:FATFS/Target/sd_diskio.c **** DSTATUS SD_initialize(BYTE lun)
 178:FATFS/Target/sd_diskio.c **** {
  79              		.loc 1 178 1 is_stmt 1 view -0
  80              		.cfi_startproc
  81              		@ args = 0, pretend = 0, frame = 16
  82              		@ frame_needed = 0, uses_anonymous_args = 0
  83              		.loc 1 178 1 is_stmt 0 view .LVU13
  84 0000 10B5     		push	{r4, lr}
  85              	.LCFI1:
  86              		.cfi_def_cfa_offset 8
  87              		.cfi_offset 4, -8
  88              		.cfi_offset 14, -4
  89 0002 84B0     		sub	sp, sp, #16
  90              	.LCFI2:
  91              		.cfi_def_cfa_offset 24
  92 0004 0446     		mov	r4, r0
 179:FATFS/Target/sd_diskio.c **** Stat = STA_NOINIT;
  93              		.loc 1 179 1 is_stmt 1 view .LVU14
  94              		.loc 1 179 6 is_stmt 0 view .LVU15
  95 0006 184B     		ldr	r3, .L14
  96 0008 0122     		movs	r2, #1
  97 000a 1A70     		strb	r2, [r3]
 180:FATFS/Target/sd_diskio.c **** 
 181:FATFS/Target/sd_diskio.c ****   /*
 182:FATFS/Target/sd_diskio.c ****    * check that the kernel has been started before continuing
 183:FATFS/Target/sd_diskio.c ****    * as the osMessage API will fail otherwise
 184:FATFS/Target/sd_diskio.c ****    */
 185:FATFS/Target/sd_diskio.c **** #if (osCMSIS <= 0x20000U)
 186:FATFS/Target/sd_diskio.c ****   if(osKernelRunning())
  98              		.loc 1 186 3 is_stmt 1 view .LVU16
  99              		.loc 1 186 6 is_stmt 0 view .LVU17
 100 000c FFF7FEFF 		bl	osKernelRunning
 101              	.LVL3:
 102              		.loc 1 186 5 discriminator 1 view .LVU18
ARM GAS  C:\usertemp\ccUMpah2.s 			page 6


 103 0010 18B9     		cbnz	r0, .L11
 104              	.LVL4:
 105              	.L7:
 187:FATFS/Target/sd_diskio.c **** #else
 188:FATFS/Target/sd_diskio.c ****   if(osKernelGetState() == osKernelRunning)
 189:FATFS/Target/sd_diskio.c **** #endif
 190:FATFS/Target/sd_diskio.c ****   {
 191:FATFS/Target/sd_diskio.c **** #if !defined(DISABLE_SD_INIT)
 192:FATFS/Target/sd_diskio.c **** 
 193:FATFS/Target/sd_diskio.c ****     if(BSP_SD_Init() == MSD_OK)
 194:FATFS/Target/sd_diskio.c ****     {
 195:FATFS/Target/sd_diskio.c ****       Stat = SD_CheckStatus(lun);
 196:FATFS/Target/sd_diskio.c ****     }
 197:FATFS/Target/sd_diskio.c **** 
 198:FATFS/Target/sd_diskio.c **** #else
 199:FATFS/Target/sd_diskio.c ****     Stat = SD_CheckStatus(lun);
 200:FATFS/Target/sd_diskio.c **** #endif
 201:FATFS/Target/sd_diskio.c **** 
 202:FATFS/Target/sd_diskio.c ****     /*
 203:FATFS/Target/sd_diskio.c ****     * if the SD is correctly initialized, create the operation queue
 204:FATFS/Target/sd_diskio.c ****     * if not already created
 205:FATFS/Target/sd_diskio.c ****     */
 206:FATFS/Target/sd_diskio.c **** 
 207:FATFS/Target/sd_diskio.c ****     if (Stat != STA_NOINIT)
 208:FATFS/Target/sd_diskio.c ****     {
 209:FATFS/Target/sd_diskio.c ****       if (SDQueueID == NULL)
 210:FATFS/Target/sd_diskio.c ****       {
 211:FATFS/Target/sd_diskio.c ****  #if (osCMSIS <= 0x20000U)
 212:FATFS/Target/sd_diskio.c ****       osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 213:FATFS/Target/sd_diskio.c ****       SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 214:FATFS/Target/sd_diskio.c **** #else
 215:FATFS/Target/sd_diskio.c ****       SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 216:FATFS/Target/sd_diskio.c **** #endif
 217:FATFS/Target/sd_diskio.c ****       }
 218:FATFS/Target/sd_diskio.c **** 
 219:FATFS/Target/sd_diskio.c ****       if (SDQueueID == NULL)
 220:FATFS/Target/sd_diskio.c ****       {
 221:FATFS/Target/sd_diskio.c ****         Stat |= STA_NOINIT;
 222:FATFS/Target/sd_diskio.c ****       }
 223:FATFS/Target/sd_diskio.c ****     }
 224:FATFS/Target/sd_diskio.c ****   }
 225:FATFS/Target/sd_diskio.c **** 
 226:FATFS/Target/sd_diskio.c ****   return Stat;
 106              		.loc 1 226 3 is_stmt 1 view .LVU19
 107              		.loc 1 226 10 is_stmt 0 view .LVU20
 108 0012 154B     		ldr	r3, .L14
 109 0014 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 227:FATFS/Target/sd_diskio.c **** }
 110              		.loc 1 227 1 view .LVU21
 111 0016 04B0     		add	sp, sp, #16
 112              	.LCFI3:
 113              		.cfi_remember_state
 114              		.cfi_def_cfa_offset 8
 115              		@ sp needed
 116 0018 10BD     		pop	{r4, pc}
 117              	.L11:
 118              	.LCFI4:
ARM GAS  C:\usertemp\ccUMpah2.s 			page 7


 119              		.cfi_restore_state
 193:FATFS/Target/sd_diskio.c ****     {
 120              		.loc 1 193 5 is_stmt 1 view .LVU22
 193:FATFS/Target/sd_diskio.c ****     {
 121              		.loc 1 193 8 is_stmt 0 view .LVU23
 122 001a FFF7FEFF 		bl	BSP_SD_Init
 123              	.LVL5:
 193:FATFS/Target/sd_diskio.c ****     {
 124              		.loc 1 193 7 discriminator 1 view .LVU24
 125 001e 88B1     		cbz	r0, .L12
 126              	.L8:
 207:FATFS/Target/sd_diskio.c ****     {
 127              		.loc 1 207 5 is_stmt 1 view .LVU25
 207:FATFS/Target/sd_diskio.c ****     {
 128              		.loc 1 207 14 is_stmt 0 view .LVU26
 129 0020 114B     		ldr	r3, .L14
 130 0022 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 131 0024 DBB2     		uxtb	r3, r3
 207:FATFS/Target/sd_diskio.c ****     {
 132              		.loc 1 207 8 view .LVU27
 133 0026 012B     		cmp	r3, #1
 134 0028 F3D0     		beq	.L7
 209:FATFS/Target/sd_diskio.c ****       {
 135              		.loc 1 209 7 is_stmt 1 view .LVU28
 209:FATFS/Target/sd_diskio.c ****       {
 136              		.loc 1 209 21 is_stmt 0 view .LVU29
 137 002a 104B     		ldr	r3, .L14+4
 138 002c 1B68     		ldr	r3, [r3]
 209:FATFS/Target/sd_diskio.c ****       {
 139              		.loc 1 209 10 view .LVU30
 140 002e 7BB1     		cbz	r3, .L13
 141              	.L9:
 219:FATFS/Target/sd_diskio.c ****       {
 142              		.loc 1 219 7 is_stmt 1 view .LVU31
 219:FATFS/Target/sd_diskio.c ****       {
 143              		.loc 1 219 21 is_stmt 0 view .LVU32
 144 0030 0E4B     		ldr	r3, .L14+4
 145 0032 1B68     		ldr	r3, [r3]
 219:FATFS/Target/sd_diskio.c ****       {
 146              		.loc 1 219 10 view .LVU33
 147 0034 002B     		cmp	r3, #0
 148 0036 ECD1     		bne	.L7
 221:FATFS/Target/sd_diskio.c ****       }
 149              		.loc 1 221 9 is_stmt 1 view .LVU34
 221:FATFS/Target/sd_diskio.c ****       }
 150              		.loc 1 221 14 is_stmt 0 view .LVU35
 151 0038 0B4A     		ldr	r2, .L14
 152 003a 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 153 003c 43F00103 		orr	r3, r3, #1
 154 0040 1370     		strb	r3, [r2]
 155 0042 E6E7     		b	.L7
 156              	.L12:
 195:FATFS/Target/sd_diskio.c ****     }
 157              		.loc 1 195 7 is_stmt 1 view .LVU36
 195:FATFS/Target/sd_diskio.c ****     }
 158              		.loc 1 195 14 is_stmt 0 view .LVU37
 159 0044 2046     		mov	r0, r4
ARM GAS  C:\usertemp\ccUMpah2.s 			page 8


 160 0046 FFF7FEFF 		bl	SD_CheckStatus
 161              	.LVL6:
 195:FATFS/Target/sd_diskio.c ****     }
 162              		.loc 1 195 12 discriminator 1 view .LVU38
 163 004a 074B     		ldr	r3, .L14
 164 004c 1870     		strb	r0, [r3]
 165 004e E7E7     		b	.L8
 166              	.L13:
 167              	.LBB2:
 212:FATFS/Target/sd_diskio.c ****       SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 168              		.loc 1 212 7 is_stmt 1 view .LVU39
 169 0050 074B     		ldr	r3, .L14+8
 170 0052 6C46     		mov	r4, sp
 171 0054 0FCB     		ldm	r3, {r0, r1, r2, r3}
 172 0056 84E80F00 		stm	r4, {r0, r1, r2, r3}
 213:FATFS/Target/sd_diskio.c **** #else
 173              		.loc 1 213 7 view .LVU40
 213:FATFS/Target/sd_diskio.c **** #else
 174              		.loc 1 213 19 is_stmt 0 view .LVU41
 175 005a 0021     		movs	r1, #0
 176 005c 2046     		mov	r0, r4
 177 005e FFF7FEFF 		bl	osMessageCreate
 178              	.LVL7:
 213:FATFS/Target/sd_diskio.c **** #else
 179              		.loc 1 213 17 discriminator 1 view .LVU42
 180 0062 024B     		ldr	r3, .L14+4
 181 0064 1860     		str	r0, [r3]
 182 0066 E3E7     		b	.L9
 183              	.L15:
 184              		.align	2
 185              	.L14:
 186 0068 00000000 		.word	Stat
 187 006c 00000000 		.word	SDQueueID
 188 0070 00000000 		.word	.LANCHOR0
 189              	.LBE2:
 190              		.cfi_endproc
 191              	.LFE343:
 193              		.section	.text.SD_status,"ax",%progbits
 194              		.align	1
 195              		.global	SD_status
 196              		.syntax unified
 197              		.thumb
 198              		.thumb_func
 200              	SD_status:
 201              	.LVL8:
 202              	.LFB344:
 228:FATFS/Target/sd_diskio.c **** 
 229:FATFS/Target/sd_diskio.c **** /**
 230:FATFS/Target/sd_diskio.c ****   * @brief  Gets Disk Status
 231:FATFS/Target/sd_diskio.c ****   * @param  lun : not used
 232:FATFS/Target/sd_diskio.c ****   * @retval DSTATUS: Operation status
 233:FATFS/Target/sd_diskio.c ****   */
 234:FATFS/Target/sd_diskio.c **** DSTATUS SD_status(BYTE lun)
 235:FATFS/Target/sd_diskio.c **** {
 203              		.loc 1 235 1 is_stmt 1 view -0
 204              		.cfi_startproc
 205              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\usertemp\ccUMpah2.s 			page 9


 206              		@ frame_needed = 0, uses_anonymous_args = 0
 207              		.loc 1 235 1 is_stmt 0 view .LVU44
 208 0000 08B5     		push	{r3, lr}
 209              	.LCFI5:
 210              		.cfi_def_cfa_offset 8
 211              		.cfi_offset 3, -8
 212              		.cfi_offset 14, -4
 236:FATFS/Target/sd_diskio.c ****   return SD_CheckStatus(lun);
 213              		.loc 1 236 3 is_stmt 1 view .LVU45
 214              		.loc 1 236 10 is_stmt 0 view .LVU46
 215 0002 FFF7FEFF 		bl	SD_CheckStatus
 216              	.LVL9:
 237:FATFS/Target/sd_diskio.c **** }
 217              		.loc 1 237 1 view .LVU47
 218 0006 08BD     		pop	{r3, pc}
 219              		.cfi_endproc
 220              	.LFE344:
 222              		.section	.text.SD_CheckStatusWithTimeout,"ax",%progbits
 223              		.align	1
 224              		.syntax unified
 225              		.thumb
 226              		.thumb_func
 228              	SD_CheckStatusWithTimeout:
 229              	.LVL10:
 230              	.LFB341:
 140:FATFS/Target/sd_diskio.c ****   uint32_t timer;
 231              		.loc 1 140 1 is_stmt 1 view -0
 232              		.cfi_startproc
 233              		@ args = 0, pretend = 0, frame = 0
 234              		@ frame_needed = 0, uses_anonymous_args = 0
 140:FATFS/Target/sd_diskio.c ****   uint32_t timer;
 235              		.loc 1 140 1 is_stmt 0 view .LVU49
 236 0000 38B5     		push	{r3, r4, r5, lr}
 237              	.LCFI6:
 238              		.cfi_def_cfa_offset 16
 239              		.cfi_offset 3, -16
 240              		.cfi_offset 4, -12
 241              		.cfi_offset 5, -8
 242              		.cfi_offset 14, -4
 243 0002 0546     		mov	r5, r0
 141:FATFS/Target/sd_diskio.c ****   /* block until SDIO peripheral is ready again or a timeout occur */
 244              		.loc 1 141 3 is_stmt 1 view .LVU50
 144:FATFS/Target/sd_diskio.c ****   while( osKernelSysTick() - timer < timeout)
 245              		.loc 1 144 3 view .LVU51
 144:FATFS/Target/sd_diskio.c ****   while( osKernelSysTick() - timer < timeout)
 246              		.loc 1 144 11 is_stmt 0 view .LVU52
 247 0004 FFF7FEFF 		bl	osKernelSysTick
 248              	.LVL11:
 144:FATFS/Target/sd_diskio.c ****   while( osKernelSysTick() - timer < timeout)
 249              		.loc 1 144 11 view .LVU53
 250 0008 0446     		mov	r4, r0
 251              	.LVL12:
 145:FATFS/Target/sd_diskio.c **** #else
 252              		.loc 1 145 3 is_stmt 1 view .LVU54
 253              	.L19:
 145:FATFS/Target/sd_diskio.c **** #else
 254              		.loc 1 145 36 view .LVU55
ARM GAS  C:\usertemp\ccUMpah2.s 			page 10


 145:FATFS/Target/sd_diskio.c **** #else
 255              		.loc 1 145 10 is_stmt 0 view .LVU56
 256 000a FFF7FEFF 		bl	osKernelSysTick
 257              	.LVL13:
 145:FATFS/Target/sd_diskio.c **** #else
 258              		.loc 1 145 28 discriminator 1 view .LVU57
 259 000e 001B     		subs	r0, r0, r4
 145:FATFS/Target/sd_diskio.c **** #else
 260              		.loc 1 145 36 discriminator 1 view .LVU58
 261 0010 A842     		cmp	r0, r5
 262 0012 05D2     		bcs	.L24
 151:FATFS/Target/sd_diskio.c ****     {
 263              		.loc 1 151 5 is_stmt 1 view .LVU59
 151:FATFS/Target/sd_diskio.c ****     {
 264              		.loc 1 151 9 is_stmt 0 view .LVU60
 265 0014 FFF7FEFF 		bl	BSP_SD_GetCardState
 266              	.LVL14:
 151:FATFS/Target/sd_diskio.c ****     {
 267              		.loc 1 151 8 discriminator 1 view .LVU61
 268 0018 0028     		cmp	r0, #0
 269 001a F6D1     		bne	.L19
 153:FATFS/Target/sd_diskio.c ****     }
 270              		.loc 1 153 14 view .LVU62
 271 001c 0020     		movs	r0, #0
 272 001e 01E0     		b	.L18
 273              	.L24:
 157:FATFS/Target/sd_diskio.c **** }
 274              		.loc 1 157 10 view .LVU63
 275 0020 4FF0FF30 		mov	r0, #-1
 276              	.L18:
 158:FATFS/Target/sd_diskio.c **** 
 277              		.loc 1 158 1 view .LVU64
 278 0024 38BD     		pop	{r3, r4, r5, pc}
 158:FATFS/Target/sd_diskio.c **** 
 279              		.loc 1 158 1 view .LVU65
 280              		.cfi_endproc
 281              	.LFE341:
 283              		.section	.text.SD_read,"ax",%progbits
 284              		.align	1
 285              		.global	SD_read
 286              		.syntax unified
 287              		.thumb
 288              		.thumb_func
 290              	SD_read:
 291              	.LVL15:
 292              	.LFB345:
 238:FATFS/Target/sd_diskio.c **** 
 239:FATFS/Target/sd_diskio.c **** /* USER CODE BEGIN beforeReadSection */
 240:FATFS/Target/sd_diskio.c **** /* can be used to modify previous code / undefine following code / add new code */
 241:FATFS/Target/sd_diskio.c **** /* USER CODE END beforeReadSection */
 242:FATFS/Target/sd_diskio.c **** /**
 243:FATFS/Target/sd_diskio.c ****   * @brief  Reads Sector(s)
 244:FATFS/Target/sd_diskio.c ****   * @param  lun : not used
 245:FATFS/Target/sd_diskio.c ****   * @param  *buff: Data buffer to store read data
 246:FATFS/Target/sd_diskio.c ****   * @param  sector: Sector address (LBA)
 247:FATFS/Target/sd_diskio.c ****   * @param  count: Number of sectors to read (1..128)
 248:FATFS/Target/sd_diskio.c ****   * @retval DRESULT: Operation result
ARM GAS  C:\usertemp\ccUMpah2.s 			page 11


 249:FATFS/Target/sd_diskio.c ****   */
 250:FATFS/Target/sd_diskio.c **** 
 251:FATFS/Target/sd_diskio.c **** DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
 252:FATFS/Target/sd_diskio.c **** {
 293              		.loc 1 252 1 is_stmt 1 view -0
 294              		.cfi_startproc
 295              		@ args = 0, pretend = 0, frame = 16
 296              		@ frame_needed = 0, uses_anonymous_args = 0
 297              		.loc 1 252 1 is_stmt 0 view .LVU67
 298 0000 70B5     		push	{r4, r5, r6, lr}
 299              	.LCFI7:
 300              		.cfi_def_cfa_offset 16
 301              		.cfi_offset 4, -16
 302              		.cfi_offset 5, -12
 303              		.cfi_offset 6, -8
 304              		.cfi_offset 14, -4
 305 0002 84B0     		sub	sp, sp, #16
 306              	.LCFI8:
 307              		.cfi_def_cfa_offset 32
 308 0004 0C46     		mov	r4, r1
 309 0006 1546     		mov	r5, r2
 310 0008 1E46     		mov	r6, r3
 253:FATFS/Target/sd_diskio.c ****   uint8_t ret;
 311              		.loc 1 253 3 is_stmt 1 view .LVU68
 254:FATFS/Target/sd_diskio.c ****   DRESULT res = RES_ERROR;
 312              		.loc 1 254 3 view .LVU69
 313              	.LVL16:
 255:FATFS/Target/sd_diskio.c ****   uint32_t timer;
 314              		.loc 1 255 3 view .LVU70
 256:FATFS/Target/sd_diskio.c **** #if (osCMSIS < 0x20000U)
 257:FATFS/Target/sd_diskio.c ****   osEvent event;
 315              		.loc 1 257 3 view .LVU71
 258:FATFS/Target/sd_diskio.c **** #else
 259:FATFS/Target/sd_diskio.c ****   uint16_t event;
 260:FATFS/Target/sd_diskio.c ****   osStatus_t status;
 261:FATFS/Target/sd_diskio.c **** #endif
 262:FATFS/Target/sd_diskio.c **** #if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
 263:FATFS/Target/sd_diskio.c ****   uint32_t alignedAddr;
 264:FATFS/Target/sd_diskio.c **** #endif
 265:FATFS/Target/sd_diskio.c ****   /*
 266:FATFS/Target/sd_diskio.c ****   * ensure the SDCard is ready for a new operation
 267:FATFS/Target/sd_diskio.c ****   */
 268:FATFS/Target/sd_diskio.c **** 
 269:FATFS/Target/sd_diskio.c ****   if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 316              		.loc 1 269 3 view .LVU72
 317              		.loc 1 269 7 is_stmt 0 view .LVU73
 318 000a 47F23050 		movw	r0, #30000
 319              	.LVL17:
 320              		.loc 1 269 7 view .LVU74
 321 000e FFF7FEFF 		bl	SD_CheckStatusWithTimeout
 322              	.LVL18:
 323              		.loc 1 269 6 discriminator 1 view .LVU75
 324 0012 0028     		cmp	r0, #0
 325 0014 29DB     		blt	.L29
 270:FATFS/Target/sd_diskio.c ****   {
 271:FATFS/Target/sd_diskio.c ****     return res;
 272:FATFS/Target/sd_diskio.c ****   }
ARM GAS  C:\usertemp\ccUMpah2.s 			page 12


 273:FATFS/Target/sd_diskio.c **** 
 274:FATFS/Target/sd_diskio.c **** #if defined(ENABLE_SCRATCH_BUFFER)
 275:FATFS/Target/sd_diskio.c ****   if (!((uint32_t)buff & 0x3))
 276:FATFS/Target/sd_diskio.c ****   {
 277:FATFS/Target/sd_diskio.c **** #endif
 278:FATFS/Target/sd_diskio.c ****     /* Fast path cause destination buffer is correctly aligned */
 279:FATFS/Target/sd_diskio.c ****     ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 326              		.loc 1 279 5 is_stmt 1 view .LVU76
 327              		.loc 1 279 11 is_stmt 0 view .LVU77
 328 0016 3246     		mov	r2, r6
 329 0018 2946     		mov	r1, r5
 330 001a 2046     		mov	r0, r4
 331 001c FFF7FEFF 		bl	BSP_SD_ReadBlocks_DMA
 332              	.LVL19:
 280:FATFS/Target/sd_diskio.c **** 
 281:FATFS/Target/sd_diskio.c ****     if (ret == MSD_OK) {
 333              		.loc 1 281 5 is_stmt 1 view .LVU78
 334              		.loc 1 281 8 is_stmt 0 view .LVU79
 335 0020 08B1     		cbz	r0, .L34
 254:FATFS/Target/sd_diskio.c ****   uint32_t timer;
 336              		.loc 1 254 11 view .LVU80
 337 0022 0120     		movs	r0, #1
 338              	.LVL20:
 254:FATFS/Target/sd_diskio.c ****   uint32_t timer;
 339              		.loc 1 254 11 view .LVU81
 340 0024 22E0     		b	.L26
 341              	.LVL21:
 342              	.L34:
 282:FATFS/Target/sd_diskio.c **** #if (osCMSIS < 0x20000U)
 283:FATFS/Target/sd_diskio.c ****     /* wait for a message from the queue or a timeout */
 284:FATFS/Target/sd_diskio.c ****     event = osMessageGet(SDQueueID, SD_TIMEOUT);
 343              		.loc 1 284 5 is_stmt 1 view .LVU82
 344              		.loc 1 284 13 is_stmt 0 view .LVU83
 345 0026 47F23052 		movw	r2, #30000
 346 002a 114B     		ldr	r3, .L38
 347 002c 1968     		ldr	r1, [r3]
 348 002e 01A8     		add	r0, sp, #4
 349              	.LVL22:
 350              		.loc 1 284 13 view .LVU84
 351 0030 FFF7FEFF 		bl	osMessageGet
 352              	.LVL23:
 285:FATFS/Target/sd_diskio.c **** 
 286:FATFS/Target/sd_diskio.c ****     if (event.status == osEventMessage)
 353              		.loc 1 286 5 is_stmt 1 view .LVU85
 354              		.loc 1 286 14 is_stmt 0 view .LVU86
 355 0034 019B     		ldr	r3, [sp, #4]
 356              		.loc 1 286 8 view .LVU87
 357 0036 102B     		cmp	r3, #16
 358 0038 01D0     		beq	.L35
 254:FATFS/Target/sd_diskio.c ****   uint32_t timer;
 359              		.loc 1 254 11 view .LVU88
 360 003a 0120     		movs	r0, #1
 361 003c 16E0     		b	.L26
 362              	.L35:
 287:FATFS/Target/sd_diskio.c ****     {
 288:FATFS/Target/sd_diskio.c ****       if (event.value.v == READ_CPLT_MSG)
 363              		.loc 1 288 7 is_stmt 1 view .LVU89
ARM GAS  C:\usertemp\ccUMpah2.s 			page 13


 364              		.loc 1 288 22 is_stmt 0 view .LVU90
 365 003e 029B     		ldr	r3, [sp, #8]
 366              		.loc 1 288 10 view .LVU91
 367 0040 012B     		cmp	r3, #1
 368 0042 01D0     		beq	.L36
 254:FATFS/Target/sd_diskio.c ****   uint32_t timer;
 369              		.loc 1 254 11 view .LVU92
 370 0044 0120     		movs	r0, #1
 371 0046 11E0     		b	.L26
 372              	.L36:
 289:FATFS/Target/sd_diskio.c ****       {
 290:FATFS/Target/sd_diskio.c ****         timer = osKernelSysTick();
 373              		.loc 1 290 9 is_stmt 1 view .LVU93
 374              		.loc 1 290 17 is_stmt 0 view .LVU94
 375 0048 FFF7FEFF 		bl	osKernelSysTick
 376              	.LVL24:
 377 004c 0446     		mov	r4, r0
 378              	.LVL25:
 291:FATFS/Target/sd_diskio.c ****         /* block until SDIO IP is ready or a timeout occur */
 292:FATFS/Target/sd_diskio.c ****         while(osKernelSysTick() - timer <SD_TIMEOUT)
 379              		.loc 1 292 9 is_stmt 1 view .LVU95
 380              	.L27:
 381              		.loc 1 292 41 view .LVU96
 382              		.loc 1 292 15 is_stmt 0 view .LVU97
 383 004e FFF7FEFF 		bl	osKernelSysTick
 384              	.LVL26:
 385              		.loc 1 292 33 discriminator 1 view .LVU98
 386 0052 001B     		subs	r0, r0, r4
 387              		.loc 1 292 41 discriminator 1 view .LVU99
 388 0054 47F22F53 		movw	r3, #29999
 389 0058 9842     		cmp	r0, r3
 390 005a 04D8     		bhi	.L37
 293:FATFS/Target/sd_diskio.c **** #else
 294:FATFS/Target/sd_diskio.c ****           status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 295:FATFS/Target/sd_diskio.c ****           if ((status == osOK) && (event == READ_CPLT_MSG))
 296:FATFS/Target/sd_diskio.c ****           {
 297:FATFS/Target/sd_diskio.c ****             timer = osKernelGetTickCount();
 298:FATFS/Target/sd_diskio.c ****             /* block until SDIO IP is ready or a timeout occur */
 299:FATFS/Target/sd_diskio.c ****             while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 300:FATFS/Target/sd_diskio.c **** #endif
 301:FATFS/Target/sd_diskio.c ****             {
 302:FATFS/Target/sd_diskio.c ****               if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 391              		.loc 1 302 15 is_stmt 1 view .LVU100
 392              		.loc 1 302 19 is_stmt 0 view .LVU101
 393 005c FFF7FEFF 		bl	BSP_SD_GetCardState
 394              	.LVL27:
 395              		.loc 1 302 18 discriminator 1 view .LVU102
 396 0060 0028     		cmp	r0, #0
 397 0062 F4D1     		bne	.L27
 398 0064 02E0     		b	.L26
 399              	.L37:
 254:FATFS/Target/sd_diskio.c ****   uint32_t timer;
 400              		.loc 1 254 11 view .LVU103
 401 0066 0120     		movs	r0, #1
 402 0068 00E0     		b	.L26
 403              	.LVL28:
 404              	.L29:
ARM GAS  C:\usertemp\ccUMpah2.s 			page 14


 271:FATFS/Target/sd_diskio.c ****   }
 405              		.loc 1 271 12 view .LVU104
 406 006a 0120     		movs	r0, #1
 407              	.LVL29:
 408              	.L26:
 303:FATFS/Target/sd_diskio.c ****               {
 304:FATFS/Target/sd_diskio.c ****                 res = RES_OK;
 305:FATFS/Target/sd_diskio.c **** #if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
 306:FATFS/Target/sd_diskio.c ****                 /*
 307:FATFS/Target/sd_diskio.c ****                 the SCB_InvalidateDCache_by_Addr() requires a 32-Byte aligned address,
 308:FATFS/Target/sd_diskio.c ****                 adjust the address and the D-Cache size to invalidate accordingly.
 309:FATFS/Target/sd_diskio.c ****                 */
 310:FATFS/Target/sd_diskio.c ****                 alignedAddr = (uint32_t)buff & ~0x1F;
 311:FATFS/Target/sd_diskio.c ****                 SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)b
 312:FATFS/Target/sd_diskio.c **** #endif
 313:FATFS/Target/sd_diskio.c ****                 break;
 314:FATFS/Target/sd_diskio.c ****               }
 315:FATFS/Target/sd_diskio.c ****             }
 316:FATFS/Target/sd_diskio.c **** #if (osCMSIS < 0x20000U)
 317:FATFS/Target/sd_diskio.c ****           }
 318:FATFS/Target/sd_diskio.c ****         }
 319:FATFS/Target/sd_diskio.c **** #else
 320:FATFS/Target/sd_diskio.c ****       }
 321:FATFS/Target/sd_diskio.c **** #endif
 322:FATFS/Target/sd_diskio.c ****     }
 323:FATFS/Target/sd_diskio.c **** 
 324:FATFS/Target/sd_diskio.c **** #if defined(ENABLE_SCRATCH_BUFFER)
 325:FATFS/Target/sd_diskio.c ****     }
 326:FATFS/Target/sd_diskio.c ****     else
 327:FATFS/Target/sd_diskio.c ****     {
 328:FATFS/Target/sd_diskio.c ****       /* Slow path, fetch each sector a part and memcpy to destination buffer */
 329:FATFS/Target/sd_diskio.c ****       int i;
 330:FATFS/Target/sd_diskio.c **** 
 331:FATFS/Target/sd_diskio.c ****       for (i = 0; i < count; i++)
 332:FATFS/Target/sd_diskio.c ****       {
 333:FATFS/Target/sd_diskio.c ****         ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 334:FATFS/Target/sd_diskio.c ****         if (ret == MSD_OK )
 335:FATFS/Target/sd_diskio.c ****         {
 336:FATFS/Target/sd_diskio.c ****           /* wait until the read is successful or a timeout occurs */
 337:FATFS/Target/sd_diskio.c **** #if (osCMSIS < 0x20000U)
 338:FATFS/Target/sd_diskio.c ****           /* wait for a message from the queue or a timeout */
 339:FATFS/Target/sd_diskio.c ****           event = osMessageGet(SDQueueID, SD_TIMEOUT);
 340:FATFS/Target/sd_diskio.c **** 
 341:FATFS/Target/sd_diskio.c ****           if (event.status == osEventMessage)
 342:FATFS/Target/sd_diskio.c ****           {
 343:FATFS/Target/sd_diskio.c ****             if (event.value.v == READ_CPLT_MSG)
 344:FATFS/Target/sd_diskio.c ****             {
 345:FATFS/Target/sd_diskio.c ****               timer = osKernelSysTick();
 346:FATFS/Target/sd_diskio.c ****               /* block until SDIO IP is ready or a timeout occur */
 347:FATFS/Target/sd_diskio.c ****               while(osKernelSysTick() - timer <SD_TIMEOUT)
 348:FATFS/Target/sd_diskio.c **** #else
 349:FATFS/Target/sd_diskio.c ****                 status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 350:FATFS/Target/sd_diskio.c ****               if ((status == osOK) && (event == READ_CPLT_MSG))
 351:FATFS/Target/sd_diskio.c ****               {
 352:FATFS/Target/sd_diskio.c ****                 timer = osKernelGetTickCount();
 353:FATFS/Target/sd_diskio.c ****                 /* block until SDIO IP is ready or a timeout occur */
 354:FATFS/Target/sd_diskio.c ****                 ret = MSD_ERROR;
ARM GAS  C:\usertemp\ccUMpah2.s 			page 15


 355:FATFS/Target/sd_diskio.c ****                 while(osKernelGetTickCount() - timer < SD_TIMEOUT)
 356:FATFS/Target/sd_diskio.c **** #endif
 357:FATFS/Target/sd_diskio.c ****                 {
 358:FATFS/Target/sd_diskio.c ****                   ret = BSP_SD_GetCardState();
 359:FATFS/Target/sd_diskio.c **** 
 360:FATFS/Target/sd_diskio.c ****                   if (ret == MSD_OK)
 361:FATFS/Target/sd_diskio.c ****                   {
 362:FATFS/Target/sd_diskio.c ****                     break;
 363:FATFS/Target/sd_diskio.c ****                   }
 364:FATFS/Target/sd_diskio.c ****                 }
 365:FATFS/Target/sd_diskio.c **** 
 366:FATFS/Target/sd_diskio.c ****                 if (ret != MSD_OK)
 367:FATFS/Target/sd_diskio.c ****                 {
 368:FATFS/Target/sd_diskio.c ****                   break;
 369:FATFS/Target/sd_diskio.c ****                 }
 370:FATFS/Target/sd_diskio.c **** #if (osCMSIS < 0x20000U)
 371:FATFS/Target/sd_diskio.c ****               }
 372:FATFS/Target/sd_diskio.c ****             }
 373:FATFS/Target/sd_diskio.c **** #else
 374:FATFS/Target/sd_diskio.c ****           }
 375:FATFS/Target/sd_diskio.c **** #endif
 376:FATFS/Target/sd_diskio.c **** #if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
 377:FATFS/Target/sd_diskio.c ****           /*
 378:FATFS/Target/sd_diskio.c ****           *
 379:FATFS/Target/sd_diskio.c ****           * invalidate the scratch buffer before the next read to get the actual data instead of th
 380:FATFS/Target/sd_diskio.c ****           */
 381:FATFS/Target/sd_diskio.c ****           SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
 382:FATFS/Target/sd_diskio.c **** #endif
 383:FATFS/Target/sd_diskio.c ****           memcpy(buff, scratch, BLOCKSIZE);
 384:FATFS/Target/sd_diskio.c ****           buff += BLOCKSIZE;
 385:FATFS/Target/sd_diskio.c ****         }
 386:FATFS/Target/sd_diskio.c ****         else
 387:FATFS/Target/sd_diskio.c ****         {
 388:FATFS/Target/sd_diskio.c ****           break;
 389:FATFS/Target/sd_diskio.c ****         }
 390:FATFS/Target/sd_diskio.c ****       }
 391:FATFS/Target/sd_diskio.c **** 
 392:FATFS/Target/sd_diskio.c ****       if ((i == count) && (ret == MSD_OK ))
 393:FATFS/Target/sd_diskio.c ****         res = RES_OK;
 394:FATFS/Target/sd_diskio.c ****     }
 395:FATFS/Target/sd_diskio.c **** #endif
 396:FATFS/Target/sd_diskio.c ****   return res;
 397:FATFS/Target/sd_diskio.c **** }
 409              		.loc 1 397 1 view .LVU105
 410 006c 04B0     		add	sp, sp, #16
 411              	.LCFI9:
 412              		.cfi_def_cfa_offset 16
 413              		@ sp needed
 414 006e 70BD     		pop	{r4, r5, r6, pc}
 415              	.LVL30:
 416              	.L39:
 417              		.loc 1 397 1 view .LVU106
 418              		.align	2
 419              	.L38:
 420 0070 00000000 		.word	SDQueueID
 421              		.cfi_endproc
 422              	.LFE345:
ARM GAS  C:\usertemp\ccUMpah2.s 			page 16


 424              		.section	.text.SD_write,"ax",%progbits
 425              		.align	1
 426              		.global	SD_write
 427              		.syntax unified
 428              		.thumb
 429              		.thumb_func
 431              	SD_write:
 432              	.LVL31:
 433              	.LFB346:
 398:FATFS/Target/sd_diskio.c **** 
 399:FATFS/Target/sd_diskio.c **** /* USER CODE BEGIN beforeWriteSection */
 400:FATFS/Target/sd_diskio.c **** /* can be used to modify previous code / undefine following code / add new code */
 401:FATFS/Target/sd_diskio.c **** /* USER CODE END beforeWriteSection */
 402:FATFS/Target/sd_diskio.c **** /**
 403:FATFS/Target/sd_diskio.c ****   * @brief  Writes Sector(s)
 404:FATFS/Target/sd_diskio.c ****   * @param  lun : not used
 405:FATFS/Target/sd_diskio.c ****   * @param  *buff: Data to be written
 406:FATFS/Target/sd_diskio.c ****   * @param  sector: Sector address (LBA)
 407:FATFS/Target/sd_diskio.c ****   * @param  count: Number of sectors to write (1..128)
 408:FATFS/Target/sd_diskio.c ****   * @retval DRESULT: Operation result
 409:FATFS/Target/sd_diskio.c ****   */
 410:FATFS/Target/sd_diskio.c **** #if _USE_WRITE == 1
 411:FATFS/Target/sd_diskio.c **** 
 412:FATFS/Target/sd_diskio.c **** DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
 413:FATFS/Target/sd_diskio.c **** {
 434              		.loc 1 413 1 is_stmt 1 view -0
 435              		.cfi_startproc
 436              		@ args = 0, pretend = 0, frame = 16
 437              		@ frame_needed = 0, uses_anonymous_args = 0
 438              		.loc 1 413 1 is_stmt 0 view .LVU108
 439 0000 70B5     		push	{r4, r5, r6, lr}
 440              	.LCFI10:
 441              		.cfi_def_cfa_offset 16
 442              		.cfi_offset 4, -16
 443              		.cfi_offset 5, -12
 444              		.cfi_offset 6, -8
 445              		.cfi_offset 14, -4
 446 0002 84B0     		sub	sp, sp, #16
 447              	.LCFI11:
 448              		.cfi_def_cfa_offset 32
 449 0004 0C46     		mov	r4, r1
 450 0006 1546     		mov	r5, r2
 451 0008 1E46     		mov	r6, r3
 414:FATFS/Target/sd_diskio.c ****   DRESULT res = RES_ERROR;
 452              		.loc 1 414 3 is_stmt 1 view .LVU109
 453              	.LVL32:
 415:FATFS/Target/sd_diskio.c ****   uint32_t timer;
 454              		.loc 1 415 3 view .LVU110
 416:FATFS/Target/sd_diskio.c **** 
 417:FATFS/Target/sd_diskio.c **** #if (osCMSIS < 0x20000U)
 418:FATFS/Target/sd_diskio.c ****   osEvent event;
 455              		.loc 1 418 3 view .LVU111
 419:FATFS/Target/sd_diskio.c **** #else
 420:FATFS/Target/sd_diskio.c ****   uint16_t event;
 421:FATFS/Target/sd_diskio.c ****   osStatus_t status;
 422:FATFS/Target/sd_diskio.c **** #endif
 423:FATFS/Target/sd_diskio.c **** 
ARM GAS  C:\usertemp\ccUMpah2.s 			page 17


 424:FATFS/Target/sd_diskio.c **** #if defined(ENABLE_SCRATCH_BUFFER)
 425:FATFS/Target/sd_diskio.c ****   int32_t ret;
 426:FATFS/Target/sd_diskio.c **** #endif
 427:FATFS/Target/sd_diskio.c **** 
 428:FATFS/Target/sd_diskio.c ****   /*
 429:FATFS/Target/sd_diskio.c ****   * ensure the SDCard is ready for a new operation
 430:FATFS/Target/sd_diskio.c ****   */
 431:FATFS/Target/sd_diskio.c **** 
 432:FATFS/Target/sd_diskio.c ****   if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 456              		.loc 1 432 3 view .LVU112
 457              		.loc 1 432 7 is_stmt 0 view .LVU113
 458 000a 47F23050 		movw	r0, #30000
 459              	.LVL33:
 460              		.loc 1 432 7 view .LVU114
 461 000e FFF7FEFF 		bl	SD_CheckStatusWithTimeout
 462              	.LVL34:
 463              		.loc 1 432 6 discriminator 1 view .LVU115
 464 0012 0028     		cmp	r0, #0
 465 0014 29DB     		blt	.L44
 433:FATFS/Target/sd_diskio.c ****   {
 434:FATFS/Target/sd_diskio.c ****     return res;
 435:FATFS/Target/sd_diskio.c ****   }
 436:FATFS/Target/sd_diskio.c **** 
 437:FATFS/Target/sd_diskio.c **** #if defined(ENABLE_SCRATCH_BUFFER)
 438:FATFS/Target/sd_diskio.c ****   if (!((uint32_t)buff & 0x3))
 439:FATFS/Target/sd_diskio.c ****   {
 440:FATFS/Target/sd_diskio.c **** #endif
 441:FATFS/Target/sd_diskio.c **** #if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
 442:FATFS/Target/sd_diskio.c ****   uint32_t alignedAddr;
 443:FATFS/Target/sd_diskio.c ****   /*
 444:FATFS/Target/sd_diskio.c ****     the SCB_CleanDCache_by_Addr() requires a 32-Byte aligned address
 445:FATFS/Target/sd_diskio.c ****     adjust the address and the D-Cache size to clean accordingly.
 446:FATFS/Target/sd_diskio.c ****   */
 447:FATFS/Target/sd_diskio.c ****   alignedAddr = (uint32_t)buff & ~0x1F;
 448:FATFS/Target/sd_diskio.c ****   SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr))
 449:FATFS/Target/sd_diskio.c **** #endif
 450:FATFS/Target/sd_diskio.c **** 
 451:FATFS/Target/sd_diskio.c ****   if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 466              		.loc 1 451 3 is_stmt 1 view .LVU116
 467              		.loc 1 451 6 is_stmt 0 view .LVU117
 468 0016 3246     		mov	r2, r6
 469 0018 2946     		mov	r1, r5
 470 001a 2046     		mov	r0, r4
 471 001c FFF7FEFF 		bl	BSP_SD_WriteBlocks_DMA
 472              	.LVL35:
 473              		.loc 1 451 5 discriminator 1 view .LVU118
 474 0020 08B1     		cbz	r0, .L49
 414:FATFS/Target/sd_diskio.c ****   uint32_t timer;
 475              		.loc 1 414 11 view .LVU119
 476 0022 0120     		movs	r0, #1
 477 0024 22E0     		b	.L41
 478              	.L49:
 452:FATFS/Target/sd_diskio.c ****                            (uint32_t) (sector),
 453:FATFS/Target/sd_diskio.c ****                            count) == MSD_OK)
 454:FATFS/Target/sd_diskio.c ****   {
 455:FATFS/Target/sd_diskio.c **** #if (osCMSIS < 0x20000U)
 456:FATFS/Target/sd_diskio.c ****     /* Get the message from the queue */
ARM GAS  C:\usertemp\ccUMpah2.s 			page 18


 457:FATFS/Target/sd_diskio.c ****     event = osMessageGet(SDQueueID, SD_TIMEOUT);
 479              		.loc 1 457 5 is_stmt 1 view .LVU120
 480              		.loc 1 457 13 is_stmt 0 view .LVU121
 481 0026 47F23052 		movw	r2, #30000
 482 002a 114B     		ldr	r3, .L53
 483 002c 1968     		ldr	r1, [r3]
 484 002e 01A8     		add	r0, sp, #4
 485 0030 FFF7FEFF 		bl	osMessageGet
 486              	.LVL36:
 458:FATFS/Target/sd_diskio.c **** 
 459:FATFS/Target/sd_diskio.c ****     if (event.status == osEventMessage)
 487              		.loc 1 459 5 is_stmt 1 view .LVU122
 488              		.loc 1 459 14 is_stmt 0 view .LVU123
 489 0034 019B     		ldr	r3, [sp, #4]
 490              		.loc 1 459 8 view .LVU124
 491 0036 102B     		cmp	r3, #16
 492 0038 01D0     		beq	.L50
 414:FATFS/Target/sd_diskio.c ****   uint32_t timer;
 493              		.loc 1 414 11 view .LVU125
 494 003a 0120     		movs	r0, #1
 495 003c 16E0     		b	.L41
 496              	.L50:
 460:FATFS/Target/sd_diskio.c ****     {
 461:FATFS/Target/sd_diskio.c ****       if (event.value.v == WRITE_CPLT_MSG)
 497              		.loc 1 461 7 is_stmt 1 view .LVU126
 498              		.loc 1 461 22 is_stmt 0 view .LVU127
 499 003e 029B     		ldr	r3, [sp, #8]
 500              		.loc 1 461 10 view .LVU128
 501 0040 022B     		cmp	r3, #2
 502 0042 01D0     		beq	.L51
 414:FATFS/Target/sd_diskio.c ****   uint32_t timer;
 503              		.loc 1 414 11 view .LVU129
 504 0044 0120     		movs	r0, #1
 505 0046 11E0     		b	.L41
 506              	.L51:
 462:FATFS/Target/sd_diskio.c ****       {
 463:FATFS/Target/sd_diskio.c **** #else
 464:FATFS/Target/sd_diskio.c ****     status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 465:FATFS/Target/sd_diskio.c ****     if ((status == osOK) && (event == WRITE_CPLT_MSG))
 466:FATFS/Target/sd_diskio.c ****     {
 467:FATFS/Target/sd_diskio.c **** #endif
 468:FATFS/Target/sd_diskio.c ****  #if (osCMSIS < 0x20000U)
 469:FATFS/Target/sd_diskio.c ****         timer = osKernelSysTick();
 507              		.loc 1 469 9 is_stmt 1 view .LVU130
 508              		.loc 1 469 17 is_stmt 0 view .LVU131
 509 0048 FFF7FEFF 		bl	osKernelSysTick
 510              	.LVL37:
 511 004c 0446     		mov	r4, r0
 512              	.LVL38:
 470:FATFS/Target/sd_diskio.c ****         /* block until SDIO IP is ready or a timeout occur */
 471:FATFS/Target/sd_diskio.c ****         while(osKernelSysTick() - timer  < SD_TIMEOUT)
 513              		.loc 1 471 9 is_stmt 1 view .LVU132
 514              	.L42:
 515              		.loc 1 471 42 view .LVU133
 516              		.loc 1 471 15 is_stmt 0 view .LVU134
 517 004e FFF7FEFF 		bl	osKernelSysTick
 518              	.LVL39:
ARM GAS  C:\usertemp\ccUMpah2.s 			page 19


 519              		.loc 1 471 33 discriminator 1 view .LVU135
 520 0052 001B     		subs	r0, r0, r4
 521              		.loc 1 471 42 discriminator 1 view .LVU136
 522 0054 47F22F53 		movw	r3, #29999
 523 0058 9842     		cmp	r0, r3
 524 005a 04D8     		bhi	.L52
 472:FATFS/Target/sd_diskio.c **** #else
 473:FATFS/Target/sd_diskio.c ****         timer = osKernelGetTickCount();
 474:FATFS/Target/sd_diskio.c ****         /* block until SDIO IP is ready or a timeout occur */
 475:FATFS/Target/sd_diskio.c ****         while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 476:FATFS/Target/sd_diskio.c **** #endif
 477:FATFS/Target/sd_diskio.c ****         {
 478:FATFS/Target/sd_diskio.c ****           if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 525              		.loc 1 478 11 is_stmt 1 view .LVU137
 526              		.loc 1 478 15 is_stmt 0 view .LVU138
 527 005c FFF7FEFF 		bl	BSP_SD_GetCardState
 528              	.LVL40:
 529              		.loc 1 478 14 discriminator 1 view .LVU139
 530 0060 0028     		cmp	r0, #0
 531 0062 F4D1     		bne	.L42
 532 0064 02E0     		b	.L41
 533              	.L52:
 414:FATFS/Target/sd_diskio.c ****   uint32_t timer;
 534              		.loc 1 414 11 view .LVU140
 535 0066 0120     		movs	r0, #1
 536 0068 00E0     		b	.L41
 537              	.LVL41:
 538              	.L44:
 434:FATFS/Target/sd_diskio.c ****   }
 539              		.loc 1 434 12 view .LVU141
 540 006a 0120     		movs	r0, #1
 541              	.LVL42:
 542              	.L41:
 479:FATFS/Target/sd_diskio.c ****           {
 480:FATFS/Target/sd_diskio.c ****             res = RES_OK;
 481:FATFS/Target/sd_diskio.c ****             break;
 482:FATFS/Target/sd_diskio.c ****           }
 483:FATFS/Target/sd_diskio.c ****         }
 484:FATFS/Target/sd_diskio.c **** #if (osCMSIS < 0x20000U)
 485:FATFS/Target/sd_diskio.c ****       }
 486:FATFS/Target/sd_diskio.c ****     }
 487:FATFS/Target/sd_diskio.c **** #else
 488:FATFS/Target/sd_diskio.c ****     }
 489:FATFS/Target/sd_diskio.c **** #endif
 490:FATFS/Target/sd_diskio.c ****   }
 491:FATFS/Target/sd_diskio.c **** #if defined(ENABLE_SCRATCH_BUFFER)
 492:FATFS/Target/sd_diskio.c ****   else {
 493:FATFS/Target/sd_diskio.c ****     /* Slow path, fetch each sector a part and memcpy to destination buffer */
 494:FATFS/Target/sd_diskio.c ****     int i;
 495:FATFS/Target/sd_diskio.c **** 
 496:FATFS/Target/sd_diskio.c **** #if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
 497:FATFS/Target/sd_diskio.c ****     /*
 498:FATFS/Target/sd_diskio.c ****      * invalidate the scratch buffer before the next write to get the actual data instead of the ca
 499:FATFS/Target/sd_diskio.c ****      */
 500:FATFS/Target/sd_diskio.c ****      SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
 501:FATFS/Target/sd_diskio.c **** #endif
 502:FATFS/Target/sd_diskio.c ****       for (i = 0; i < count; i++)
ARM GAS  C:\usertemp\ccUMpah2.s 			page 20


 503:FATFS/Target/sd_diskio.c ****       {
 504:FATFS/Target/sd_diskio.c ****         memcpy((void *)scratch, buff, BLOCKSIZE);
 505:FATFS/Target/sd_diskio.c ****         buff += BLOCKSIZE;
 506:FATFS/Target/sd_diskio.c **** 
 507:FATFS/Target/sd_diskio.c ****         ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 508:FATFS/Target/sd_diskio.c ****         if (ret == MSD_OK )
 509:FATFS/Target/sd_diskio.c ****         {
 510:FATFS/Target/sd_diskio.c ****           /* wait until the read is successful or a timeout occurs */
 511:FATFS/Target/sd_diskio.c **** #if (osCMSIS < 0x20000U)
 512:FATFS/Target/sd_diskio.c ****           /* wait for a message from the queue or a timeout */
 513:FATFS/Target/sd_diskio.c ****           event = osMessageGet(SDQueueID, SD_TIMEOUT);
 514:FATFS/Target/sd_diskio.c **** 
 515:FATFS/Target/sd_diskio.c ****           if (event.status == osEventMessage)
 516:FATFS/Target/sd_diskio.c ****           {
 517:FATFS/Target/sd_diskio.c ****             if (event.value.v == READ_CPLT_MSG)
 518:FATFS/Target/sd_diskio.c ****             {
 519:FATFS/Target/sd_diskio.c ****               timer = osKernelSysTick();
 520:FATFS/Target/sd_diskio.c ****               /* block until SDIO IP is ready or a timeout occur */
 521:FATFS/Target/sd_diskio.c ****               while(osKernelSysTick() - timer <SD_TIMEOUT)
 522:FATFS/Target/sd_diskio.c **** #else
 523:FATFS/Target/sd_diskio.c ****                 status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 524:FATFS/Target/sd_diskio.c ****               if ((status == osOK) && (event == READ_CPLT_MSG))
 525:FATFS/Target/sd_diskio.c ****               {
 526:FATFS/Target/sd_diskio.c ****                 timer = osKernelGetTickCount();
 527:FATFS/Target/sd_diskio.c ****                 /* block until SDIO IP is ready or a timeout occur */
 528:FATFS/Target/sd_diskio.c ****                 ret = MSD_ERROR;
 529:FATFS/Target/sd_diskio.c ****                 while(osKernelGetTickCount() - timer < SD_TIMEOUT)
 530:FATFS/Target/sd_diskio.c **** #endif
 531:FATFS/Target/sd_diskio.c ****                 {
 532:FATFS/Target/sd_diskio.c ****                   ret = BSP_SD_GetCardState();
 533:FATFS/Target/sd_diskio.c **** 
 534:FATFS/Target/sd_diskio.c ****                   if (ret == MSD_OK)
 535:FATFS/Target/sd_diskio.c ****                   {
 536:FATFS/Target/sd_diskio.c ****                     break;
 537:FATFS/Target/sd_diskio.c ****                   }
 538:FATFS/Target/sd_diskio.c ****                 }
 539:FATFS/Target/sd_diskio.c **** 
 540:FATFS/Target/sd_diskio.c ****                 if (ret != MSD_OK)
 541:FATFS/Target/sd_diskio.c ****                 {
 542:FATFS/Target/sd_diskio.c ****                   break;
 543:FATFS/Target/sd_diskio.c ****                 }
 544:FATFS/Target/sd_diskio.c **** #if (osCMSIS < 0x20000U)
 545:FATFS/Target/sd_diskio.c ****               }
 546:FATFS/Target/sd_diskio.c ****             }
 547:FATFS/Target/sd_diskio.c **** #else
 548:FATFS/Target/sd_diskio.c ****           }
 549:FATFS/Target/sd_diskio.c **** #endif
 550:FATFS/Target/sd_diskio.c ****         }
 551:FATFS/Target/sd_diskio.c ****         else
 552:FATFS/Target/sd_diskio.c ****         {
 553:FATFS/Target/sd_diskio.c ****           break;
 554:FATFS/Target/sd_diskio.c ****         }
 555:FATFS/Target/sd_diskio.c ****       }
 556:FATFS/Target/sd_diskio.c **** 
 557:FATFS/Target/sd_diskio.c ****       if ((i == count) && (ret == MSD_OK ))
 558:FATFS/Target/sd_diskio.c ****         res = RES_OK;
 559:FATFS/Target/sd_diskio.c ****     }
ARM GAS  C:\usertemp\ccUMpah2.s 			page 21


 560:FATFS/Target/sd_diskio.c **** 
 561:FATFS/Target/sd_diskio.c ****   }
 562:FATFS/Target/sd_diskio.c **** #endif
 563:FATFS/Target/sd_diskio.c **** 
 564:FATFS/Target/sd_diskio.c ****   return res;
 565:FATFS/Target/sd_diskio.c **** }
 543              		.loc 1 565 1 view .LVU142
 544 006c 04B0     		add	sp, sp, #16
 545              	.LCFI12:
 546              		.cfi_def_cfa_offset 16
 547              		@ sp needed
 548 006e 70BD     		pop	{r4, r5, r6, pc}
 549              	.LVL43:
 550              	.L54:
 551              		.loc 1 565 1 view .LVU143
 552              		.align	2
 553              	.L53:
 554 0070 00000000 		.word	SDQueueID
 555              		.cfi_endproc
 556              	.LFE346:
 558              		.section	.text.SD_ioctl,"ax",%progbits
 559              		.align	1
 560              		.global	SD_ioctl
 561              		.syntax unified
 562              		.thumb
 563              		.thumb_func
 565              	SD_ioctl:
 566              	.LVL44:
 567              	.LFB347:
 566:FATFS/Target/sd_diskio.c ****  #endif /* _USE_WRITE == 1 */
 567:FATFS/Target/sd_diskio.c **** 
 568:FATFS/Target/sd_diskio.c **** /* USER CODE BEGIN beforeIoctlSection */
 569:FATFS/Target/sd_diskio.c **** /* can be used to modify previous code / undefine following code / add new code */
 570:FATFS/Target/sd_diskio.c **** /* USER CODE END beforeIoctlSection */
 571:FATFS/Target/sd_diskio.c **** /**
 572:FATFS/Target/sd_diskio.c ****   * @brief  I/O control operation
 573:FATFS/Target/sd_diskio.c ****   * @param  lun : not used
 574:FATFS/Target/sd_diskio.c ****   * @param  cmd: Control code
 575:FATFS/Target/sd_diskio.c ****   * @param  *buff: Buffer to send/receive control data
 576:FATFS/Target/sd_diskio.c ****   * @retval DRESULT: Operation result
 577:FATFS/Target/sd_diskio.c ****   */
 578:FATFS/Target/sd_diskio.c **** #if _USE_IOCTL == 1
 579:FATFS/Target/sd_diskio.c **** DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
 580:FATFS/Target/sd_diskio.c **** {
 568              		.loc 1 580 1 is_stmt 1 view -0
 569              		.cfi_startproc
 570              		@ args = 0, pretend = 0, frame = 40
 571              		@ frame_needed = 0, uses_anonymous_args = 0
 572              		.loc 1 580 1 is_stmt 0 view .LVU145
 573 0000 30B5     		push	{r4, r5, lr}
 574              	.LCFI13:
 575              		.cfi_def_cfa_offset 12
 576              		.cfi_offset 4, -12
 577              		.cfi_offset 5, -8
 578              		.cfi_offset 14, -4
 579 0002 8BB0     		sub	sp, sp, #44
 580              	.LCFI14:
ARM GAS  C:\usertemp\ccUMpah2.s 			page 22


 581              		.cfi_def_cfa_offset 56
 581:FATFS/Target/sd_diskio.c ****   DRESULT res = RES_ERROR;
 582              		.loc 1 581 3 is_stmt 1 view .LVU146
 583              	.LVL45:
 582:FATFS/Target/sd_diskio.c ****   BSP_SD_CardInfo CardInfo;
 584              		.loc 1 582 3 view .LVU147
 583:FATFS/Target/sd_diskio.c **** 
 584:FATFS/Target/sd_diskio.c ****   if (Stat & STA_NOINIT) return RES_NOTRDY;
 585              		.loc 1 584 3 view .LVU148
 586              		.loc 1 584 12 is_stmt 0 view .LVU149
 587 0004 134B     		ldr	r3, .L65
 588 0006 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 589              	.LVL46:
 590              		.loc 1 584 6 view .LVU150
 591 0008 10F00104 		ands	r4, r0, #1
 592 000c 1BD1     		bne	.L62
 593 000e 1546     		mov	r5, r2
 585:FATFS/Target/sd_diskio.c **** 
 586:FATFS/Target/sd_diskio.c ****   switch (cmd)
 594              		.loc 1 586 3 is_stmt 1 view .LVU151
 595 0010 0329     		cmp	r1, #3
 596 0012 1CD8     		bhi	.L63
 597 0014 DFE801F0 		tbb	[pc, r1]
 598              	.L58:
 599 0018 02       		.byte	(.L61-.L58)/2
 600 0019 04       		.byte	(.L60-.L58)/2
 601 001a 0A       		.byte	(.L59-.L58)/2
 602 001b 10       		.byte	(.L57-.L58)/2
 603              		.p2align 1
 604              	.L61:
 605 001c 0C46     		mov	r4, r1
 606 001e 13E0     		b	.L56
 607              	.L60:
 587:FATFS/Target/sd_diskio.c ****   {
 588:FATFS/Target/sd_diskio.c ****   /* Make sure that no pending write process */
 589:FATFS/Target/sd_diskio.c ****   case CTRL_SYNC :
 590:FATFS/Target/sd_diskio.c ****     res = RES_OK;
 591:FATFS/Target/sd_diskio.c ****     break;
 592:FATFS/Target/sd_diskio.c **** 
 593:FATFS/Target/sd_diskio.c ****   /* Get number of sectors on the disk (DWORD) */
 594:FATFS/Target/sd_diskio.c ****   case GET_SECTOR_COUNT :
 595:FATFS/Target/sd_diskio.c ****     BSP_SD_GetCardInfo(&CardInfo);
 608              		.loc 1 595 5 view .LVU152
 609 0020 01A8     		add	r0, sp, #4
 610 0022 FFF7FEFF 		bl	BSP_SD_GetCardInfo
 611              	.LVL47:
 596:FATFS/Target/sd_diskio.c ****     *(DWORD*)buff = CardInfo.LogBlockNbr;
 612              		.loc 1 596 5 view .LVU153
 613              		.loc 1 596 29 is_stmt 0 view .LVU154
 614 0026 079B     		ldr	r3, [sp, #28]
 615              		.loc 1 596 19 view .LVU155
 616 0028 2B60     		str	r3, [r5]
 597:FATFS/Target/sd_diskio.c ****     res = RES_OK;
 617              		.loc 1 597 5 is_stmt 1 view .LVU156
 618              	.LVL48:
 598:FATFS/Target/sd_diskio.c ****     break;
 619              		.loc 1 598 5 view .LVU157
ARM GAS  C:\usertemp\ccUMpah2.s 			page 23


 620 002a 0DE0     		b	.L56
 621              	.LVL49:
 622              	.L59:
 599:FATFS/Target/sd_diskio.c **** 
 600:FATFS/Target/sd_diskio.c ****   /* Get R/W sector size (WORD) */
 601:FATFS/Target/sd_diskio.c ****   case GET_SECTOR_SIZE :
 602:FATFS/Target/sd_diskio.c ****     BSP_SD_GetCardInfo(&CardInfo);
 623              		.loc 1 602 5 view .LVU158
 624 002c 01A8     		add	r0, sp, #4
 625 002e FFF7FEFF 		bl	BSP_SD_GetCardInfo
 626              	.LVL50:
 603:FATFS/Target/sd_diskio.c ****     *(WORD*)buff = CardInfo.LogBlockSize;
 627              		.loc 1 603 5 view .LVU159
 628              		.loc 1 603 28 is_stmt 0 view .LVU160
 629 0032 089B     		ldr	r3, [sp, #32]
 630              		.loc 1 603 18 view .LVU161
 631 0034 2B80     		strh	r3, [r5]	@ movhi
 604:FATFS/Target/sd_diskio.c ****     res = RES_OK;
 632              		.loc 1 604 5 is_stmt 1 view .LVU162
 633              	.LVL51:
 605:FATFS/Target/sd_diskio.c ****     break;
 634              		.loc 1 605 5 view .LVU163
 635 0036 07E0     		b	.L56
 636              	.LVL52:
 637              	.L57:
 606:FATFS/Target/sd_diskio.c **** 
 607:FATFS/Target/sd_diskio.c ****   /* Get erase block size in unit of sector (DWORD) */
 608:FATFS/Target/sd_diskio.c ****   case GET_BLOCK_SIZE :
 609:FATFS/Target/sd_diskio.c ****     BSP_SD_GetCardInfo(&CardInfo);
 638              		.loc 1 609 5 view .LVU164
 639 0038 01A8     		add	r0, sp, #4
 640 003a FFF7FEFF 		bl	BSP_SD_GetCardInfo
 641              	.LVL53:
 610:FATFS/Target/sd_diskio.c ****     *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 642              		.loc 1 610 5 view .LVU165
 643              		.loc 1 610 29 is_stmt 0 view .LVU166
 644 003e 089B     		ldr	r3, [sp, #32]
 645              		.loc 1 610 43 view .LVU167
 646 0040 5B0A     		lsrs	r3, r3, #9
 647              		.loc 1 610 19 view .LVU168
 648 0042 2B60     		str	r3, [r5]
 611:FATFS/Target/sd_diskio.c ****     res = RES_OK;
 649              		.loc 1 611 5 is_stmt 1 view .LVU169
 650              	.LVL54:
 612:FATFS/Target/sd_diskio.c ****     break;
 651              		.loc 1 612 5 view .LVU170
 652 0044 00E0     		b	.L56
 653              	.LVL55:
 654              	.L62:
 584:FATFS/Target/sd_diskio.c **** 
 655              		.loc 1 584 33 is_stmt 0 discriminator 1 view .LVU171
 656 0046 0324     		movs	r4, #3
 657              	.LVL56:
 658              	.L56:
 613:FATFS/Target/sd_diskio.c **** 
 614:FATFS/Target/sd_diskio.c ****   default:
 615:FATFS/Target/sd_diskio.c ****     res = RES_PARERR;
ARM GAS  C:\usertemp\ccUMpah2.s 			page 24


 616:FATFS/Target/sd_diskio.c ****   }
 617:FATFS/Target/sd_diskio.c **** 
 618:FATFS/Target/sd_diskio.c ****   return res;
 619:FATFS/Target/sd_diskio.c **** }
 659              		.loc 1 619 1 view .LVU172
 660 0048 2046     		mov	r0, r4
 661 004a 0BB0     		add	sp, sp, #44
 662              	.LCFI15:
 663              		.cfi_remember_state
 664              		.cfi_def_cfa_offset 12
 665              		@ sp needed
 666 004c 30BD     		pop	{r4, r5, pc}
 667              	.LVL57:
 668              	.L63:
 669              	.LCFI16:
 670              		.cfi_restore_state
 615:FATFS/Target/sd_diskio.c ****   }
 671              		.loc 1 615 9 view .LVU173
 672 004e 0424     		movs	r4, #4
 673 0050 FAE7     		b	.L56
 674              	.L66:
 675 0052 00BF     		.align	2
 676              	.L65:
 677 0054 00000000 		.word	Stat
 678              		.cfi_endproc
 679              	.LFE347:
 681              		.section	.text.BSP_SD_WriteCpltCallback,"ax",%progbits
 682              		.align	1
 683              		.global	BSP_SD_WriteCpltCallback
 684              		.syntax unified
 685              		.thumb
 686              		.thumb_func
 688              	BSP_SD_WriteCpltCallback:
 689              	.LFB348:
 620:FATFS/Target/sd_diskio.c **** #endif /* _USE_IOCTL == 1 */
 621:FATFS/Target/sd_diskio.c **** 
 622:FATFS/Target/sd_diskio.c **** /* USER CODE BEGIN afterIoctlSection */
 623:FATFS/Target/sd_diskio.c **** /* can be used to modify previous code / undefine following code / add new code */
 624:FATFS/Target/sd_diskio.c **** /* USER CODE END afterIoctlSection */
 625:FATFS/Target/sd_diskio.c **** 
 626:FATFS/Target/sd_diskio.c **** /* USER CODE BEGIN callbackSection */
 627:FATFS/Target/sd_diskio.c **** /* can be used to modify / following code or add new code */
 628:FATFS/Target/sd_diskio.c **** /* USER CODE END callbackSection */
 629:FATFS/Target/sd_diskio.c **** /**
 630:FATFS/Target/sd_diskio.c ****   * @brief Tx Transfer completed callbacks
 631:FATFS/Target/sd_diskio.c ****   * @param hsd: SD handle
 632:FATFS/Target/sd_diskio.c ****   * @retval None
 633:FATFS/Target/sd_diskio.c ****   */
 634:FATFS/Target/sd_diskio.c **** void BSP_SD_WriteCpltCallback(void)
 635:FATFS/Target/sd_diskio.c **** {
 690              		.loc 1 635 1 is_stmt 1 view -0
 691              		.cfi_startproc
 692              		@ args = 0, pretend = 0, frame = 0
 693              		@ frame_needed = 0, uses_anonymous_args = 0
 694 0000 08B5     		push	{r3, lr}
 695              	.LCFI17:
 696              		.cfi_def_cfa_offset 8
ARM GAS  C:\usertemp\ccUMpah2.s 			page 25


 697              		.cfi_offset 3, -8
 698              		.cfi_offset 14, -4
 636:FATFS/Target/sd_diskio.c **** 
 637:FATFS/Target/sd_diskio.c ****   /*
 638:FATFS/Target/sd_diskio.c ****    * No need to add an "osKernelRunning()" check here, as the SD_initialize()
 639:FATFS/Target/sd_diskio.c ****    * is always called before any SD_Read()/SD_Write() call
 640:FATFS/Target/sd_diskio.c ****    */
 641:FATFS/Target/sd_diskio.c **** #if (osCMSIS < 0x20000U)
 642:FATFS/Target/sd_diskio.c ****    osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
 699              		.loc 1 642 4 view .LVU175
 700 0002 0022     		movs	r2, #0
 701 0004 0221     		movs	r1, #2
 702 0006 024B     		ldr	r3, .L69
 703 0008 1868     		ldr	r0, [r3]
 704 000a FFF7FEFF 		bl	osMessagePut
 705              	.LVL58:
 643:FATFS/Target/sd_diskio.c **** #else
 644:FATFS/Target/sd_diskio.c ****    const uint16_t msg = WRITE_CPLT_MSG;
 645:FATFS/Target/sd_diskio.c ****    osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 646:FATFS/Target/sd_diskio.c **** #endif
 647:FATFS/Target/sd_diskio.c **** }
 706              		.loc 1 647 1 is_stmt 0 view .LVU176
 707 000e 08BD     		pop	{r3, pc}
 708              	.L70:
 709              		.align	2
 710              	.L69:
 711 0010 00000000 		.word	SDQueueID
 712              		.cfi_endproc
 713              	.LFE348:
 715              		.section	.text.BSP_SD_ReadCpltCallback,"ax",%progbits
 716              		.align	1
 717              		.global	BSP_SD_ReadCpltCallback
 718              		.syntax unified
 719              		.thumb
 720              		.thumb_func
 722              	BSP_SD_ReadCpltCallback:
 723              	.LFB349:
 648:FATFS/Target/sd_diskio.c **** 
 649:FATFS/Target/sd_diskio.c **** /**
 650:FATFS/Target/sd_diskio.c ****   * @brief Rx Transfer completed callbacks
 651:FATFS/Target/sd_diskio.c ****   * @param hsd: SD handle
 652:FATFS/Target/sd_diskio.c ****   * @retval None
 653:FATFS/Target/sd_diskio.c ****   */
 654:FATFS/Target/sd_diskio.c **** void BSP_SD_ReadCpltCallback(void)
 655:FATFS/Target/sd_diskio.c **** {
 724              		.loc 1 655 1 is_stmt 1 view -0
 725              		.cfi_startproc
 726              		@ args = 0, pretend = 0, frame = 0
 727              		@ frame_needed = 0, uses_anonymous_args = 0
 728 0000 08B5     		push	{r3, lr}
 729              	.LCFI18:
 730              		.cfi_def_cfa_offset 8
 731              		.cfi_offset 3, -8
 732              		.cfi_offset 14, -4
 656:FATFS/Target/sd_diskio.c ****   /*
 657:FATFS/Target/sd_diskio.c ****    * No need to add an "osKernelRunning()" check here, as the SD_initialize()
 658:FATFS/Target/sd_diskio.c ****    * is always called before any SD_Read()/SD_Write() call
ARM GAS  C:\usertemp\ccUMpah2.s 			page 26


 659:FATFS/Target/sd_diskio.c ****    */
 660:FATFS/Target/sd_diskio.c **** #if (osCMSIS < 0x20000U)
 661:FATFS/Target/sd_diskio.c ****    osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 733              		.loc 1 661 4 view .LVU178
 734 0002 0022     		movs	r2, #0
 735 0004 0121     		movs	r1, #1
 736 0006 024B     		ldr	r3, .L73
 737 0008 1868     		ldr	r0, [r3]
 738 000a FFF7FEFF 		bl	osMessagePut
 739              	.LVL59:
 662:FATFS/Target/sd_diskio.c **** #else
 663:FATFS/Target/sd_diskio.c ****    const uint16_t msg = READ_CPLT_MSG;
 664:FATFS/Target/sd_diskio.c ****    osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 665:FATFS/Target/sd_diskio.c **** #endif
 666:FATFS/Target/sd_diskio.c **** }
 740              		.loc 1 666 1 is_stmt 0 view .LVU179
 741 000e 08BD     		pop	{r3, pc}
 742              	.L74:
 743              		.align	2
 744              	.L73:
 745 0010 00000000 		.word	SDQueueID
 746              		.cfi_endproc
 747              	.LFE349:
 749              		.global	SD_Driver
 750              		.section	.rodata.SD_Driver,"a"
 751              		.align	2
 754              	SD_Driver:
 755 0000 00000000 		.word	SD_initialize
 756 0004 00000000 		.word	SD_status
 757 0008 00000000 		.word	SD_read
 758 000c 00000000 		.word	SD_write
 759 0010 00000000 		.word	SD_ioctl
 760              		.section	.bss.SDQueueID,"aw",%nobits
 761              		.align	2
 764              	SDQueueID:
 765 0000 00000000 		.space	4
 766              		.section	.data.Stat,"aw"
 769              	Stat:
 770 0000 01       		.byte	1
 771              		.section	.rodata
 772              		.align	2
 773              		.set	.LANCHOR0,. + 0
 774              	.LC0:
 775 0000 0A000000 		.word	10
 776 0004 02000000 		.word	2
 777 0008 00000000 		.word	0
 778 000c 00000000 		.word	0
 779              		.text
 780              	.Letext0:
 781              		.file 2 "Middlewares/Third_Party/FatFs/src/integer.h"
 782              		.file 3 "Middlewares/Third_Party/FatFs/src/diskio.h"
 783              		.file 4 "D:/armtoolchain/arm-gnu-toolchain-13.3.rel1-mingw-w64-i686-arm-none-eabi/arm-none-eabi/in
 784              		.file 5 "D:/armtoolchain/arm-gnu-toolchain-13.3.rel1-mingw-w64-i686-arm-none-eabi/arm-none-eabi/in
 785              		.file 6 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_sd.h"
 786              		.file 7 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
 787              		.file 8 "Middlewares/Third_Party/FreeRTOS/Source/include/FreeRTOS.h"
 788              		.file 9 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
ARM GAS  C:\usertemp\ccUMpah2.s 			page 27


 789              		.file 10 "Middlewares/Third_Party/FreeRTOS/Source/include/queue.h"
 790              		.file 11 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.h"
 791              		.file 12 "Middlewares/Third_Party/FatFs/src/ff_gen_drv.h"
 792              		.file 13 "FATFS/Target/bsp_driver_sd.h"
 793              		.file 14 "FATFS/Target/sd_diskio.h"
ARM GAS  C:\usertemp\ccUMpah2.s 			page 28


DEFINED SYMBOLS
                            *ABS*:00000000 sd_diskio.c
C:\usertemp\ccUMpah2.s:20     .text.SD_CheckStatus:00000000 $t
C:\usertemp\ccUMpah2.s:25     .text.SD_CheckStatus:00000000 SD_CheckStatus
C:\usertemp\ccUMpah2.s:65     .text.SD_CheckStatus:00000020 $d
C:\usertemp\ccUMpah2.s:769    .data.Stat:00000000 Stat
C:\usertemp\ccUMpah2.s:70     .text.SD_initialize:00000000 $t
C:\usertemp\ccUMpah2.s:76     .text.SD_initialize:00000000 SD_initialize
C:\usertemp\ccUMpah2.s:186    .text.SD_initialize:00000068 $d
C:\usertemp\ccUMpah2.s:764    .bss.SDQueueID:00000000 SDQueueID
C:\usertemp\ccUMpah2.s:194    .text.SD_status:00000000 $t
C:\usertemp\ccUMpah2.s:200    .text.SD_status:00000000 SD_status
C:\usertemp\ccUMpah2.s:223    .text.SD_CheckStatusWithTimeout:00000000 $t
C:\usertemp\ccUMpah2.s:228    .text.SD_CheckStatusWithTimeout:00000000 SD_CheckStatusWithTimeout
C:\usertemp\ccUMpah2.s:284    .text.SD_read:00000000 $t
C:\usertemp\ccUMpah2.s:290    .text.SD_read:00000000 SD_read
C:\usertemp\ccUMpah2.s:420    .text.SD_read:00000070 $d
C:\usertemp\ccUMpah2.s:425    .text.SD_write:00000000 $t
C:\usertemp\ccUMpah2.s:431    .text.SD_write:00000000 SD_write
C:\usertemp\ccUMpah2.s:554    .text.SD_write:00000070 $d
C:\usertemp\ccUMpah2.s:559    .text.SD_ioctl:00000000 $t
C:\usertemp\ccUMpah2.s:565    .text.SD_ioctl:00000000 SD_ioctl
C:\usertemp\ccUMpah2.s:599    .text.SD_ioctl:00000018 $d
C:\usertemp\ccUMpah2.s:603    .text.SD_ioctl:0000001c $t
C:\usertemp\ccUMpah2.s:677    .text.SD_ioctl:00000054 $d
C:\usertemp\ccUMpah2.s:682    .text.BSP_SD_WriteCpltCallback:00000000 $t
C:\usertemp\ccUMpah2.s:688    .text.BSP_SD_WriteCpltCallback:00000000 BSP_SD_WriteCpltCallback
C:\usertemp\ccUMpah2.s:711    .text.BSP_SD_WriteCpltCallback:00000010 $d
C:\usertemp\ccUMpah2.s:716    .text.BSP_SD_ReadCpltCallback:00000000 $t
C:\usertemp\ccUMpah2.s:722    .text.BSP_SD_ReadCpltCallback:00000000 BSP_SD_ReadCpltCallback
C:\usertemp\ccUMpah2.s:745    .text.BSP_SD_ReadCpltCallback:00000010 $d
C:\usertemp\ccUMpah2.s:754    .rodata.SD_Driver:00000000 SD_Driver
C:\usertemp\ccUMpah2.s:751    .rodata.SD_Driver:00000000 $d
C:\usertemp\ccUMpah2.s:761    .bss.SDQueueID:00000000 $d
C:\usertemp\ccUMpah2.s:772    .rodata:00000000 $d

UNDEFINED SYMBOLS
BSP_SD_GetCardState
osKernelRunning
BSP_SD_Init
osMessageCreate
osKernelSysTick
BSP_SD_ReadBlocks_DMA
osMessageGet
BSP_SD_WriteBlocks_DMA
BSP_SD_GetCardInfo
osMessagePut
